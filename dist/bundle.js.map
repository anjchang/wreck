{"version":3,"sources":["webpack:///webpack/bootstrap bf92eabe4083a29933cc","webpack:///external \"React\"","webpack:///./src/typescript/commands.ts","webpack:///./src/typescript/datatypes.ts","webpack:///./src/typescript/text_tools.ts","webpack:///./src/components/Game.tsx","webpack:///external \"ReactDOM\"","webpack:///./src/components/Prompt.tsx","webpack:///./src/components/Terminal.tsx","webpack:///./src/components/Text.tsx","webpack:///./src/typescript/bird_world.ts","webpack:///./src/typescript/main.tsx"],"names":[],"mappings":"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U;AAEpB;AACa;AAChB;AACW;AACoE;AACpE;AAGpB;AAEoC;AAC9B;AACE;AACZ;AACyB;AACS;AACL;AACS;AACZ;AACO;AACjC;AACO;AACkB;AAC7B;AACG;AACS;AAChB;AACJ;AAEyD;AAClB;AACF;AACA;AACC;AACH;AAEnB;AACK;AACmD;AACH;AAC3B;AACM;AACpC;AAC8B;AACK;AACF;AACtB;AAClB;AAC8C;AACD;AAClC;AACe;AACR;AAC0B;AACzB;AACnB;AAEkB;AACY;AACD;AACqD;AACnD;AAC3B;AACY;AACO;AACY;AACD;AACR;AACN;AACL;AACE;AACT;AACJ;AACJ;AACgB;AACpB;AACqD;AAEF;AACX;AACO;AAC/C;AAEyC;AACW;AACZ;AAC1B;AACmC;AACnB;AAEoB;AAChB;AACjB;AACkB;AAEgE;AACjF;AACV;AAC0B;AACc;AACxC;AACS;AACb;AACJ;AAEsD;AACN;AAClB;AAES;AAC4B;AAClC;AACO;AAEH;AACA;AACX;AACtB;AACmD;AACvD;AAE+C;AACpB;AACiB;AAEvC;AACL;AAEkC;AAC6B;AACzC;AACP;AACG;AACc;AACwC;AACpC;AACS;AACL;AACJ;AACe;AACK;AAClC;AAC0C;AACtD;AACkD;AACvD;AACwC;AACyB;AACA;AAC3B;AACb;AACQ;AACzB;AACR;AACkB;AACH;AACf;AACW;AACM;AACG;AACvB;AACJ;AACD,S","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 10);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap bf92eabe4083a29933cc","module.exports = React;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"React\"\n// module id = 0\n// module chunks = 0","// import {Map} from 'immutable';\nimport {Direction, EdgeOperation, EdgeDirection, Face, RelativePosition, RendOperation} from './datatypes';\n\nimport {starts_with, tokenize, untokenize, normalize_whitespace} from './text_tools';\n\nexport type Token = string;\n\nexport type HorizPositionWord = 'left' | 'center' | 'right';\nexport let horiz_position_word_tokens: [HorizPositionWord][] = [['left'], ['center'], ['right']];\n\nexport type VertPositionWord = 'top' | 'middle' | 'bottom';\nexport let vert_position_word_tokens: [VertPositionWord][] = [['top'], ['middle'], ['bottom']];\n\nexport type PositionWord = HorizPositionWord | VertPositionWord;\nexport let word_2_relative_position = new Map<PositionWord, RelativePosition>([\n    ['left', RelativePosition.left],\n    ['center', RelativePosition.center],\n    ['right', RelativePosition.right],\n    ['top', RelativePosition.top],\n    ['middle', RelativePosition.middle],\n    ['bottom', RelativePosition.bottom]\n]);\nexport let position_word_tokens: [PositionWord][] = (<[PositionWord][]>horiz_position_word_tokens).concat(vert_position_word_tokens);\n\nexport type FaceWord = 'back' | 'front' | 'right' | 'left' | 'top' | 'bottom';\nexport let word_2_face = new Map<FaceWord, Face>([\n    ['back', Face.n],\n    ['front', Face.s],\n    ['right', Face.e],\n    ['left', Face.w],\n    ['top', Face.t],\n    ['bottom', Face.b]\n]);\nexport let face_word_tokens: [FaceWord][] = [['back'], ['front'], ['right'], ['left'], ['top'], ['bottom']];\n\nexport type RendOpWord = 'remove' | 'replace';\nexport let word_2_rend_op = new Map<RendOpWord, RendOperation>([\n    ['remove', RendOperation.open],\n    ['replace', RendOperation.close]\n]);\nexport let rend_op_word_tokens: [RendOpWord][] = [['remove'], ['replace']];\n\nexport type DangleOpWord = 'open' | 'close';\nexport let word_2_dangle_op = new Map<DangleOpWord, RendOperation>([\n    ['open', RendOperation.open],\n    ['close', RendOperation.close]\n]);\nexport let dangle_op_word_tokens: [DangleOpWord][] = [['open'], ['close']];\n\n\nexport type EdgeOpWord = 'cut' | 'tape';\nexport let word_2_edge_op = new Map<EdgeOpWord, EdgeOperation>([\n    ['cut', EdgeOperation.cut],\n    ['tape', EdgeOperation.tape]\n]);\nexport let edge_op_word_tokens: [EdgeOpWord][] = [['cut'], ['tape']];\n\nexport type EdgeDirWord = 'horizontally' | 'vertically';\nexport let word_2_edge_dir = new Map<EdgeDirWord, EdgeDirection>([\n    ['horizontally', EdgeDirection.horizontal],\n    ['vertically', EdgeDirection.vertical]\n]);\nexport let edge_dir_word_tokens: [EdgeDirWord][] = [['horizontally'], ['vertically']];\n\nexport type RotateYDirWord = \"left\" | \"right\";\nexport let word_2_degrees = new Map<RotateYDirWord, number>([\n    ['left', 270],\n    ['right', 90]\n]);\nexport let rotate_y_word_tokens: [RotateYDirWord][] = [['left'], ['right']];\n\nexport type RollDirWord = \"forward\" | \"backward\" | \"left\" | \"right\";\nexport let word_2_dir = new Map<RollDirWord, Direction>([\n    ['forward', Direction.n],\n    ['backward', Direction.s],\n    ['left', Direction.w],\n    ['right', Direction.e]\n]);\nexport let roll_dir_word_tokens: [RollDirWord][] = [['forward'], ['backward'], ['left'], ['right']];\n\nexport enum DisplayEltType {\n    keyword = 0,\n    option = 1,\n    filler = 2,\n    partial = 3,\n    error = 4\n}\n\nexport interface DisplayElt {\n    display: DisplayEltType, // the intended display style for this element\n    match: string, // the string that the parser matched for this element\n    typeahead?: string[], // array of typeahead options\n    name?: string // internal name of this match (probably not useful for rendering purposes)\n}\n\nexport enum MatchValidity {\n    valid = 0,\n    partial = 1,\n    invalid = 2\n}\n\nexport class CommandParser {\n    command: string;\n    tokens: Token[];\n    token_gaps: string[];\n    position: number = 0;\n    validity: MatchValidity = MatchValidity.valid;\n    match: DisplayElt[] = [];\n\n    constructor(command: string) {\n        this.command = command;\n        [this.tokens, this.token_gaps] = tokenize(command);\n    }\n\n    consume_exact(spec_tokens: Token[], display: DisplayEltType=DisplayEltType.keyword, name?: string): boolean {\n        if (spec_tokens.length === 0) {\n            throw new Error(\"Can't consume an empty spec.\");\n        }\n        \n        let match_tokens: Token[] = [];\n        let match_gaps: string[] = [];\n        let pos_offset = 0;\n        for (let spec_tok of spec_tokens) {\n            if (this.position + pos_offset === this.tokens.length) {\n                this.validity = MatchValidity.partial;\n                break; //partial validity\n            }\n            let next_tok = this.tokens[this.position + pos_offset];\n            let next_gap = this.token_gaps[this.position + pos_offset];\n\n            if (spec_tok === next_tok.toLowerCase()) {\n                match_tokens.push(next_tok);\n                match_gaps.push(next_gap);\n                pos_offset++;\n                continue;\n            }\n\n            if (starts_with(spec_tok, next_tok.toLowerCase())) {\n                match_tokens.push(next_tok);\n                match_gaps.push(next_gap);\n                this.validity = MatchValidity.partial;\n                pos_offset++;\n                break;\n            }\n\n            this.validity = MatchValidity.invalid;\n            break;   \n        }\n\n        this.position += pos_offset;\n\n\n        if (this.validity === MatchValidity.valid) {\n            this.match.push({\n                display: display,\n                match: untokenize(match_tokens, match_gaps),\n                name: name});\n            return true;\n        }\n\n        if (this.validity === MatchValidity.partial) {\n            if (this.position === this.tokens.length) {\n                this.match.push({\n                    display: DisplayEltType.partial,\n                    match: untokenize(match_tokens, match_gaps),\n                    typeahead: [untokenize(spec_tokens)],\n                    name: name});\n\n                return false;\n            } else {\n                this.validity = MatchValidity.invalid;\n            }\n        }\n\n        match_tokens.push(...this.tokens.slice(this.position));\n        match_gaps.push(...this.token_gaps.slice(this.position, this.tokens.length));\n        this.position = this.tokens.length;\n        this.match.push({\n            display: DisplayEltType.error,\n            match: untokenize(match_tokens, match_gaps),\n            name: name});\n        return false;\n    }\n\n    subparser() {\n        return new CommandParser(untokenize(this.tokens.slice(this.position), this.token_gaps.slice(this.position)));\n    }\n\n    integrate(subparser: CommandParser) {\n        this.position += subparser.position;\n        this.match.push(...subparser.match);\n        this.validity = subparser.validity;\n    }\n\n    consume_option<S extends string>(option_spec_tokens: Token[][], name?: string, display: DisplayEltType=DisplayEltType.option): S | false{\n        let partial_matches: DisplayElt[] = []; \n        for (let spec_toks of option_spec_tokens) {\n            let subparser = this.subparser();\n            let exact_match = subparser.consume_exact(spec_toks, display, name);\n\n            if (exact_match) {\n                this.integrate(subparser);\n                return <S>normalize_whitespace(untokenize(spec_toks));\n            }\n\n            if (subparser.validity === MatchValidity.partial){\n                partial_matches.push(subparser.match[0]);\n            }\n        }\n\n        if (partial_matches.length > 0) {\n            this.validity = MatchValidity.partial;\n            this.position = this.tokens.length - 1;\n            let typeahead = partial_matches.map((de) => de.typeahead[0]);\n            this.match.push({\n                display: DisplayEltType.partial,\n                match: partial_matches[0].match,\n                typeahead: typeahead,\n                name: name})\n            return false;\n        }\n\n        this.validity = MatchValidity.invalid;\n        let match_tokens = this.tokens.slice(this.position);\n        let match_token_gaps = this.token_gaps.slice(this.position, this.tokens.length);\n        this.match.push({\n            display: DisplayEltType.error,\n            match: untokenize(match_tokens, match_token_gaps),\n            name: name});\n        return false;\n    }\n\n    consume_filler(spec_tokens: Token[]){\n        return this.consume_exact(spec_tokens, DisplayEltType.filler);\n    }\n\n    is_done() {\n        if (this.position !== this.tokens.length) {\n            return false;\n        }\n\n        return this.validity === MatchValidity.valid;\n    }\n\n    done() {\n        if (this.position !== this.tokens.length) {\n            this.validity = MatchValidity.invalid;\n            this.match.push({\n                display: DisplayEltType.error,\n                match: untokenize(this.tokens.slice(this.position), this.token_gaps.slice(this.position, this.tokens.length))\n            });\n            this.position = this.tokens.length;\n        }\n\n        return this.validity === MatchValidity.valid;\n    }\n\n    get_match(name: string){\n        for (let m of this.match) {\n            if (m.name === name) {\n                return m;\n            }\n        }\n        return null;\n    }\n}\n\nexport function with_early_stopping(gen: IterableIterator<string | boolean>){\n    let value: any | boolean = undefined;\n    let done: boolean = false;\n\n    while (!done) {\n        let result = gen.next(value);\n        value = result.value;\n        done = result.done;\n        if (value === false) {\n            return;\n        }\n    }\n\n    return value;\n}\n\nexport function call_with_early_stopping<F extends (...any) => any>(gen_func: F){\n    function inner(...args) {\n        let gen = gen_func(...args);\n        return with_early_stopping(gen);\n    }\n    return inner;\n}\n\nexport interface WorldType {\n    get_commands(): Command<this>[],\n    interstitial_update?(): InterstitialUpdateResult<this>,\n}\n\nexport type InterstitialUpdateResult<T extends WorldType> = {\n    world?: T;\n    message?: string;\n} | undefined;\n\nexport type CommandResult<T extends WorldType> = {\n    world?: T;\n    message?: string;\n    parser?: CommandParser;\n} | undefined;\n\nexport interface Command<T extends WorldType> {\n    command_name: Token[];\n    execute: (world: T, parser: CommandParser) => CommandResult<T>;\n}\n\nexport function apply_command<T extends WorldType> (world: T, cmd: string) {\n    let parser = new CommandParser(cmd);\n\n    let commands = world.get_commands();\n    let options = commands.map((cmd) => cmd.command_name);\n\n    let cmd_name = parser.consume_option(options, 'command', DisplayEltType.keyword);\n    let result: CommandResult<T> = {parser: parser, world: world};\n\n    if (!cmd_name) {\n        return result;\n    }\n\n    let command = commands[commands.findIndex((cmd) => cmd_name === untokenize(cmd.command_name))]\n\n    let cmd_result = command.execute(world, parser);\n    \n    if (cmd_result !== undefined) {\n        if (cmd_result.world !== undefined) {\n            result.world = cmd_result.world;\n        }\n        if (cmd_result.message !== undefined) {\n            result.message = cmd_result.message;\n        }\n    }\n\n    result = apply_interstitial_update(result);\n    \n    return result;\n}\n\nfunction apply_interstitial_update<T extends WorldType>(result: CommandResult<T>): CommandResult<T> {\n    if (result.world.interstitial_update !== undefined) {\n        //confusing, but we are running pre_command for the *next* command, not the one that just ran\n        let res2 = result.world.interstitial_update();\n        if (res2.world !== undefined) {\n            result.world = res2.world;\n        }\n        if (res2.message !== undefined) {\n            if (result.message !== undefined){\n                result.message += '\\n\\n' + res2.message;\n            } else {\n                result.message = res2.message;\n            }\n        }\n    }\n    return result;\n}\n\nexport class WorldDriver<T extends WorldType> {\n    history: CommandResult<T>[];\n    \n    current_state: CommandResult<T>;\n\n    constructor (initial_world: T) {\n        let initial_result: CommandResult<T> = {world: initial_world};\n        initial_result = apply_interstitial_update(initial_result);\n        this.history = [initial_result];\n\n        this.apply_command('', false); //populate this.current_state\n    }\n\n    apply_command(cmd: string, commit: boolean = true) {\n        let prev_state = this.history[this.history.length - 1];\n        let result = apply_command(prev_state.world, cmd);\n        \n        this.current_state = result;\n        if (commit) {\n            this.commit();\n        }\n        return result;\n    }\n\n    commit() {\n        let result = this.current_state;\n        this.history.push(this.current_state);\n        this.apply_command('', false);\n        return result;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/typescript/commands.ts","// import {\n//     Collection,\n//     hash,\n//     isImmutable,\n//     List,\n//     Map,\n//     Set\n// } from 'immutable';\n\nexport class FuckDict<K, V> {\n    readonly keys_map: Map<string, K>;\n    readonly values_map: Map<string, V>;\n\n    size: number = 0\n\n    constructor(a?: [K, V][]) {\n        this.keys_map = new Map<string, K>();\n        this.values_map = new Map<string, V>();\n\n        if (a !== undefined) {\n            for (let [k, v] of a) {\n                this.set(k, v);\n            }\n        }\n    }\n\n    set(k: K, v: V) {\n        let s = k.toString();\n        this.keys_map.set(s, k);\n        this.values_map.set(s, v);\n        this.size = this.keys_map.size;\n        return this;\n    }\n\n    get(k: K) {\n        let s = k.toString();\n        return this.values_map.get(s);\n    }\n\n    has_key(k: K) {\n        return this.keys_map.has(k.toString());\n    }\n\n    keys_array() {\n        return Array.from(this.keys_map.values());\n    }\n\n    values_array() {\n        return Array.from(this.values_map.values());\n    }\n\n    entries_array(): [K, V][] {\n        let result: [K, V][] = [];\n        for (let [s, k] of this.keys_map.entries()) {\n            result.push([k, this.values_map.get(s)]);\n        }\n        return result;\n    }\n\n    keys_equal(other: FuckDict<K, V>) {\n        for (let elem of this.keys_array()) {\n            if (!other.has_key(elem)){\n                return false;\n            }\n        }\n\n        for (let elem of other.keys_array()) {\n            if (!this.has_key(elem)){\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    keys_intersect(other: FuckDict<K, V>) {\n        let result: K[] = [];\n        for (let k of this.keys_array()) {\n            if (other.has_key(k)) {\n                result.push(k)\n            }\n        }\n        return result;\n    }\n\n    keys_subset(other: FuckDict<K, V>) {\n        for (let elem of this.keys_array()) {\n            if (!other.has_key(elem)){\n                return false;\n            }\n        }\n        return true;\n    }\n\n    toString() {\n        let entry_strings: string[] = this.entries_array().map((x) => x.toString()).sort();\n\n        return `FuckDict<${entry_strings.join(',')}>`;\n    }\n\n    copy() {\n        return new FuckDict(this.entries_array());\n    }\n}\n\nexport type FuckSet<T> = FuckDict<T, undefined>;\n\nexport function arrays_fuck_equal<T>(ar1: T[], ar2: T[]) {\n    if (ar1.length !== ar2.length) {\n        return false;\n    }\n\n    for (let i = 0; i < ar1.length; i++) {\n        if (ar1[i].toString() !== ar2[i].toString()) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function array_fuck_contains<T>(ar: T[], elt: T){\n    return ar.some((x) => x.toString() === elt.toString())\n}\n\nexport type Partition = FuckSet<number>;\n\n\nexport class Edge {\n    readonly start: number;\n    readonly end: number;\n\n    constructor(start: number, end: number){\n        if (end < start){\n            this.start = end;\n            this.end = start;\n        } else {\n            this.start = start;\n            this.end = end;\n        }\n    }\n\n    equals(other:Edge){\n        return (this.start === other.start && this.end === other.end);\n    }\n\n    toString(): string {\n        return `Edge<${this.start},${this.end}>`;\n    }\n}\n\nexport enum Face {\n    n = 0,\n    s = 1,\n    e = 2,\n    w = 3,\n    t = 4,\n    b = 5\n}\n\nexport let faces = [Face.n, Face.s, Face.e, Face.w, Face.t, Face.b];\n\nexport enum Direction {\n    n = 0,\n    s = 1,\n    e = 2,\n    w = 3\n}\n\nexport let directions = [Direction.n, Direction.s, Direction.e, Direction.w];\n\nexport let direction_2_face = new Map<Direction, Face>([\n    [Direction.n, Face.n],\n    [Direction.s, Face.s],\n    [Direction.e, Face.e],\n    [Direction.w, Face.w]\n]);\n\nexport class Dangle {\n    readonly partition: Partition;\n    readonly edges: Edge[];\n    readonly fixed_face: Face;\n    readonly free_face: Face;\n\n    constructor(partition: Partition, edges: Edge[], fixed_face: Face, free_face: Face) {\n        this.partition = partition;\n        this.edges = edges;\n        this.fixed_face = fixed_face;\n        this.free_face = free_face;\n    }\n\n    equals(other: Dangle){\n        return (\n            this.partition.keys_equal(other.partition)\n            && arrays_fuck_equal(this.edges, other.edges)\n            && this.fixed_face === other.fixed_face\n            && this.free_face === other.free_face);\n    }\n\n    toString() {\n        return `Dangle<${this.partition},${this.edges},${this.fixed_face},${this.free_face}>`;\n        \n        //let faces_hash = (this.fixed_face << 16) ^ this.free_face; //fuck!\n        //return this.partition.hashCode() + this.edges.hashCode() + faces_hash;\n    }\n}\n\nexport type Point2 = [number, number];\n\nexport function make_matrix2(data_obj: number[][]) {\n    let dim_y = data_obj.length;\n    let dim_x = data_obj[0].length;\n\n    let data = new Int16Array(data_obj.reduce((x, y) => x.concat(y)));\n    // TODO complain if the total length is wrong\n    return new Matrix2(data, dim_x, dim_y);\n}\n\nexport class Matrix2 {\n    readonly dim_x: number;\n    readonly dim_y: number;\n    readonly data: Int16Array;\n    \n    constructor (data: Int16Array, dim_x: number, dim_y: number) {\n        this.data = data;\n        this.dim_x = dim_x;\n        this.dim_y = dim_y;\n    }\n\n    get(x: number, y: number): number {\n        return this.data[y * this.dim_x + x];\n    }\n\n    set(x: number, y: number, value: number) {\n        this.data[y * this.dim_x + x] = value;\n    }\n\n    rotate(degrees: number): Matrix2 {\n        //validate input better\n\n        if (degrees == 360 || degrees == 0) {\n            return this;\n        }\n\n        const n_rotations = degrees / 90;\n        let m: Matrix2 = this;\n        const dim_x = this.dim_x;\n        const dim_y = this.dim_y;\n        for (let i = 0; i < n_rotations; i++){\n            let new_data = new Int16Array(dim_x * dim_y);\n            let new_mat2 = new Matrix2(new_data, dim_y, dim_x);\n            for (let y = 0; y < dim_y; y++){\n                for (let x = 0; x < dim_x; x++){\n                    new_mat2.set(dim_y - 1 - y, x, m.get(x, y));\n                }\n            }\n            m = new_mat2;\n        }\n        return m\n    }\n\n    contains(value: number): boolean{\n        return this.data.indexOf(value) !== -1;\n    }\n}\n\n\nexport enum CardboardEdge {\n    intact = 0,\n    cut = 1,\n}\n\nexport enum TapeEdge {\n    untaped = 0,\n    taped = 1,\n    cut = 2\n}\n\nexport class EdgeState {\n    readonly cardboard: CardboardEdge;\n    readonly tape: TapeEdge;\n\n    constructor (cardboard?: CardboardEdge, tape?: TapeEdge){\n        if (cardboard === undefined) {\n            cardboard = CardboardEdge.intact;\n        }\n        this.cardboard = cardboard;\n\n        if (tape === undefined) {\n            tape = TapeEdge.untaped;\n        }\n        this.tape = tape;\n    }\n\n    cut() {\n        let new_tape: TapeEdge;\n        if (this.tape == TapeEdge.taped) {\n            new_tape = TapeEdge.cut;\n        } else {\n            new_tape = this.tape\n        }\n\n        return new EdgeState(CardboardEdge.cut, new_tape);\n    }\n\n\n    apply_tape() {\n        return new EdgeState(this.cardboard, TapeEdge.taped);\n    }\n}\n\nexport enum EdgeOperation {\n    cut = 0,\n    tape = 1\n}\n\nexport enum EdgeDirection {\n    horizontal = 0,\n    vertical = 1\n}\n\nexport enum RendState {\n    closed = 0,\n    open = 1\n}\n\nexport enum RendOperation {\n    close = 0,\n    open = 1\n}\n\nexport enum SpillageLevel {\n    none = 0,\n    light = 1,\n    heavy = 2\n}\n\nexport enum Weight {\n    empty = 0,\n    very_light = 1,\n    light = 2,\n    medium = 3,\n    heavy = 4,\n    very_heavy = 5\n}\n\nexport abstract class Item {\n    abstract weight(): Weight;\n    abstract name(): string;\n    abstract pre_gestalt(): string;\n    abstract post_gestalt(): string;\n    article(): string {\n        return 'a';\n    }\n}\n\n\nexport type Counter<T> = Map<T, number>;\n\nexport function counter_add<T>(counter: Counter<T>, key: T, inc: number){\n    let cur_val = 0;\n    if (counter.has(key)){\n        cur_val = counter.get(key);\n    }\n    return counter.set(key, cur_val + inc);\n}\n\nexport function counter_get<T>(counter: Counter<T>, key: T){\n    let cur_val = 0;\n    if (counter.has(key)){\n        cur_val = counter.get(key);\n    }\n    return cur_val;\n}\n\nexport function counter_update<T>(counter1: Counter<T>, counter2: Counter<T>){\n    counter2.forEach(function (v, k){\n        counter_add(counter1, k, v);\n    });\n\n    return counter1;\n}\n\nexport function counter_order<T>(counter: Counter<T>, include_zero=false){\n    let result = Array.from(counter.entries()).sort((a, b) => a[1] - b[1]);\n    if (!include_zero) {\n        result = result.filter(([t, i]) => i > 0);\n    }\n    return result.map(([t, i]) => t);\n}\n\nexport enum RelativePosition {\n    left = 0, center = 1, right = 2,\n    top = 3, middle = 4, bottom = 5\n}\n\nexport class WreckError extends Error {}\n\n// used to signal errors caused by trying to update world state in a way that breaks the reality of the world\n// so assumes that commands are already valid, the attempted update *could work* if the state were different\nexport class WorldUpdateError extends WreckError {}\n\n// used to signal that a command/pseudo command is not specified legally\n// the command cannot be executed because it *cannot be interpreted*\nexport class CommandError extends WreckError {}\n\n\n// WEBPACK FOOTER //\n// ./src/typescript/datatypes.ts","import {Face} from './datatypes';\n\nexport function uncapitalize(msg: string) {\n    return msg[0].toLowerCase() + msg.slice(1);\n}\n\nexport function capitalize(msg: string) {\n    return msg[0].toUpperCase() + msg.slice(1);\n}\n\nexport function face_message(face_order: Face[], f_code_2_name?: Map<Face, string>){\n    if (f_code_2_name === undefined) {\n        f_code_2_name = new Map<Face, string>([\n            [Face.n, 'back'],\n            [Face.s, 'front'],\n            [Face.e, 'right'],\n            [Face.w, 'left'],\n            [Face.t, 'top'],\n            [Face.b, 'bottom']\n        ]);\n    }\n\n    if (face_order.length == 1) {\n        return f_code_2_name.get(face_order[0]) + ' face';\n    } else {\n        return face_order.slice(0, -1).map((x) => f_code_2_name.get(x)).join(', ') + ' and ' + f_code_2_name.get(face_order[face_order.length - 1]) + ' faces';\n    }\n}\n\nexport function starts_with(str: string, searchString: string, position?: number){\n    position = position || 0;\n    return str.substr(position, searchString.length) === searchString;\n}\n\nexport function tokens_equal(tks1: string[], tks2: string[]) {\n    if (tks1.length !== tks2.length) {\n        return false;\n    }\n\n    for (let i = 0; i < tks1.length; i++) {\n        if (tks1[i] !== tks2[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function tokenize(s: string): [string[], string[]] {\n    let word_pat = /[\\S]+/g;\n    let space_pat = /[^\\S]+/g;\n\n    let tokens = s.split(space_pat);\n    let gaps = s.split(word_pat);\n\n    if (tokens.length > 0){\n        if (tokens[0] === '') {\n            tokens.splice(0, 1);\n        }\n        if (tokens[tokens.length - 1] === '') {\n            tokens.splice(tokens.length - 1, 1);\n        }\n    }\n\n    return [tokens, gaps];\n}\n\nfunction tokenize_tests() {\n    console.log('tokenize tests');\n    console.log(tokenize(' l'));\n}\n\nexport function untokenize(tokens: string[], gaps?: string[]){\n    if (gaps === undefined) {\n        return tokens.join(' ');\n    }\n    \n    let result: string = '';\n    let i = 0;\n    for (i = 0; i < gaps.length; i++){\n        result += gaps[i];\n        if (i < tokens.length) {\n            result += tokens[i];\n        }\n    }\n\n    return result;\n}\n\nexport function normalize_whitespace(s: string) {\n    return s.trim().replace(/\\s+/g, ' ');\n}\n\nexport function last(x: any[] | string){\n    return x[x.length - 1];\n}\n\nexport function random_choice(choices: any[]) {\n  var index = Math.floor(Math.random() * choices.length);\n  return choices[index];\n}\n\n\n// WEBPACK FOOTER //\n// ./src/typescript/text_tools.ts","import * as React from \"react\";\nimport * as ReactDom from \"react-dom\";\n\nimport {Terminal} from \"./Terminal\";\n\nimport {Item} from \"../typescript/datatypes\";\nimport * as Items from \"../typescript/items\";\n\nimport * as World from \"../typescript/world\";\n\nimport {WorldDriver, WorldType, MatchValidity} from \"../typescript/commands\";\n\nimport {BirdWorld} from '../typescript/bird_world';\n\n\nexport class Game extends React.Component<any, WorldDriver<World.SingleBoxWorld>> {\n  world_driver: WorldDriver<WorldType>;\n\n  componentWillMount () {\n    // let contents: Item[] = [new Items.Codex(), new Items.Pinecone(), new Items.CityKey()];\n    // let world = new World.SingleBoxWorld({box: new World.Box({contents: contents})});\n\n    this.world_driver = new WorldDriver(new BirdWorld())\n    \n  }\n\n  render () {\n    return (\n      <Terminal\n        world_driver={this.world_driver}\n      \n       />\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/Game.tsx","module.exports = ReactDOM;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ReactDOM\"\n// module id = 5\n// module chunks = 0","import * as React from 'react';\n\nconst InputWrapper = (props) => {\n  const {style, children, ...rest} = props;\n  const base_style = {\n    position: 'relative'\n  };\n  return (\n    <div style={{...base_style, ...style}} {...rest} >\n      {children}\n    </div>\n  );\n}\n\nconst InputDisplay = (props) => {\n  const {children, style, ...rest} = props;\n  const base_style = {\n    worWrap: 'break-word',\n    outline: 0,\n    display: 'inline-block',\n    boxShadow: 'none',\n  };\n\n  return (\n    <span style={{...base_style, ...style}} {...rest}>\n      {children}\n    </span>\n  );\n}\n\nlet keys = {\n  enter: 13,\n};\n\nexport class Prompt extends React.Component<any, any> {\n  input: any;\n\n\n\n  state = { value: '' };\n\n  handleSubmit = () => {\n    let success = this.props.onSubmit();\n    if (success) {\n      this.setState({value: ''});\n    } \n  }\n\n  // when key down is called by auto complete see if we should just submit\n  handleKeys = ({keyCode}) => {\n    if (keyCode === keys.enter) {\n      this.handleSubmit();\n    }\n    this.setCursor(this.input, this.input.value.length);\n  }\n\n  handleChange = () => {\n    const value = this.input.value;\n    this.props.onChange(value)\n    this.setState({value: value});\n  }\n\n  focus = () => {\n    this.input.focus();\n  }\n\n  setCursor = (node,pos) => {\n      node = (typeof node === \"string\") ? document.getElementById(node) : node;\n\n      if(!node){\n          return false;\n      }else if(node.createTextRange){\n          var textRange = node.createTextRange();\n          textRange.collapse(true);\n          textRange.moveEnd(pos);\n          textRange.moveStart(pos);\n          textRange.select();\n          return true;\n      }else if(node.setSelectionRange){\n          node.setSelectionRange(pos,pos);\n          return true;\n      }\n\n      return false;\n  }\n\n  render() {\n    console.log(this.state.value);\n    const input_style: any = {\n      position: 'absolute',\n      left: '-16px',\n      top: 0,\n      width: 0,\n      height: 0,\n      background: 'transparent',\n      border: 'none',\n      color: 'transparent',\n      outline: 'none',\n      padding: 0,\n      resize: 'none',\n      zIndex: -1,\n      overflow: 'hidden'\n    };\n    return (\n        <InputWrapper onClick={() => this.focus()}>\n          <input onChange={this.handleChange} onKeyDown={this.handleKeys} value={this.state.value} style={input_style} ref={i => this.input = i} />\n          <InputDisplay>\n            {this.props.children}[]\n          </InputDisplay>\n        </InputWrapper>\n    );\n  }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/Prompt.tsx","import * as React from 'react';\n\nimport {Prompt} from './Prompt';\nimport {ParsedText, OutputText} from './Text';\n\nimport {Item} from \"../typescript/datatypes\";\nimport * as Items from \"../typescript/items\";\n\nimport * as World from \"../typescript/world\";\nimport {BirdWorld} from '../typescript/bird_world';\n\nimport {WorldDriver, MatchValidity} from \"../typescript/commands\";\n\nconst Carat = () => (\n  <span>\n    >\n  </span>\n);\n\nexport class Terminal extends React.Component<any, {world_driver: WorldDriver<BirdWorld>}> {\n  contentContainer: any;\n  prompt: any;\n\n  constructor(props) {\n    super(props);\n    this.state = {world_driver: this.props.world_driver};\n  }\n\n  componentDidMount() {\n    this.focusPrompt();\n  }\n\n  componentDidUpdate() {\n    this.focusPrompt();\n    this.scrollToPrompt();\n  }\n\n  handleSubmit = () => {\n    if (this.isCurrentlyValid()) {\n      const output = this.state.world_driver.commit();\n      this.setState({world_driver: this.state.world_driver});\n      return true;\n    }\n    return false;\n  }\n\n  isCurrentlyValid = () => {\n    return this.state.world_driver.current_state.parser.validity === MatchValidity.valid;\n  }\n\n  handlePromptChange = (input) => {\n    console.log(input);\n    let result = this.state.world_driver.apply_command(input, false);\n    this.setState({world_driver: this.state.world_driver});\n  }\n\n  currentTypeahead = () => {\n    let current_state = this.state.world_driver.current_state\n    return current_state.parser.match[current_state.parser.match.length - 1].typeahead;\n  }\n\n  focusPrompt = () => {\n    this.prompt.focus();\n  }\n\n  scrollToPrompt = () => {\n    this.contentContainer.scrollTop = this.contentContainer.scrollHeight;\n  }\n\n  render() {\n    const container_style: any = {\n      height: '100%',\n      width: '100%',\n      overflowY: 'scroll',\n      whiteSpace: 'pre-wrap',\n      fontFamily: \"'Fira Mono'\",\n      fontSize: '1.5em',\n      color: 'ivory',\n      background: 'black',\n      radius: 3,\n      position: 'absolute',\n      display: 'block',\n      padding: '1em'\n    };\n    return (\n      <div style={container_style} onClick={this.focusPrompt} ref={cc => this.contentContainer = cc}>\n        {this.state.world_driver.history.map(({parser, message}, i) => {\n          if (i === 0) {\n            return (\n              <div key={i.toString()}>\n                <p>\n                  <OutputText message={message} />\n                </p>\n              </div>\n            );\n          }\n          return (\n            <div key={i.toString()}>\n              <p>\n                <Carat />\n                <ParsedText parser={parser} />\n              </p>\n              <p>\n                <OutputText message={message} />\n              </p>\n            </div>\n          )\n        })}\n\n        <p>\n          <Prompt onSubmit={this.handleSubmit} onChange={this.handlePromptChange} ref={p => this.prompt = p}>\n            <Carat />\n            <ParsedText parser={this.state.world_driver.current_state.parser} />\n          </Prompt>\n        </p>\n        {/* typeahead options go here */\n          this.currentTypeahead().map((option, i) => {\n            \n          })\n        }\n      </div>\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/Terminal.tsx","import * as React from 'react';\n\nimport {DisplayEltType, MatchValidity} from '../typescript/commands';\n\nfunction get_display_color(det: DisplayEltType) {\n  switch (det) {\n    case DisplayEltType.keyword:\n      return 'blue';\n    case DisplayEltType.option:\n      return 'orange';\n    case DisplayEltType.filler:\n      return 'ivory';\n    case DisplayEltType.partial:\n      return 'gray';\n    case DisplayEltType.error:\n      return 'red';\n  }\n}\n\nexport const ParsedText = (props) => {\n  const {parser, ...rest} = props;\n  let style: any = {\n    display: 'inline-block',\n    whiteSpace: 'pre-wrap'\n  }\n  let validity = parser.validity;\n  if (validity === MatchValidity.valid) {\n    style.fontWeight = '900';\n  } else {\n    style.fontWeight = '300';\n    if (validity === MatchValidity.invalid) {\n      style.fontStyle = 'italic'\n    }\n  }\n\n  return (\n    <div style={{...style}} {...rest}>\n      {(parser === undefined) ? '' : \n        parser.match.map((elt, i) => (\n          <span key={i.toString()} style={{color: get_display_color(elt.display)}}>\n            {elt.match}\n          </span>\n        ))\n      }\n      {parser.token_gaps[parser.token_gaps.length - 1]}\n    </div>\n  );\n}\n\nexport const OutputText = (props) => {\n  const {message, style, ...rest} = props;\n  const base_style = {\n    display: 'inline-block',\n    whiteSpace: 'pre-wrap'\n  }\n\n  return (\n    <div style={{...base_style, ...style}} {...rest}>\n      {message !== undefined ? message : ''}\n    </div>\n  );\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/Text.tsx","import {\n    Token,\n    CommandResult,\n    CommandParser,\n    Command,\n    WorldType,\n    call_with_early_stopping\n} from './commands'\n\nimport {capitalize, tokenize, untokenize, random_choice} from './text_tools';\n\n\nexport class BirdWorld implements WorldType{\n    readonly is_in_heaven: boolean;\n\n    constructor(is_in_heaven: boolean = false) {\n        this.is_in_heaven = is_in_heaven;\n\n    }\n\n    update(is_in_heaven: boolean = false) {\n        return new BirdWorld(is_in_heaven);\n    }\n\n    get_commands(): Command<this>[]{\n        let commands: Command<BirdWorld>[] = [];\n        commands.push(go_cmd);\n        if (this.is_in_heaven) {\n            commands.push(mispronounce_cmd);\n        }\n        return <Command<this>[]>commands;\n    }\n\n    interstitial_update() {\n        return {message: (this.is_in_heaven)\n            ? \"You're in Heaven. There's a bird up here. His name is Zarathustra. He is ugly.\"\n            : \"You're standing around on the earth.\"\n        };\n    }\n}\n\nconst go_cmd: Command<BirdWorld> = {\n    command_name: ['go'],\n    execute: call_with_early_stopping(\n        function*(world: BirdWorld, parser: CommandParser){\n            let dir_options: Token[][] = [];\n            if (world.is_in_heaven) {\n                dir_options.push(['down']);\n            } else {\n                dir_options.push(['up']);\n            }\n            \n            let dir_word = yield parser.consume_option(dir_options);\n            yield parser.done();\n\n            let new_world = world.update(!world.is_in_heaven);\n            let message = capitalize(dir_word) + ' you go.';\n\n            return {world: new_world, message: message};\n        }\n    )\n}\n\nconst mispronounce_cmd: Command<BirdWorld> = {\n    command_name: ['mispronounce'],\n    execute: call_with_early_stopping(\n        function*(world: BirdWorld, parser: CommandParser) {\n            let specifier_word = yield parser.consume_option([[\"zarathustra's\"]]);\n            \n            yield parser.consume_exact(['name']);\n\n            let utterance_options = [\n                'Zammersretter',\n                'Hoosterzaro',\n                'Rooster Thooster',\n                'Thester Zar',\n                'Zerthes Threstine'\n            ]\n\n            let message = `\"${random_choice(utterance_options)},\" you say.`;\n\n            return {world, message};\n        }\n    )\n}\n\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/typescript/bird_world.ts","import * as React from \"react\";\nimport * as ReactDom from \"react-dom\";\n\nimport {Game} from \"../components/Game\";\n\nReactDom.render(<Game />, document.getElementById('game'));\n\n// import {List, Map} from 'immutable';\n// import {CityKey, Codex, Pinecone} from './items';\n// import {Item} from './datatypes';\n// import {Box, SingleBoxWorld} from './world';\n// import {MatchValidity, DisplayElt, DisplayEltType, WorldDriver, CommandParser, CommandResult} from './commands';\n// import {last, tokenize} from './text_tools';\n\n\n// declare var jQuery: any;\n\n// // previous command handler func (first arg to .terminal() )\n// // function(command: string) {\n// //         if (command !== '') {\n// //             try {\n// //                 //hold on to parser object\n// //                 //highlight matched bits of command\n// //                 //offer autocomplete solutions\n// //                 let result = world_driver.run(command);\n// //                 if (result !== undefined) {\n// //                     this.echo(new String(result));\n// //                 }\n// //             } catch(e) {\n// //                 this.error(new String(e));\n// //             }\n// //         } else {\n// //            this.echo('');\n// //         }\n// //     }\n\n// export let elt_color = Map<DisplayEltType, string>().asMutable();\n// elt_color.set(DisplayEltType.keyword, 'white');\n// elt_color.set(DisplayEltType.option, 'blue');\n// elt_color.set(DisplayEltType.filler, 'gray');\n// elt_color.set(DisplayEltType.partial, 'gray');\n// elt_color.set(DisplayEltType.error, 'red');\n\n// setTimeout(function () {\n//     jQuery(function($: any) {\n//         let contents = List<Item>([new Codex(), new Pinecone(), new CityKey()]);\n//         let world = new SingleBoxWorld({box: new Box({contents: contents})});\n//         let world_driver = new WorldDriver(world);\n//         let current_result = world_driver.current_state;\n//         var ul: any;\n//         function format_command(command: string) {\n//             // TODO: don't apply to non-command strings\n//             if ($.terminal.have_formatting(command)){\n//                 return command;\n//             }\n//             command = command.replace(/(\\s|&nbsp;)/g, ' ');\n//             let result = world_driver.run(command, false);\n//             let pos = 0;\n//             let parser = result.parser;\n//             let valid_fmt = '';\n//             if (parser.validity === MatchValidity.valid){\n//                 valid_fmt = 'b';\n//             }\n\n//             let formatted = '';\n//             for (let elt of parser.match) {\n//                 if (elt.match.length > 0){\n//                     formatted += `[[${valid_fmt};${elt_color.get(elt.display)};]${elt.match}]`;\n//                     pos += elt.match.length;\n//                 }\n//                 while (true){\n//                     //eat the spaces\n//                     let c = command.charAt(pos);\n//                     if (c.match(' ') !== null){\n//                         formatted += c;\n//                         pos += 1;\n//                     } else {\n//                         break;\n//                     }\n//                 }\n//             }\n//             return formatted;\n//         }\n//         // $.terminal.defaults.formatters.push(format_command)\n\n//         function format_command_with_prompt(command:string){\n//             let naked_command = command.slice(2);\n//             return '> ' + format_command(naked_command);\n//         }\n\n//         function update_typeahead(terminal: any) {\n//             // TODO: distinguish enabled & disabled typeahead\n//             let command = terminal.get_command();\n//             ul.empty();\n//             let result = world_driver.run(command, false);\n//             let parser = result.parser;\n\n//             if (parser.validity === MatchValidity.partial){\n//                 let m = last(parser.match);\n//                 ul.hide();\n//                 let com_end = last(command);\n\n//                 if (m.match.length === 0 && com_end !== undefined && com_end.match(/(\\s|&nbsp;)/) === null){\n//                     return;\n//                 }\n//                 for (let t of m.typeahead){\n//                     $('<li>' + t + '</li>').appendTo(ul);\n//                 }\n//                 ul.show();\n//             }\n//         }\n\n//         function exec_command(command: string, terminal: any) {\n//             let result = world_driver.run(command, true);\n//             let parser = result.parser;\n            \n//             $.terminal.defaults.formatters.pop()\n//             $.terminal.defaults.formatters.push(format_command_with_prompt);\n//             terminal.echo('> ' + command);\n//             $.terminal.defaults.formatters.pop();\n\n//             if (result.message !== undefined){\n//                 terminal.echo(result.message);\n//                 terminal.echo(' ');\n//             }\n//             $.terminal.defaults.formatters.push(format_command);\n//         }\n\n//         function handle_keydown(e: any, terminal: any) {\n//             setTimeout(function () {\n//                 let command = terminal.get_command();\n                \n//             })\n//         }\n\n//         $('#term').terminal(exec_command, {\n//             greetings: '[[;white;]Demo Parser Interface for The Wreck]',\n//             name: 'wreck_demo',\n//             height: 500,\n//             //prompt: '> ',\n//             onInit: function(term: any) {\n//                 var wrapper = term.cmd().find('.cursor').wrap('<span/>').parent()\n//                     .addClass('cmd-wrapper');\n//                 ul = $('<ul></ul>').appendTo(wrapper);\n//                 ul.on('click', 'li', function() {\n//                     let txt = $(this).text();\n//                     let cur_word = term.before_cursor(true);\n//                     term.insert(txt.replace(cur_word, '') + ' ');\n//                     ul.empty();\n//                     setTimeout(function () {update_typeahead(term);}, 0);\n//                 });\n//                 setTimeout(function () {update_typeahead(term);}, 0);\n//             },\n//             keydown: function(e: any, terminal: any) {\n//                 // setTimeout because terminal is adding characters in keypress\n//                 // we use keydown because we need to prevent default action for\n//                 // tab and still execute custom code\n//                 setTimeout(function() {\n//                     update_typeahead(terminal);\n//                 }, 0);\n//             },\n//             onBlur: function() {\n//                 return false;\n//             },\n//             memory: true,\n//             echoCommand: false,\n//             wordAutocomplete: true\n//         });\n//     });\n// }, 0);\n\n\n// WEBPACK FOOTER //\n// ./src/typescript/main.tsx"],"sourceRoot":""}