{"version":3,"sources":["../../node_modules/browser-pack/_prelude.js","../../node_modules/immutable/dist/immutable.js","box_geometry.ts","commands.ts","datatypes.ts","items.ts","jquery.terminal.d.ts","main.ts","text_tools.ts","world.ts","world_update_effects.ts"],"names":[],"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n *  Copyright (c) 2014-2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(factory((global.Immutable = global.Immutable || {})));\n}(this, (function (exports) { 'use strict';\n\n// Used for setting prototype methods that IE8 chokes on.\nvar DELETE = 'delete';\n\n// Constants describing the size of trie nodes.\nvar SHIFT = 5; // Resulted in best performance after ______?\nvar SIZE = 1 << SHIFT;\nvar MASK = SIZE - 1;\n\n// A consistent shared value representing \"not set\" which equals nothing other\n// than itself, and nothing that could be provided externally.\nvar NOT_SET = {};\n\n// Boolean references, Rough equivalent of `bool &`.\nvar CHANGE_LENGTH = { value: false };\nvar DID_ALTER = { value: false };\n\nfunction MakeRef(ref) {\n  ref.value = false;\n  return ref;\n}\n\nfunction SetRef(ref) {\n  ref && (ref.value = true);\n}\n\n// A function which returns a value representing an \"owner\" for transient writes\n// to tries. The return value will only ever equal itself, and will not equal\n// the return of any subsequent call of this function.\nfunction OwnerID() {}\n\n// http://jsperf.com/copy-array-inline\nfunction arrCopy(arr, offset) {\n  offset = offset || 0;\n  var len = Math.max(0, arr.length - offset);\n  var newArr = new Array(len);\n  for (var ii = 0; ii < len; ii++) {\n    newArr[ii] = arr[ii + offset];\n  }\n  return newArr;\n}\n\nfunction ensureSize(iter) {\n  if (iter.size === undefined) {\n    iter.size = iter.__iterate(returnTrue);\n  }\n  return iter.size;\n}\n\nfunction wrapIndex(iter, index) {\n  // This implements \"is array index\" which the ECMAString spec defines as:\n  //\n  //     A String property name P is an array index if and only if\n  //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n  //     to 2^32−1.\n  //\n  // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n  if (typeof index !== 'number') {\n    var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n    if ('' + uint32Index !== index || uint32Index === 4294967295) {\n      return NaN;\n    }\n    index = uint32Index;\n  }\n  return index < 0 ? ensureSize(iter) + index : index;\n}\n\nfunction returnTrue() {\n  return true;\n}\n\nfunction wholeSlice(begin, end, size) {\n  return (begin === 0 || (size !== undefined && begin <= -size)) &&\n    (end === undefined || (size !== undefined && end >= size));\n}\n\nfunction resolveBegin(begin, size) {\n  return resolveIndex(begin, size, 0);\n}\n\nfunction resolveEnd(end, size) {\n  return resolveIndex(end, size, size);\n}\n\nfunction resolveIndex(index, size, defaultIndex) {\n  // Sanitize indices using this shorthand for ToInt32(argument)\n  // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n  return index === undefined\n    ? defaultIndex\n    : index < 0\n        ? size === Infinity ? size : Math.max(0, size + index) | 0\n        : size === undefined || size === index\n            ? index\n            : Math.min(size, index) | 0;\n}\n\nfunction isImmutable(maybeImmutable) {\n  return (isCollection(maybeImmutable) || isRecord(maybeImmutable)) &&\n    !maybeImmutable.__ownerID;\n}\n\nfunction isCollection(maybeCollection) {\n  return !!(maybeCollection && maybeCollection[IS_ITERABLE_SENTINEL]);\n}\n\nfunction isKeyed(maybeKeyed) {\n  return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);\n}\n\nfunction isIndexed(maybeIndexed) {\n  return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);\n}\n\nfunction isAssociative(maybeAssociative) {\n  return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n}\n\nfunction isOrdered(maybeOrdered) {\n  return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);\n}\n\nfunction isRecord(maybeRecord) {\n  return !!(maybeRecord && maybeRecord[IS_RECORD_SENTINEL]);\n}\n\nfunction isValueObject(maybeValue) {\n  return !!(maybeValue &&\n    typeof maybeValue.equals === 'function' &&\n    typeof maybeValue.hashCode === 'function');\n}\n\nvar IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\nvar IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\nvar IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\nvar IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\nvar IS_RECORD_SENTINEL = '@@__IMMUTABLE_RECORD__@@';\n\nvar Collection = function Collection(value) {\n  return isCollection(value) ? value : Seq(value);\n};\n\nvar KeyedCollection = (function (Collection) {\n  function KeyedCollection(value) {\n    return isKeyed(value) ? value : KeyedSeq(value);\n  }\n\n  if ( Collection ) KeyedCollection.__proto__ = Collection;\n  KeyedCollection.prototype = Object.create( Collection && Collection.prototype );\n  KeyedCollection.prototype.constructor = KeyedCollection;\n\n  return KeyedCollection;\n}(Collection));\n\nvar IndexedCollection = (function (Collection) {\n  function IndexedCollection(value) {\n    return isIndexed(value) ? value : IndexedSeq(value);\n  }\n\n  if ( Collection ) IndexedCollection.__proto__ = Collection;\n  IndexedCollection.prototype = Object.create( Collection && Collection.prototype );\n  IndexedCollection.prototype.constructor = IndexedCollection;\n\n  return IndexedCollection;\n}(Collection));\n\nvar SetCollection = (function (Collection) {\n  function SetCollection(value) {\n    return isCollection(value) && !isAssociative(value) ? value : SetSeq(value);\n  }\n\n  if ( Collection ) SetCollection.__proto__ = Collection;\n  SetCollection.prototype = Object.create( Collection && Collection.prototype );\n  SetCollection.prototype.constructor = SetCollection;\n\n  return SetCollection;\n}(Collection));\n\nCollection.Keyed = KeyedCollection;\nCollection.Indexed = IndexedCollection;\nCollection.Set = SetCollection;\n\nvar ITERATE_KEYS = 0;\nvar ITERATE_VALUES = 1;\nvar ITERATE_ENTRIES = 2;\n\nvar REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\n\nvar ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n\nvar Iterator = function Iterator(next) {\n  this.next = next;\n};\n\nIterator.prototype.toString = function toString () {\n  return '[Iterator]';\n};\n\nIterator.KEYS = ITERATE_KEYS;\nIterator.VALUES = ITERATE_VALUES;\nIterator.ENTRIES = ITERATE_ENTRIES;\n\nIterator.prototype.inspect = (Iterator.prototype.toSource = function() {\n  return this.toString();\n});\nIterator.prototype[ITERATOR_SYMBOL] = function() {\n  return this;\n};\n\nfunction iteratorValue(type, k, v, iteratorResult) {\n  var value = type === 0 ? k : type === 1 ? v : [k, v];\n  iteratorResult\n    ? (iteratorResult.value = value)\n    : (iteratorResult = {\n        value: value,\n        done: false\n      });\n  return iteratorResult;\n}\n\nfunction iteratorDone() {\n  return { value: undefined, done: true };\n}\n\nfunction hasIterator(maybeIterable) {\n  return !!getIteratorFn(maybeIterable);\n}\n\nfunction isIterator(maybeIterator) {\n  return maybeIterator && typeof maybeIterator.next === 'function';\n}\n\nfunction getIterator(iterable) {\n  var iteratorFn = getIteratorFn(iterable);\n  return iteratorFn && iteratorFn.call(iterable);\n}\n\nfunction getIteratorFn(iterable) {\n  var iteratorFn = iterable &&\n    ((REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||\n      iterable[FAUX_ITERATOR_SYMBOL]);\n  if (typeof iteratorFn === 'function') {\n    return iteratorFn;\n  }\n}\n\nfunction isArrayLike(value) {\n  return value && typeof value.length === 'number';\n}\n\nvar Seq = (function (Collection$$1) {\n  function Seq(value) {\n    return value === null || value === undefined\n      ? emptySequence()\n      : isCollection(value) || isRecord(value)\n          ? value.toSeq()\n          : seqFromValue(value);\n  }\n\n  if ( Collection$$1 ) Seq.__proto__ = Collection$$1;\n  Seq.prototype = Object.create( Collection$$1 && Collection$$1.prototype );\n  Seq.prototype.constructor = Seq;\n\n  Seq.of = function of (/*...values*/) {\n    return Seq(arguments);\n  };\n\n  Seq.prototype.toSeq = function toSeq () {\n    return this;\n  };\n\n  Seq.prototype.toString = function toString () {\n    return this.__toString('Seq {', '}');\n  };\n\n  Seq.prototype.cacheResult = function cacheResult () {\n    if (!this._cache && this.__iterateUncached) {\n      this._cache = this.entrySeq().toArray();\n      this.size = this._cache.length;\n    }\n    return this;\n  };\n\n  // abstract __iterateUncached(fn, reverse)\n\n  Seq.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    var cache = this._cache;\n    if (cache) {\n      var size = cache.length;\n      var i = 0;\n      while (i !== size) {\n        var entry = cache[reverse ? size - ++i : i++];\n        if (fn(entry[1], entry[0], this$1) === false) {\n          break;\n        }\n      }\n      return i;\n    }\n    return this.__iterateUncached(fn, reverse);\n  };\n\n  // abstract __iteratorUncached(type, reverse)\n\n  Seq.prototype.__iterator = function __iterator (type, reverse) {\n    var cache = this._cache;\n    if (cache) {\n      var size = cache.length;\n      var i = 0;\n      return new Iterator(function () {\n        if (i === size) {\n          return iteratorDone();\n        }\n        var entry = cache[reverse ? size - ++i : i++];\n        return iteratorValue(type, entry[0], entry[1]);\n      });\n    }\n    return this.__iteratorUncached(type, reverse);\n  };\n\n  return Seq;\n}(Collection));\n\nvar KeyedSeq = (function (Seq) {\n  function KeyedSeq(value) {\n    return value === null || value === undefined\n      ? emptySequence().toKeyedSeq()\n      : isCollection(value)\n          ? isKeyed(value) ? value.toSeq() : value.fromEntrySeq()\n          : isRecord(value) ? value.toSeq() : keyedSeqFromValue(value);\n  }\n\n  if ( Seq ) KeyedSeq.__proto__ = Seq;\n  KeyedSeq.prototype = Object.create( Seq && Seq.prototype );\n  KeyedSeq.prototype.constructor = KeyedSeq;\n\n  KeyedSeq.prototype.toKeyedSeq = function toKeyedSeq () {\n    return this;\n  };\n\n  return KeyedSeq;\n}(Seq));\n\nvar IndexedSeq = (function (Seq) {\n  function IndexedSeq(value) {\n    return value === null || value === undefined\n      ? emptySequence()\n      : isCollection(value)\n          ? isKeyed(value) ? value.entrySeq() : value.toIndexedSeq()\n          : isRecord(value)\n              ? value.toSeq().entrySeq()\n              : indexedSeqFromValue(value);\n  }\n\n  if ( Seq ) IndexedSeq.__proto__ = Seq;\n  IndexedSeq.prototype = Object.create( Seq && Seq.prototype );\n  IndexedSeq.prototype.constructor = IndexedSeq;\n\n  IndexedSeq.of = function of (/*...values*/) {\n    return IndexedSeq(arguments);\n  };\n\n  IndexedSeq.prototype.toIndexedSeq = function toIndexedSeq () {\n    return this;\n  };\n\n  IndexedSeq.prototype.toString = function toString () {\n    return this.__toString('Seq [', ']');\n  };\n\n  return IndexedSeq;\n}(Seq));\n\nvar SetSeq = (function (Seq) {\n  function SetSeq(value) {\n    return (isCollection(value) && !isAssociative(value)\n      ? value\n      : IndexedSeq(value)).toSetSeq();\n  }\n\n  if ( Seq ) SetSeq.__proto__ = Seq;\n  SetSeq.prototype = Object.create( Seq && Seq.prototype );\n  SetSeq.prototype.constructor = SetSeq;\n\n  SetSeq.of = function of (/*...values*/) {\n    return SetSeq(arguments);\n  };\n\n  SetSeq.prototype.toSetSeq = function toSetSeq () {\n    return this;\n  };\n\n  return SetSeq;\n}(Seq));\n\nSeq.isSeq = isSeq;\nSeq.Keyed = KeyedSeq;\nSeq.Set = SetSeq;\nSeq.Indexed = IndexedSeq;\n\nvar IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\n\nSeq.prototype[IS_SEQ_SENTINEL] = true;\n\n// #pragma Root Sequences\n\nvar ArraySeq = (function (IndexedSeq) {\n  function ArraySeq(array) {\n    this._array = array;\n    this.size = array.length;\n  }\n\n  if ( IndexedSeq ) ArraySeq.__proto__ = IndexedSeq;\n  ArraySeq.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n  ArraySeq.prototype.constructor = ArraySeq;\n\n  ArraySeq.prototype.get = function get (index, notSetValue) {\n    return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n  };\n\n  ArraySeq.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    var array = this._array;\n    var size = array.length;\n    var i = 0;\n    while (i !== size) {\n      var ii = reverse ? size - ++i : i++;\n      if (fn(array[ii], ii, this$1) === false) {\n        break;\n      }\n    }\n    return i;\n  };\n\n  ArraySeq.prototype.__iterator = function __iterator (type, reverse) {\n    var array = this._array;\n    var size = array.length;\n    var i = 0;\n    return new Iterator(function () {\n      if (i === size) {\n        return iteratorDone();\n      }\n      var ii = reverse ? size - ++i : i++;\n      return iteratorValue(type, ii, array[ii]);\n    });\n  };\n\n  return ArraySeq;\n}(IndexedSeq));\n\nvar ObjectSeq = (function (KeyedSeq) {\n  function ObjectSeq(object) {\n    var keys = Object.keys(object);\n    this._object = object;\n    this._keys = keys;\n    this.size = keys.length;\n  }\n\n  if ( KeyedSeq ) ObjectSeq.__proto__ = KeyedSeq;\n  ObjectSeq.prototype = Object.create( KeyedSeq && KeyedSeq.prototype );\n  ObjectSeq.prototype.constructor = ObjectSeq;\n\n  ObjectSeq.prototype.get = function get (key, notSetValue) {\n    if (notSetValue !== undefined && !this.has(key)) {\n      return notSetValue;\n    }\n    return this._object[key];\n  };\n\n  ObjectSeq.prototype.has = function has (key) {\n    return this._object.hasOwnProperty(key);\n  };\n\n  ObjectSeq.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    var object = this._object;\n    var keys = this._keys;\n    var size = keys.length;\n    var i = 0;\n    while (i !== size) {\n      var key = keys[reverse ? size - ++i : i++];\n      if (fn(object[key], key, this$1) === false) {\n        break;\n      }\n    }\n    return i;\n  };\n\n  ObjectSeq.prototype.__iterator = function __iterator (type, reverse) {\n    var object = this._object;\n    var keys = this._keys;\n    var size = keys.length;\n    var i = 0;\n    return new Iterator(function () {\n      if (i === size) {\n        return iteratorDone();\n      }\n      var key = keys[reverse ? size - ++i : i++];\n      return iteratorValue(type, key, object[key]);\n    });\n  };\n\n  return ObjectSeq;\n}(KeyedSeq));\nObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;\n\nvar CollectionSeq = (function (IndexedSeq) {\n  function CollectionSeq(collection) {\n    this._collection = collection;\n    this.size = collection.length || collection.size;\n  }\n\n  if ( IndexedSeq ) CollectionSeq.__proto__ = IndexedSeq;\n  CollectionSeq.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n  CollectionSeq.prototype.constructor = CollectionSeq;\n\n  CollectionSeq.prototype.__iterateUncached = function __iterateUncached (fn, reverse) {\n    var this$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var collection = this._collection;\n    var iterator = getIterator(collection);\n    var iterations = 0;\n    if (isIterator(iterator)) {\n      var step;\n      while (!(step = iterator.next()).done) {\n        if (fn(step.value, iterations++, this$1) === false) {\n          break;\n        }\n      }\n    }\n    return iterations;\n  };\n\n  CollectionSeq.prototype.__iteratorUncached = function __iteratorUncached (type, reverse) {\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var collection = this._collection;\n    var iterator = getIterator(collection);\n    if (!isIterator(iterator)) {\n      return new Iterator(iteratorDone);\n    }\n    var iterations = 0;\n    return new Iterator(function () {\n      var step = iterator.next();\n      return step.done ? step : iteratorValue(type, iterations++, step.value);\n    });\n  };\n\n  return CollectionSeq;\n}(IndexedSeq));\n\nvar IteratorSeq = (function (IndexedSeq) {\n  function IteratorSeq(iterator) {\n    this._iterator = iterator;\n    this._iteratorCache = [];\n  }\n\n  if ( IndexedSeq ) IteratorSeq.__proto__ = IndexedSeq;\n  IteratorSeq.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n  IteratorSeq.prototype.constructor = IteratorSeq;\n\n  IteratorSeq.prototype.__iterateUncached = function __iterateUncached (fn, reverse) {\n    var this$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var iterator = this._iterator;\n    var cache = this._iteratorCache;\n    var iterations = 0;\n    while (iterations < cache.length) {\n      if (fn(cache[iterations], iterations++, this$1) === false) {\n        return iterations;\n      }\n    }\n    var step;\n    while (!(step = iterator.next()).done) {\n      var val = step.value;\n      cache[iterations] = val;\n      if (fn(val, iterations++, this$1) === false) {\n        break;\n      }\n    }\n    return iterations;\n  };\n\n  IteratorSeq.prototype.__iteratorUncached = function __iteratorUncached (type, reverse) {\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var iterator = this._iterator;\n    var cache = this._iteratorCache;\n    var iterations = 0;\n    return new Iterator(function () {\n      if (iterations >= cache.length) {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        cache[iterations] = step.value;\n      }\n      return iteratorValue(type, iterations, cache[iterations++]);\n    });\n  };\n\n  return IteratorSeq;\n}(IndexedSeq));\n\n// # pragma Helper functions\n\nfunction isSeq(maybeSeq) {\n  return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);\n}\n\nvar EMPTY_SEQ;\n\nfunction emptySequence() {\n  return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n}\n\nfunction keyedSeqFromValue(value) {\n  var seq = Array.isArray(value)\n    ? new ArraySeq(value)\n    : isIterator(value)\n        ? new IteratorSeq(value)\n        : hasIterator(value) ? new CollectionSeq(value) : undefined;\n  if (seq) {\n    return seq.fromEntrySeq();\n  }\n  if (typeof value === 'object') {\n    return new ObjectSeq(value);\n  }\n  throw new TypeError(\n    'Expected Array or collection object of [k, v] entries, or keyed object: ' +\n      value\n  );\n}\n\nfunction indexedSeqFromValue(value) {\n  var seq = maybeIndexedSeqFromValue(value);\n  if (seq) {\n    return seq;\n  }\n  throw new TypeError(\n    'Expected Array or collection object of values: ' + value\n  );\n}\n\nfunction seqFromValue(value) {\n  var seq = maybeIndexedSeqFromValue(value);\n  if (seq) {\n    return seq;\n  }\n  if (typeof value === 'object') {\n    return new ObjectSeq(value);\n  }\n  throw new TypeError(\n    'Expected Array or collection object of values, or keyed object: ' + value\n  );\n}\n\nfunction maybeIndexedSeqFromValue(value) {\n  return isArrayLike(value)\n    ? new ArraySeq(value)\n    : isIterator(value)\n        ? new IteratorSeq(value)\n        : hasIterator(value) ? new CollectionSeq(value) : undefined;\n}\n\n/**\n * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n *\n * NaN is considered the same as NaN, however -0 and 0 are considered the same\n * value, which is different from the algorithm described by\n * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n *\n * This is extended further to allow Objects to describe the values they\n * represent, by way of `valueOf` or `equals` (and `hashCode`).\n *\n * Note: because of this extension, the key equality of Immutable.Map and the\n * value equality of Immutable.Set will differ from ES6 Map and Set.\n *\n * ### Defining custom values\n *\n * The easiest way to describe the value an object represents is by implementing\n * `valueOf`. For example, `Date` represents a value by returning a unix\n * timestamp for `valueOf`:\n *\n *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n *     var date2 = new Date(1234567890000);\n *     date1.valueOf(); // 1234567890000\n *     assert( date1 !== date2 );\n *     assert( Immutable.is( date1, date2 ) );\n *\n * Note: overriding `valueOf` may have other implications if you use this object\n * where JavaScript expects a primitive, such as implicit string coercion.\n *\n * For more complex types, especially collections, implementing `valueOf` may\n * not be performant. An alternative is to implement `equals` and `hashCode`.\n *\n * `equals` takes another object, presumably of similar type, and returns true\n * if it is equal. Equality is symmetrical, so the same result should be\n * returned if this and the argument are flipped.\n *\n *     assert( a.equals(b) === b.equals(a) );\n *\n * `hashCode` returns a 32bit integer number representing the object which will\n * be used to determine how to store the value object in a Map or Set. You must\n * provide both or neither methods, one must not exist without the other.\n *\n * Also, an important relationship between these methods must be upheld: if two\n * values are equal, they *must* return the same hashCode. If the values are not\n * equal, they might have the same hashCode; this is called a hash collision,\n * and while undesirable for performance reasons, it is acceptable.\n *\n *     if (a.equals(b)) {\n *       assert( a.hashCode() === b.hashCode() );\n *     }\n *\n * All Immutable collections are Value Objects: they implement `equals()`\n * and `hashCode()`.\n */\nfunction is(valueA, valueB) {\n  if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n    return true;\n  }\n  if (!valueA || !valueB) {\n    return false;\n  }\n  if (\n    typeof valueA.valueOf === 'function' && typeof valueB.valueOf === 'function'\n  ) {\n    valueA = valueA.valueOf();\n    valueB = valueB.valueOf();\n    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n      return true;\n    }\n    if (!valueA || !valueB) {\n      return false;\n    }\n  }\n  return !!(isValueObject(valueA) &&\n    isValueObject(valueB) &&\n    valueA.equals(valueB));\n}\n\nfunction fromJS(value, converter) {\n  return fromJSWith(\n    [],\n    converter || defaultConverter,\n    value,\n    '',\n    converter && converter.length > 2 ? [] : undefined,\n    { '': value }\n  );\n}\n\nfunction fromJSWith(stack, converter, value, key, keyPath, parentValue) {\n  var toSeq = Array.isArray(value)\n    ? IndexedSeq\n    : isPlainObj(value) ? KeyedSeq : null;\n  if (toSeq) {\n    if (~stack.indexOf(value)) {\n      throw new TypeError('Cannot convert circular structure to Immutable');\n    }\n    stack.push(value);\n    keyPath && key !== '' && keyPath.push(key);\n    var converted = converter.call(\n      parentValue,\n      key,\n      toSeq(value).map(function (v, k) { return fromJSWith(stack, converter, v, k, keyPath, value); }),\n      keyPath && keyPath.slice()\n    );\n    stack.pop();\n    keyPath && keyPath.pop();\n    return converted;\n  }\n  return value;\n}\n\nfunction defaultConverter(k, v) {\n  return isKeyed(v) ? v.toMap() : v.toList();\n}\n\nfunction isPlainObj(value) {\n  return value &&\n    (value.constructor === Object || value.constructor === undefined);\n}\n\nvar imul = typeof Math.imul === 'function' &&\n  Math.imul(0xffffffff, 2) === -2\n  ? Math.imul\n  : function imul(a, b) {\n      a |= 0; // int\n      b |= 0; // int\n      var c = a & 0xffff;\n      var d = b & 0xffff;\n      // Shift by 0 fixes the sign on the high part.\n      return c * d + ((a >>> 16) * d + c * (b >>> 16) << 16 >>> 0) | 0; // int\n    };\n\n// v8 has an optimization for storing 31-bit signed numbers.\n// Values which have either 00 or 11 as the high order bits qualify.\n// This function drops the highest order bit in a signed number, maintaining\n// the sign bit.\nfunction smi(i32) {\n  return i32 >>> 1 & 0x40000000 | i32 & 0xbfffffff;\n}\n\nfunction hash(o) {\n  if (o === false || o === null || o === undefined) {\n    return 0;\n  }\n  if (typeof o.valueOf === 'function') {\n    o = o.valueOf();\n    if (o === false || o === null || o === undefined) {\n      return 0;\n    }\n  }\n  if (o === true) {\n    return 1;\n  }\n  var type = typeof o;\n  if (type === 'number') {\n    if (o !== o || o === Infinity) {\n      return 0;\n    }\n    var h = o | 0;\n    if (h !== o) {\n      h ^= o * 0xffffffff;\n    }\n    while (o > 0xffffffff) {\n      o /= 0xffffffff;\n      h ^= o;\n    }\n    return smi(h);\n  }\n  if (type === 'string') {\n    return o.length > STRING_HASH_CACHE_MIN_STRLEN\n      ? cachedHashString(o)\n      : hashString(o);\n  }\n  if (typeof o.hashCode === 'function') {\n    return o.hashCode();\n  }\n  if (type === 'object') {\n    return hashJSObj(o);\n  }\n  if (typeof o.toString === 'function') {\n    return hashString(o.toString());\n  }\n  throw new Error('Value type ' + type + ' cannot be hashed.');\n}\n\nfunction cachedHashString(string) {\n  var hash = stringHashCache[string];\n  if (hash === undefined) {\n    hash = hashString(string);\n    if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n      STRING_HASH_CACHE_SIZE = 0;\n      stringHashCache = {};\n    }\n    STRING_HASH_CACHE_SIZE++;\n    stringHashCache[string] = hash;\n  }\n  return hash;\n}\n\n// http://jsperf.com/hashing-strings\nfunction hashString(string) {\n  // This is the hash from JVM\n  // The hash code for a string is computed as\n  // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n  // where s[i] is the ith character of the string and n is the length of\n  // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n  // (exclusive) by dropping high bits.\n  var hash = 0;\n  for (var ii = 0; ii < string.length; ii++) {\n    hash = 31 * hash + string.charCodeAt(ii) | 0;\n  }\n  return smi(hash);\n}\n\nfunction hashJSObj(obj) {\n  var hash;\n  if (usingWeakMap) {\n    hash = weakMap.get(obj);\n    if (hash !== undefined) {\n      return hash;\n    }\n  }\n\n  hash = obj[UID_HASH_KEY];\n  if (hash !== undefined) {\n    return hash;\n  }\n\n  if (!canDefineProperty) {\n    hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n    if (hash !== undefined) {\n      return hash;\n    }\n\n    hash = getIENodeHash(obj);\n    if (hash !== undefined) {\n      return hash;\n    }\n  }\n\n  hash = ++objHashUID;\n  if (objHashUID & 0x40000000) {\n    objHashUID = 0;\n  }\n\n  if (usingWeakMap) {\n    weakMap.set(obj, hash);\n  } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n    throw new Error('Non-extensible objects are not allowed as keys.');\n  } else if (canDefineProperty) {\n    Object.defineProperty(obj, UID_HASH_KEY, {\n      enumerable: false,\n      configurable: false,\n      writable: false,\n      value: hash\n    });\n  } else if (\n    obj.propertyIsEnumerable !== undefined &&\n    obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable\n  ) {\n    // Since we can't define a non-enumerable property on the object\n    // we'll hijack one of the less-used non-enumerable properties to\n    // save our hash on it. Since this is a function it will not show up in\n    // `JSON.stringify` which is what we want.\n    obj.propertyIsEnumerable = function() {\n      return this.constructor.prototype.propertyIsEnumerable.apply(\n        this,\n        arguments\n      );\n    };\n    obj.propertyIsEnumerable[UID_HASH_KEY] = hash;\n  } else if (obj.nodeType !== undefined) {\n    // At this point we couldn't get the IE `uniqueID` to use as a hash\n    // and we couldn't use a non-enumerable property to exploit the\n    // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n    // itself.\n    obj[UID_HASH_KEY] = hash;\n  } else {\n    throw new Error('Unable to set a non-enumerable property on object.');\n  }\n\n  return hash;\n}\n\n// Get references to ES5 object methods.\nvar isExtensible = Object.isExtensible;\n\n// True if Object.defineProperty works as expected. IE8 fails this test.\nvar canDefineProperty = (function() {\n  try {\n    Object.defineProperty({}, '@', {});\n    return true;\n  } catch (e) {\n    return false;\n  }\n})();\n\n// IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n// and avoid memory leaks from the IE cloneNode bug.\nfunction getIENodeHash(node) {\n  if (node && node.nodeType > 0) {\n    switch (node.nodeType) {\n      case 1: // Element\n        return node.uniqueID;\n      case 9: // Document\n        return node.documentElement && node.documentElement.uniqueID;\n    }\n  }\n}\n\n// If possible, use a WeakMap.\nvar usingWeakMap = typeof WeakMap === 'function';\nvar weakMap;\nif (usingWeakMap) {\n  weakMap = new WeakMap();\n}\n\nvar objHashUID = 0;\n\nvar UID_HASH_KEY = '__immutablehash__';\nif (typeof Symbol === 'function') {\n  UID_HASH_KEY = Symbol(UID_HASH_KEY);\n}\n\nvar STRING_HASH_CACHE_MIN_STRLEN = 16;\nvar STRING_HASH_CACHE_MAX_SIZE = 255;\nvar STRING_HASH_CACHE_SIZE = 0;\nvar stringHashCache = {};\n\nvar ToKeyedSequence = (function (KeyedSeq$$1) {\n  function ToKeyedSequence(indexed, useKeys) {\n    this._iter = indexed;\n    this._useKeys = useKeys;\n    this.size = indexed.size;\n  }\n\n  if ( KeyedSeq$$1 ) ToKeyedSequence.__proto__ = KeyedSeq$$1;\n  ToKeyedSequence.prototype = Object.create( KeyedSeq$$1 && KeyedSeq$$1.prototype );\n  ToKeyedSequence.prototype.constructor = ToKeyedSequence;\n\n  ToKeyedSequence.prototype.get = function get (key, notSetValue) {\n    return this._iter.get(key, notSetValue);\n  };\n\n  ToKeyedSequence.prototype.has = function has (key) {\n    return this._iter.has(key);\n  };\n\n  ToKeyedSequence.prototype.valueSeq = function valueSeq () {\n    return this._iter.valueSeq();\n  };\n\n  ToKeyedSequence.prototype.reverse = function reverse () {\n    var this$1 = this;\n\n    var reversedSequence = reverseFactory(this, true);\n    if (!this._useKeys) {\n      reversedSequence.valueSeq = function () { return this$1._iter.toSeq().reverse(); };\n    }\n    return reversedSequence;\n  };\n\n  ToKeyedSequence.prototype.map = function map (mapper, context) {\n    var this$1 = this;\n\n    var mappedSequence = mapFactory(this, mapper, context);\n    if (!this._useKeys) {\n      mappedSequence.valueSeq = function () { return this$1._iter.toSeq().map(mapper, context); };\n    }\n    return mappedSequence;\n  };\n\n  ToKeyedSequence.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    return this._iter.__iterate(function (v, k) { return fn(v, k, this$1); }, reverse);\n  };\n\n  ToKeyedSequence.prototype.__iterator = function __iterator (type, reverse) {\n    return this._iter.__iterator(type, reverse);\n  };\n\n  return ToKeyedSequence;\n}(KeyedSeq));\nToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;\n\nvar ToIndexedSequence = (function (IndexedSeq$$1) {\n  function ToIndexedSequence(iter) {\n    this._iter = iter;\n    this.size = iter.size;\n  }\n\n  if ( IndexedSeq$$1 ) ToIndexedSequence.__proto__ = IndexedSeq$$1;\n  ToIndexedSequence.prototype = Object.create( IndexedSeq$$1 && IndexedSeq$$1.prototype );\n  ToIndexedSequence.prototype.constructor = ToIndexedSequence;\n\n  ToIndexedSequence.prototype.includes = function includes (value) {\n    return this._iter.includes(value);\n  };\n\n  ToIndexedSequence.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    var i = 0;\n    reverse && ensureSize(this);\n    return this._iter.__iterate(\n      function (v) { return fn(v, reverse ? this$1.size - ++i : i++, this$1); },\n      reverse\n    );\n  };\n\n  ToIndexedSequence.prototype.__iterator = function __iterator (type, reverse) {\n    var this$1 = this;\n\n    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n    var i = 0;\n    reverse && ensureSize(this);\n    return new Iterator(function () {\n      var step = iterator.next();\n      return step.done\n        ? step\n        : iteratorValue(\n            type,\n            reverse ? this$1.size - ++i : i++,\n            step.value,\n            step\n          );\n    });\n  };\n\n  return ToIndexedSequence;\n}(IndexedSeq));\n\nvar ToSetSequence = (function (SetSeq$$1) {\n  function ToSetSequence(iter) {\n    this._iter = iter;\n    this.size = iter.size;\n  }\n\n  if ( SetSeq$$1 ) ToSetSequence.__proto__ = SetSeq$$1;\n  ToSetSequence.prototype = Object.create( SetSeq$$1 && SetSeq$$1.prototype );\n  ToSetSequence.prototype.constructor = ToSetSequence;\n\n  ToSetSequence.prototype.has = function has (key) {\n    return this._iter.includes(key);\n  };\n\n  ToSetSequence.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    return this._iter.__iterate(function (v) { return fn(v, v, this$1); }, reverse);\n  };\n\n  ToSetSequence.prototype.__iterator = function __iterator (type, reverse) {\n    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n    return new Iterator(function () {\n      var step = iterator.next();\n      return step.done\n        ? step\n        : iteratorValue(type, step.value, step.value, step);\n    });\n  };\n\n  return ToSetSequence;\n}(SetSeq));\n\nvar FromEntriesSequence = (function (KeyedSeq$$1) {\n  function FromEntriesSequence(entries) {\n    this._iter = entries;\n    this.size = entries.size;\n  }\n\n  if ( KeyedSeq$$1 ) FromEntriesSequence.__proto__ = KeyedSeq$$1;\n  FromEntriesSequence.prototype = Object.create( KeyedSeq$$1 && KeyedSeq$$1.prototype );\n  FromEntriesSequence.prototype.constructor = FromEntriesSequence;\n\n  FromEntriesSequence.prototype.entrySeq = function entrySeq () {\n    return this._iter.toSeq();\n  };\n\n  FromEntriesSequence.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    return this._iter.__iterate(\n      function (entry) {\n        // Check if entry exists first so array access doesn't throw for holes\n        // in the parent iteration.\n        if (entry) {\n          validateEntry(entry);\n          var indexedCollection = isCollection(entry);\n          return fn(\n            indexedCollection ? entry.get(1) : entry[1],\n            indexedCollection ? entry.get(0) : entry[0],\n            this$1\n          );\n        }\n      },\n      reverse\n    );\n  };\n\n  FromEntriesSequence.prototype.__iterator = function __iterator (type, reverse) {\n    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n    return new Iterator(function () {\n      while (true) {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        // Check if entry exists first so array access doesn't throw for holes\n        // in the parent iteration.\n        if (entry) {\n          validateEntry(entry);\n          var indexedCollection = isCollection(entry);\n          return iteratorValue(\n            type,\n            indexedCollection ? entry.get(0) : entry[0],\n            indexedCollection ? entry.get(1) : entry[1],\n            step\n          );\n        }\n      }\n    });\n  };\n\n  return FromEntriesSequence;\n}(KeyedSeq));\n\nToIndexedSequence.prototype.cacheResult = (ToKeyedSequence.prototype.cacheResult = (ToSetSequence.prototype.cacheResult = (FromEntriesSequence.prototype.cacheResult = cacheResultThrough)));\n\nfunction flipFactory(collection) {\n  var flipSequence = makeSequence(collection);\n  flipSequence._iter = collection;\n  flipSequence.size = collection.size;\n  flipSequence.flip = function () { return collection; };\n  flipSequence.reverse = function() {\n    var reversedSequence = collection.reverse.apply(this); // super.reverse()\n    reversedSequence.flip = function () { return collection.reverse(); };\n    return reversedSequence;\n  };\n  flipSequence.has = function (key) { return collection.includes(key); };\n  flipSequence.includes = function (key) { return collection.has(key); };\n  flipSequence.cacheResult = cacheResultThrough;\n  flipSequence.__iterateUncached = function(fn, reverse) {\n    var this$1 = this;\n\n    return collection.__iterate(function (v, k) { return fn(k, v, this$1) !== false; }, reverse);\n  };\n  flipSequence.__iteratorUncached = function(type, reverse) {\n    if (type === ITERATE_ENTRIES) {\n      var iterator = collection.__iterator(type, reverse);\n      return new Iterator(function () {\n        var step = iterator.next();\n        if (!step.done) {\n          var k = step.value[0];\n          step.value[0] = step.value[1];\n          step.value[1] = k;\n        }\n        return step;\n      });\n    }\n    return collection.__iterator(\n      type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,\n      reverse\n    );\n  };\n  return flipSequence;\n}\n\nfunction mapFactory(collection, mapper, context) {\n  var mappedSequence = makeSequence(collection);\n  mappedSequence.size = collection.size;\n  mappedSequence.has = function (key) { return collection.has(key); };\n  mappedSequence.get = function (key, notSetValue) {\n    var v = collection.get(key, NOT_SET);\n    return v === NOT_SET\n      ? notSetValue\n      : mapper.call(context, v, key, collection);\n  };\n  mappedSequence.__iterateUncached = function(fn, reverse) {\n    var this$1 = this;\n\n    return collection.__iterate(\n      function (v, k, c) { return fn(mapper.call(context, v, k, c), k, this$1) !== false; },\n      reverse\n    );\n  };\n  mappedSequence.__iteratorUncached = function(type, reverse) {\n    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n    return new Iterator(function () {\n      var step = iterator.next();\n      if (step.done) {\n        return step;\n      }\n      var entry = step.value;\n      var key = entry[0];\n      return iteratorValue(\n        type,\n        key,\n        mapper.call(context, entry[1], key, collection),\n        step\n      );\n    });\n  };\n  return mappedSequence;\n}\n\nfunction reverseFactory(collection, useKeys) {\n  var this$1 = this;\n\n  var reversedSequence = makeSequence(collection);\n  reversedSequence._iter = collection;\n  reversedSequence.size = collection.size;\n  reversedSequence.reverse = function () { return collection; };\n  if (collection.flip) {\n    reversedSequence.flip = function() {\n      var flipSequence = flipFactory(collection);\n      flipSequence.reverse = function () { return collection.flip(); };\n      return flipSequence;\n    };\n  }\n  reversedSequence.get = function (key, notSetValue) { return collection.get(useKeys ? key : -1 - key, notSetValue); };\n  reversedSequence.has = function (key) { return collection.has(useKeys ? key : -1 - key); };\n  reversedSequence.includes = function (value) { return collection.includes(value); };\n  reversedSequence.cacheResult = cacheResultThrough;\n  reversedSequence.__iterate = function(fn, reverse) {\n    var this$1 = this;\n\n    var i = 0;\n    reverse && ensureSize(collection);\n    return collection.__iterate(\n      function (v, k) { return fn(v, useKeys ? k : reverse ? this$1.size - ++i : i++, this$1); },\n      !reverse\n    );\n  };\n  reversedSequence.__iterator = function (type, reverse) {\n    var i = 0;\n    reverse && ensureSize(collection);\n    var iterator = collection.__iterator(ITERATE_ENTRIES, !reverse);\n    return new Iterator(function () {\n      var step = iterator.next();\n      if (step.done) {\n        return step;\n      }\n      var entry = step.value;\n      return iteratorValue(\n        type,\n        useKeys ? entry[0] : reverse ? this$1.size - ++i : i++,\n        entry[1],\n        step\n      );\n    });\n  };\n  return reversedSequence;\n}\n\nfunction filterFactory(collection, predicate, context, useKeys) {\n  var filterSequence = makeSequence(collection);\n  if (useKeys) {\n    filterSequence.has = function (key) {\n      var v = collection.get(key, NOT_SET);\n      return v !== NOT_SET && !!predicate.call(context, v, key, collection);\n    };\n    filterSequence.get = function (key, notSetValue) {\n      var v = collection.get(key, NOT_SET);\n      return v !== NOT_SET && predicate.call(context, v, key, collection)\n        ? v\n        : notSetValue;\n    };\n  }\n  filterSequence.__iterateUncached = function(fn, reverse) {\n    var this$1 = this;\n\n    var iterations = 0;\n    collection.__iterate(\n      function (v, k, c) {\n        if (predicate.call(context, v, k, c)) {\n          return fn(v, useKeys ? k : iterations++, this$1);\n        }\n      },\n      reverse\n    );\n    return iterations;\n  };\n  filterSequence.__iteratorUncached = function(type, reverse) {\n    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n    var iterations = 0;\n    return new Iterator(function () {\n      while (true) {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var key = entry[0];\n        var value = entry[1];\n        if (predicate.call(context, value, key, collection)) {\n          return iteratorValue(type, useKeys ? key : iterations++, value, step);\n        }\n      }\n    });\n  };\n  return filterSequence;\n}\n\nfunction countByFactory(collection, grouper, context) {\n  var groups = Map().asMutable();\n  collection.__iterate(function (v, k) {\n    groups.update(grouper.call(context, v, k, collection), 0, function (a) { return a + 1; });\n  });\n  return groups.asImmutable();\n}\n\nfunction groupByFactory(collection, grouper, context) {\n  var isKeyedIter = isKeyed(collection);\n  var groups = (isOrdered(collection) ? OrderedMap() : Map()).asMutable();\n  collection.__iterate(function (v, k) {\n    groups.update(\n      grouper.call(context, v, k, collection),\n      function (a) { return ((a = a || []), a.push(isKeyedIter ? [k, v] : v), a); }\n    );\n  });\n  var coerce = collectionClass(collection);\n  return groups.map(function (arr) { return reify(collection, coerce(arr)); });\n}\n\nfunction sliceFactory(collection, begin, end, useKeys) {\n  var originalSize = collection.size;\n\n  if (wholeSlice(begin, end, originalSize)) {\n    return collection;\n  }\n\n  var resolvedBegin = resolveBegin(begin, originalSize);\n  var resolvedEnd = resolveEnd(end, originalSize);\n\n  // begin or end will be NaN if they were provided as negative numbers and\n  // this collection's size is unknown. In that case, cache first so there is\n  // a known size and these do not resolve to NaN.\n  if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n    return sliceFactory(collection.toSeq().cacheResult(), begin, end, useKeys);\n  }\n\n  // Note: resolvedEnd is undefined when the original sequence's length is\n  // unknown and this slice did not supply an end and should contain all\n  // elements after resolvedBegin.\n  // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n  var resolvedSize = resolvedEnd - resolvedBegin;\n  var sliceSize;\n  if (resolvedSize === resolvedSize) {\n    sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n  }\n\n  var sliceSeq = makeSequence(collection);\n\n  // If collection.size is undefined, the size of the realized sliceSeq is\n  // unknown at this point unless the number of items to slice is 0\n  sliceSeq.size = sliceSize === 0\n    ? sliceSize\n    : (collection.size && sliceSize) || undefined;\n\n  if (!useKeys && isSeq(collection) && sliceSize >= 0) {\n    sliceSeq.get = function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      return index >= 0 && index < sliceSize\n        ? collection.get(index + resolvedBegin, notSetValue)\n        : notSetValue;\n    };\n  }\n\n  sliceSeq.__iterateUncached = function(fn, reverse) {\n    var this$1 = this;\n\n    if (sliceSize === 0) {\n      return 0;\n    }\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var skipped = 0;\n    var isSkipping = true;\n    var iterations = 0;\n    collection.__iterate(function (v, k) {\n      if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n        iterations++;\n        return fn(v, useKeys ? k : iterations - 1, this$1) !== false &&\n          iterations !== sliceSize;\n      }\n    });\n    return iterations;\n  };\n\n  sliceSeq.__iteratorUncached = function(type, reverse) {\n    if (sliceSize !== 0 && reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    // Don't bother instantiating parent iterator if taking 0.\n    var iterator = sliceSize !== 0 && collection.__iterator(type, reverse);\n    var skipped = 0;\n    var iterations = 0;\n    return new Iterator(function () {\n      while (skipped++ < resolvedBegin) {\n        iterator.next();\n      }\n      if (++iterations > sliceSize) {\n        return iteratorDone();\n      }\n      var step = iterator.next();\n      if (useKeys || type === ITERATE_VALUES) {\n        return step;\n      }\n      if (type === ITERATE_KEYS) {\n        return iteratorValue(type, iterations - 1, undefined, step);\n      }\n      return iteratorValue(type, iterations - 1, step.value[1], step);\n    });\n  };\n\n  return sliceSeq;\n}\n\nfunction takeWhileFactory(collection, predicate, context) {\n  var takeSequence = makeSequence(collection);\n  takeSequence.__iterateUncached = function(fn, reverse) {\n    var this$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var iterations = 0;\n    collection.__iterate(\n      function (v, k, c) { return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$1); }\n    );\n    return iterations;\n  };\n  takeSequence.__iteratorUncached = function(type, reverse) {\n    var this$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n    var iterating = true;\n    return new Iterator(function () {\n      if (!iterating) {\n        return iteratorDone();\n      }\n      var step = iterator.next();\n      if (step.done) {\n        return step;\n      }\n      var entry = step.value;\n      var k = entry[0];\n      var v = entry[1];\n      if (!predicate.call(context, v, k, this$1)) {\n        iterating = false;\n        return iteratorDone();\n      }\n      return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);\n    });\n  };\n  return takeSequence;\n}\n\nfunction skipWhileFactory(collection, predicate, context, useKeys) {\n  var skipSequence = makeSequence(collection);\n  skipSequence.__iterateUncached = function(fn, reverse) {\n    var this$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var isSkipping = true;\n    var iterations = 0;\n    collection.__iterate(function (v, k, c) {\n      if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n        iterations++;\n        return fn(v, useKeys ? k : iterations - 1, this$1);\n      }\n    });\n    return iterations;\n  };\n  skipSequence.__iteratorUncached = function(type, reverse) {\n    var this$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n    var skipping = true;\n    var iterations = 0;\n    return new Iterator(function () {\n      var step;\n      var k;\n      var v;\n      do {\n        step = iterator.next();\n        if (step.done) {\n          if (useKeys || type === ITERATE_VALUES) {\n            return step;\n          }\n          if (type === ITERATE_KEYS) {\n            return iteratorValue(type, iterations++, undefined, step);\n          }\n          return iteratorValue(type, iterations++, step.value[1], step);\n        }\n        var entry = step.value;\n        k = entry[0];\n        v = entry[1];\n        skipping && (skipping = predicate.call(context, v, k, this$1));\n      } while (skipping);\n      return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);\n    });\n  };\n  return skipSequence;\n}\n\nfunction concatFactory(collection, values) {\n  var isKeyedCollection = isKeyed(collection);\n  var iters = [collection]\n    .concat(values)\n    .map(function (v) {\n      if (!isCollection(v)) {\n        v = isKeyedCollection\n          ? keyedSeqFromValue(v)\n          : indexedSeqFromValue(Array.isArray(v) ? v : [v]);\n      } else if (isKeyedCollection) {\n        v = KeyedCollection(v);\n      }\n      return v;\n    })\n    .filter(function (v) { return v.size !== 0; });\n\n  if (iters.length === 0) {\n    return collection;\n  }\n\n  if (iters.length === 1) {\n    var singleton = iters[0];\n    if (\n      singleton === collection ||\n      (isKeyedCollection && isKeyed(singleton)) ||\n      (isIndexed(collection) && isIndexed(singleton))\n    ) {\n      return singleton;\n    }\n  }\n\n  var concatSeq = new ArraySeq(iters);\n  if (isKeyedCollection) {\n    concatSeq = concatSeq.toKeyedSeq();\n  } else if (!isIndexed(collection)) {\n    concatSeq = concatSeq.toSetSeq();\n  }\n  concatSeq = concatSeq.flatten(true);\n  concatSeq.size = iters.reduce(\n    function (sum, seq) {\n      if (sum !== undefined) {\n        var size = seq.size;\n        if (size !== undefined) {\n          return sum + size;\n        }\n      }\n    },\n    0\n  );\n  return concatSeq;\n}\n\nfunction flattenFactory(collection, depth, useKeys) {\n  var flatSequence = makeSequence(collection);\n  flatSequence.__iterateUncached = function(fn, reverse) {\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var iterations = 0;\n    var stopped = false;\n    function flatDeep(iter, currentDepth) {\n      iter.__iterate(\n        function (v, k) {\n          if ((!depth || currentDepth < depth) && isCollection(v)) {\n            flatDeep(v, currentDepth + 1);\n          } else if (\n            fn(v, useKeys ? k : iterations++, flatSequence) === false\n          ) {\n            stopped = true;\n          }\n          return !stopped;\n        },\n        reverse\n      );\n    }\n    flatDeep(collection, 0);\n    return iterations;\n  };\n  flatSequence.__iteratorUncached = function(type, reverse) {\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var iterator = collection.__iterator(type, reverse);\n    var stack = [];\n    var iterations = 0;\n    return new Iterator(function () {\n      while (iterator) {\n        var step = iterator.next();\n        if (step.done !== false) {\n          iterator = stack.pop();\n          continue;\n        }\n        var v = step.value;\n        if (type === ITERATE_ENTRIES) {\n          v = v[1];\n        }\n        if ((!depth || stack.length < depth) && isCollection(v)) {\n          stack.push(iterator);\n          iterator = v.__iterator(type, reverse);\n        } else {\n          return useKeys ? step : iteratorValue(type, iterations++, v, step);\n        }\n      }\n      return iteratorDone();\n    });\n  };\n  return flatSequence;\n}\n\nfunction flatMapFactory(collection, mapper, context) {\n  var coerce = collectionClass(collection);\n  return collection\n    .toSeq()\n    .map(function (v, k) { return coerce(mapper.call(context, v, k, collection)); })\n    .flatten(true);\n}\n\nfunction interposeFactory(collection, separator) {\n  var interposedSequence = makeSequence(collection);\n  interposedSequence.size = collection.size && collection.size * 2 - 1;\n  interposedSequence.__iterateUncached = function(fn, reverse) {\n    var this$1 = this;\n\n    var iterations = 0;\n    collection.__iterate(\n      function (v) { return (!iterations || fn(separator, iterations++, this$1) !== false) &&\n        fn(v, iterations++, this$1) !== false; },\n      reverse\n    );\n    return iterations;\n  };\n  interposedSequence.__iteratorUncached = function(type, reverse) {\n    var iterator = collection.__iterator(ITERATE_VALUES, reverse);\n    var iterations = 0;\n    var step;\n    return new Iterator(function () {\n      if (!step || iterations % 2) {\n        step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n      }\n      return iterations % 2\n        ? iteratorValue(type, iterations++, separator)\n        : iteratorValue(type, iterations++, step.value, step);\n    });\n  };\n  return interposedSequence;\n}\n\nfunction sortFactory(collection, comparator, mapper) {\n  if (!comparator) {\n    comparator = defaultComparator;\n  }\n  var isKeyedCollection = isKeyed(collection);\n  var index = 0;\n  var entries = collection\n    .toSeq()\n    .map(function (v, k) { return [k, v, index++, mapper ? mapper(v, k, collection) : v]; })\n    .toArray();\n  entries.sort(function (a, b) { return comparator(a[3], b[3]) || a[2] - b[2]; }).forEach(\n    isKeyedCollection\n      ? function (v, i) {\n          entries[i].length = 2;\n        }\n      : function (v, i) {\n          entries[i] = v[1];\n        }\n  );\n  return isKeyedCollection\n    ? KeyedSeq(entries)\n    : isIndexed(collection) ? IndexedSeq(entries) : SetSeq(entries);\n}\n\nfunction maxFactory(collection, comparator, mapper) {\n  if (!comparator) {\n    comparator = defaultComparator;\n  }\n  if (mapper) {\n    var entry = collection\n      .toSeq()\n      .map(function (v, k) { return [v, mapper(v, k, collection)]; })\n      .reduce(function (a, b) { return maxCompare(comparator, a[1], b[1]) ? b : a; });\n    return entry && entry[0];\n  }\n  return collection.reduce(function (a, b) { return maxCompare(comparator, a, b) ? b : a; });\n}\n\nfunction maxCompare(comparator, a, b) {\n  var comp = comparator(b, a);\n  // b is considered the new max if the comparator declares them equal, but\n  // they are not equal and b is in fact a nullish value.\n  return (comp === 0 &&\n    b !== a &&\n    (b === undefined || b === null || b !== b)) ||\n    comp > 0;\n}\n\nfunction zipWithFactory(keyIter, zipper, iters) {\n  var zipSequence = makeSequence(keyIter);\n  zipSequence.size = new ArraySeq(iters).map(function (i) { return i.size; }).min();\n  // Note: this a generic base implementation of __iterate in terms of\n  // __iterator which may be more generically useful in the future.\n  zipSequence.__iterate = function(fn, reverse) {\n    var this$1 = this;\n\n    /* generic:\n    var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n    var step;\n    var iterations = 0;\n    while (!(step = iterator.next()).done) {\n      iterations++;\n      if (fn(step.value[1], step.value[0], this) === false) {\n        break;\n      }\n    }\n    return iterations;\n    */\n    // indexed:\n    var iterator = this.__iterator(ITERATE_VALUES, reverse);\n    var step;\n    var iterations = 0;\n    while (!(step = iterator.next()).done) {\n      if (fn(step.value, iterations++, this$1) === false) {\n        break;\n      }\n    }\n    return iterations;\n  };\n  zipSequence.__iteratorUncached = function(type, reverse) {\n    var iterators = iters.map(\n      function (i) { return ((i = Collection(i)), getIterator(reverse ? i.reverse() : i)); }\n    );\n    var iterations = 0;\n    var isDone = false;\n    return new Iterator(function () {\n      var steps;\n      if (!isDone) {\n        steps = iterators.map(function (i) { return i.next(); });\n        isDone = steps.some(function (s) { return s.done; });\n      }\n      if (isDone) {\n        return iteratorDone();\n      }\n      return iteratorValue(\n        type,\n        iterations++,\n        zipper.apply(null, steps.map(function (s) { return s.value; }))\n      );\n    });\n  };\n  return zipSequence;\n}\n\n// #pragma Helper Functions\n\nfunction reify(iter, seq) {\n  return iter === seq ? iter : isSeq(iter) ? seq : iter.constructor(seq);\n}\n\nfunction validateEntry(entry) {\n  if (entry !== Object(entry)) {\n    throw new TypeError('Expected [K, V] tuple: ' + entry);\n  }\n}\n\nfunction collectionClass(collection) {\n  return isKeyed(collection)\n    ? KeyedCollection\n    : isIndexed(collection) ? IndexedCollection : SetCollection;\n}\n\nfunction makeSequence(collection) {\n  return Object.create(\n    (isKeyed(collection)\n      ? KeyedSeq\n      : isIndexed(collection) ? IndexedSeq : SetSeq).prototype\n  );\n}\n\nfunction cacheResultThrough() {\n  if (this._iter.cacheResult) {\n    this._iter.cacheResult();\n    this.size = this._iter.size;\n    return this;\n  }\n  return Seq.prototype.cacheResult.call(this);\n}\n\nfunction defaultComparator(a, b) {\n  if (a === undefined && b === undefined) {\n    return 0;\n  }\n\n  if (a === undefined) {\n    return 1;\n  }\n\n  if (b === undefined) {\n    return -1;\n  }\n\n  return a > b ? 1 : a < b ? -1 : 0;\n}\n\nfunction coerceKeyPath(keyPath) {\n  if (isArrayLike(keyPath) && typeof keyPath !== 'string') {\n    return keyPath;\n  }\n  if (isOrdered(keyPath)) {\n    return keyPath.toArray();\n  }\n  throw new TypeError(\n    'Invalid keyPath: expected Ordered Collection or Array: ' + keyPath\n  );\n}\n\nfunction invariant(condition, error) {\n  if (!condition) { throw new Error(error); }\n}\n\nfunction assertNotInfinite(size) {\n  invariant(\n    size !== Infinity,\n    'Cannot perform this action with an infinite size.'\n  );\n}\n\n/**\n * Converts a value to a string, adding quotes if a string was provided.\n */\nfunction quoteString(value) {\n  return typeof value === 'string' ? JSON.stringify(value) : String(value);\n}\n\nvar Map = (function (KeyedCollection$$1) {\n  function Map(value) {\n    return value === null || value === undefined\n      ? emptyMap()\n      : isMap(value) && !isOrdered(value)\n          ? value\n          : emptyMap().withMutations(function (map) {\n              var iter = KeyedCollection$$1(value);\n              assertNotInfinite(iter.size);\n              iter.forEach(function (v, k) { return map.set(k, v); });\n            });\n  }\n\n  if ( KeyedCollection$$1 ) Map.__proto__ = KeyedCollection$$1;\n  Map.prototype = Object.create( KeyedCollection$$1 && KeyedCollection$$1.prototype );\n  Map.prototype.constructor = Map;\n\n  Map.of = function of () {\n    var keyValues = [], len = arguments.length;\n    while ( len-- ) keyValues[ len ] = arguments[ len ];\n\n    return emptyMap().withMutations(function (map) {\n      for (var i = 0; i < keyValues.length; i += 2) {\n        if (i + 1 >= keyValues.length) {\n          throw new Error('Missing value for key: ' + keyValues[i]);\n        }\n        map.set(keyValues[i], keyValues[i + 1]);\n      }\n    });\n  };\n\n  Map.prototype.toString = function toString () {\n    return this.__toString('Map {', '}');\n  };\n\n  // @pragma Access\n\n  Map.prototype.get = function get (k, notSetValue) {\n    return this._root\n      ? this._root.get(0, undefined, k, notSetValue)\n      : notSetValue;\n  };\n\n  // @pragma Modification\n\n  Map.prototype.set = function set (k, v) {\n    return updateMap(this, k, v);\n  };\n\n  Map.prototype.setIn = function setIn (keyPath, v) {\n    return this.updateIn(keyPath, NOT_SET, function () { return v; });\n  };\n\n  Map.prototype.remove = function remove (k) {\n    return updateMap(this, k, NOT_SET);\n  };\n\n  Map.prototype.deleteIn = function deleteIn (keyPath) {\n    keyPath = [].concat( coerceKeyPath(keyPath) );\n    if (keyPath.length) {\n      var lastKey = keyPath.pop();\n      return this.updateIn(keyPath, function (c) { return c && c.remove(lastKey); });\n    }\n  };\n\n  Map.prototype.deleteAll = function deleteAll (keys) {\n    var collection = Collection(keys);\n\n    if (collection.size === 0) {\n      return this;\n    }\n\n    return this.withMutations(function (map) {\n      collection.forEach(function (key) { return map.remove(key); });\n    });\n  };\n\n  Map.prototype.update = function update (k, notSetValue, updater) {\n    return arguments.length === 1\n      ? k(this)\n      : this.updateIn([k], notSetValue, updater);\n  };\n\n  Map.prototype.updateIn = function updateIn (keyPath, notSetValue, updater) {\n    if (!updater) {\n      updater = notSetValue;\n      notSetValue = undefined;\n    }\n    var updatedValue = updateInDeepMap(\n      this,\n      coerceKeyPath(keyPath),\n      0,\n      notSetValue,\n      updater\n    );\n    return updatedValue === NOT_SET ? notSetValue : updatedValue;\n  };\n\n  Map.prototype.clear = function clear () {\n    if (this.size === 0) {\n      return this;\n    }\n    if (this.__ownerID) {\n      this.size = 0;\n      this._root = null;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return emptyMap();\n  };\n\n  // @pragma Composition\n\n  Map.prototype.merge = function merge (/*...iters*/) {\n    return mergeIntoMapWith(this, undefined, arguments);\n  };\n\n  Map.prototype.mergeWith = function mergeWith (merger) {\n    var iters = [], len = arguments.length - 1;\n    while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n    return mergeIntoMapWith(this, merger, iters);\n  };\n\n  Map.prototype.mergeIn = function mergeIn (keyPath) {\n    var iters = [], len = arguments.length - 1;\n    while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n    return this.updateIn(\n      keyPath,\n      emptyMap(),\n      function (m) { return typeof m.merge === 'function'\n          ? m.merge.apply(m, iters)\n          : iters[iters.length - 1]; }\n    );\n  };\n\n  Map.prototype.mergeDeep = function mergeDeep (/*...iters*/) {\n    return mergeIntoMapWith(this, deepMerger, arguments);\n  };\n\n  Map.prototype.mergeDeepWith = function mergeDeepWith (merger) {\n    var iters = [], len = arguments.length - 1;\n    while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n    return mergeIntoMapWith(this, deepMergerWith(merger), iters);\n  };\n\n  Map.prototype.mergeDeepIn = function mergeDeepIn (keyPath) {\n    var iters = [], len = arguments.length - 1;\n    while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n    return this.updateIn(\n      keyPath,\n      emptyMap(),\n      function (m) { return typeof m.mergeDeep === 'function'\n          ? m.mergeDeep.apply(m, iters)\n          : iters[iters.length - 1]; }\n    );\n  };\n\n  Map.prototype.sort = function sort (comparator) {\n    // Late binding\n    return OrderedMap(sortFactory(this, comparator));\n  };\n\n  Map.prototype.sortBy = function sortBy (mapper, comparator) {\n    // Late binding\n    return OrderedMap(sortFactory(this, comparator, mapper));\n  };\n\n  // @pragma Mutability\n\n  Map.prototype.withMutations = function withMutations (fn) {\n    var mutable = this.asMutable();\n    fn(mutable);\n    return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n  };\n\n  Map.prototype.asMutable = function asMutable () {\n    return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n  };\n\n  Map.prototype.asImmutable = function asImmutable () {\n    return this.__ensureOwner();\n  };\n\n  Map.prototype.wasAltered = function wasAltered () {\n    return this.__altered;\n  };\n\n  Map.prototype.__iterator = function __iterator (type, reverse) {\n    return new MapIterator(this, type, reverse);\n  };\n\n  Map.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    var iterations = 0;\n    this._root &&\n      this._root.iterate(\n        function (entry) {\n          iterations++;\n          return fn(entry[1], entry[0], this$1);\n        },\n        reverse\n      );\n    return iterations;\n  };\n\n  Map.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    if (!ownerID) {\n      if (this.size === 0) {\n        return emptyMap();\n      }\n      this.__ownerID = ownerID;\n      this.__altered = false;\n      return this;\n    }\n    return makeMap(this.size, this._root, ownerID, this.__hash);\n  };\n\n  return Map;\n}(KeyedCollection));\n\nfunction isMap(maybeMap) {\n  return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);\n}\n\nMap.isMap = isMap;\n\nvar IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\n\nvar MapPrototype = Map.prototype;\nMapPrototype[IS_MAP_SENTINEL] = true;\nMapPrototype[DELETE] = MapPrototype.remove;\nMapPrototype.removeIn = MapPrototype.deleteIn;\nMapPrototype.removeAll = MapPrototype.deleteAll;\n\n// #pragma Trie Nodes\n\nvar ArrayMapNode = function ArrayMapNode(ownerID, entries) {\n  this.ownerID = ownerID;\n  this.entries = entries;\n};\n\nArrayMapNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  var entries = this.entries;\n  for (var ii = 0, len = entries.length; ii < len; ii++) {\n    if (is(key, entries[ii][0])) {\n      return entries[ii][1];\n    }\n  }\n  return notSetValue;\n};\n\nArrayMapNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  var removed = value === NOT_SET;\n\n  var entries = this.entries;\n  var idx = 0;\n  var len = entries.length;\n  for (; idx < len; idx++) {\n    if (is(key, entries[idx][0])) {\n      break;\n    }\n  }\n  var exists = idx < len;\n\n  if (exists ? entries[idx][1] === value : removed) {\n    return this;\n  }\n\n  SetRef(didAlter);\n  (removed || !exists) && SetRef(didChangeSize);\n\n  if (removed && entries.length === 1) {\n    return; // undefined\n  }\n\n  if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n    return createNodes(ownerID, entries, key, value);\n  }\n\n  var isEditable = ownerID && ownerID === this.ownerID;\n  var newEntries = isEditable ? entries : arrCopy(entries);\n\n  if (exists) {\n    if (removed) {\n      idx === len - 1\n        ? newEntries.pop()\n        : (newEntries[idx] = newEntries.pop());\n    } else {\n      newEntries[idx] = [key, value];\n    }\n  } else {\n    newEntries.push([key, value]);\n  }\n\n  if (isEditable) {\n    this.entries = newEntries;\n    return this;\n  }\n\n  return new ArrayMapNode(ownerID, newEntries);\n};\n\nvar BitmapIndexedNode = function BitmapIndexedNode(ownerID, bitmap, nodes) {\n  this.ownerID = ownerID;\n  this.bitmap = bitmap;\n  this.nodes = nodes;\n};\n\nBitmapIndexedNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n  var bit = 1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK);\n  var bitmap = this.bitmap;\n  return (bitmap & bit) === 0\n    ? notSetValue\n    : this.nodes[popCount(bitmap & bit - 1)].get(\n        shift + SHIFT,\n        keyHash,\n        key,\n        notSetValue\n      );\n};\n\nBitmapIndexedNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n  var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n  var bit = 1 << keyHashFrag;\n  var bitmap = this.bitmap;\n  var exists = (bitmap & bit) !== 0;\n\n  if (!exists && value === NOT_SET) {\n    return this;\n  }\n\n  var idx = popCount(bitmap & bit - 1);\n  var nodes = this.nodes;\n  var node = exists ? nodes[idx] : undefined;\n  var newNode = updateNode(\n    node,\n    ownerID,\n    shift + SHIFT,\n    keyHash,\n    key,\n    value,\n    didChangeSize,\n    didAlter\n  );\n\n  if (newNode === node) {\n    return this;\n  }\n\n  if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n    return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n  }\n\n  if (\n    exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])\n  ) {\n    return nodes[idx ^ 1];\n  }\n\n  if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n    return newNode;\n  }\n\n  var isEditable = ownerID && ownerID === this.ownerID;\n  var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;\n  var newNodes = exists\n    ? newNode\n        ? setIn(nodes, idx, newNode, isEditable)\n        : spliceOut(nodes, idx, isEditable)\n    : spliceIn(nodes, idx, newNode, isEditable);\n\n  if (isEditable) {\n    this.bitmap = newBitmap;\n    this.nodes = newNodes;\n    return this;\n  }\n\n  return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n};\n\nvar HashArrayMapNode = function HashArrayMapNode(ownerID, count, nodes) {\n  this.ownerID = ownerID;\n  this.count = count;\n  this.nodes = nodes;\n};\n\nHashArrayMapNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n  var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n  var node = this.nodes[idx];\n  return node\n    ? node.get(shift + SHIFT, keyHash, key, notSetValue)\n    : notSetValue;\n};\n\nHashArrayMapNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n  var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n  var removed = value === NOT_SET;\n  var nodes = this.nodes;\n  var node = nodes[idx];\n\n  if (removed && !node) {\n    return this;\n  }\n\n  var newNode = updateNode(\n    node,\n    ownerID,\n    shift + SHIFT,\n    keyHash,\n    key,\n    value,\n    didChangeSize,\n    didAlter\n  );\n  if (newNode === node) {\n    return this;\n  }\n\n  var newCount = this.count;\n  if (!node) {\n    newCount++;\n  } else if (!newNode) {\n    newCount--;\n    if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n      return packNodes(ownerID, nodes, newCount, idx);\n    }\n  }\n\n  var isEditable = ownerID && ownerID === this.ownerID;\n  var newNodes = setIn(nodes, idx, newNode, isEditable);\n\n  if (isEditable) {\n    this.count = newCount;\n    this.nodes = newNodes;\n    return this;\n  }\n\n  return new HashArrayMapNode(ownerID, newCount, newNodes);\n};\n\nvar HashCollisionNode = function HashCollisionNode(ownerID, keyHash, entries) {\n  this.ownerID = ownerID;\n  this.keyHash = keyHash;\n  this.entries = entries;\n};\n\nHashCollisionNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  var entries = this.entries;\n  for (var ii = 0, len = entries.length; ii < len; ii++) {\n    if (is(key, entries[ii][0])) {\n      return entries[ii][1];\n    }\n  }\n  return notSetValue;\n};\n\nHashCollisionNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n\n  var removed = value === NOT_SET;\n\n  if (keyHash !== this.keyHash) {\n    if (removed) {\n      return this;\n    }\n    SetRef(didAlter);\n    SetRef(didChangeSize);\n    return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);\n  }\n\n  var entries = this.entries;\n  var idx = 0;\n  var len = entries.length;\n  for (; idx < len; idx++) {\n    if (is(key, entries[idx][0])) {\n      break;\n    }\n  }\n  var exists = idx < len;\n\n  if (exists ? entries[idx][1] === value : removed) {\n    return this;\n  }\n\n  SetRef(didAlter);\n  (removed || !exists) && SetRef(didChangeSize);\n\n  if (removed && len === 2) {\n    return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n  }\n\n  var isEditable = ownerID && ownerID === this.ownerID;\n  var newEntries = isEditable ? entries : arrCopy(entries);\n\n  if (exists) {\n    if (removed) {\n      idx === len - 1\n        ? newEntries.pop()\n        : (newEntries[idx] = newEntries.pop());\n    } else {\n      newEntries[idx] = [key, value];\n    }\n  } else {\n    newEntries.push([key, value]);\n  }\n\n  if (isEditable) {\n    this.entries = newEntries;\n    return this;\n  }\n\n  return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n};\n\nvar ValueNode = function ValueNode(ownerID, keyHash, entry) {\n  this.ownerID = ownerID;\n  this.keyHash = keyHash;\n  this.entry = entry;\n};\n\nValueNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n};\n\nValueNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  var removed = value === NOT_SET;\n  var keyMatch = is(key, this.entry[0]);\n  if (keyMatch ? value === this.entry[1] : removed) {\n    return this;\n  }\n\n  SetRef(didAlter);\n\n  if (removed) {\n    SetRef(didChangeSize);\n    return; // undefined\n  }\n\n  if (keyMatch) {\n    if (ownerID && ownerID === this.ownerID) {\n      this.entry[1] = value;\n      return this;\n    }\n    return new ValueNode(ownerID, this.keyHash, [key, value]);\n  }\n\n  SetRef(didChangeSize);\n  return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);\n};\n\n// #pragma Iterators\n\nArrayMapNode.prototype.iterate = (HashCollisionNode.prototype.iterate = function(\n  fn,\n  reverse\n) {\n  var entries = this.entries;\n  for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {\n    if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n      return false;\n    }\n  }\n});\n\nBitmapIndexedNode.prototype.iterate = (HashArrayMapNode.prototype.iterate = function(\n  fn,\n  reverse\n) {\n  var nodes = this.nodes;\n  for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {\n    var node = nodes[reverse ? maxIndex - ii : ii];\n    if (node && node.iterate(fn, reverse) === false) {\n      return false;\n    }\n  }\n});\n\n// eslint-disable-next-line no-unused-vars\nValueNode.prototype.iterate = function(fn, reverse) {\n  return fn(this.entry);\n};\n\nvar MapIterator = (function (Iterator$$1) {\n  function MapIterator(map, type, reverse) {\n    this._type = type;\n    this._reverse = reverse;\n    this._stack = map._root && mapIteratorFrame(map._root);\n  }\n\n  if ( Iterator$$1 ) MapIterator.__proto__ = Iterator$$1;\n  MapIterator.prototype = Object.create( Iterator$$1 && Iterator$$1.prototype );\n  MapIterator.prototype.constructor = MapIterator;\n\n  MapIterator.prototype.next = function next () {\n    var this$1 = this;\n\n    var type = this._type;\n    var stack = this._stack;\n    while (stack) {\n      var node = stack.node;\n      var index = stack.index++;\n      var maxIndex = (void 0);\n      if (node.entry) {\n        if (index === 0) {\n          return mapIteratorValue(type, node.entry);\n        }\n      } else if (node.entries) {\n        maxIndex = node.entries.length - 1;\n        if (index <= maxIndex) {\n          return mapIteratorValue(\n            type,\n            node.entries[this$1._reverse ? maxIndex - index : index]\n          );\n        }\n      } else {\n        maxIndex = node.nodes.length - 1;\n        if (index <= maxIndex) {\n          var subNode = node.nodes[this$1._reverse ? maxIndex - index : index];\n          if (subNode) {\n            if (subNode.entry) {\n              return mapIteratorValue(type, subNode.entry);\n            }\n            stack = (this$1._stack = mapIteratorFrame(subNode, stack));\n          }\n          continue;\n        }\n      }\n      stack = (this$1._stack = this$1._stack.__prev);\n    }\n    return iteratorDone();\n  };\n\n  return MapIterator;\n}(Iterator));\n\nfunction mapIteratorValue(type, entry) {\n  return iteratorValue(type, entry[0], entry[1]);\n}\n\nfunction mapIteratorFrame(node, prev) {\n  return {\n    node: node,\n    index: 0,\n    __prev: prev\n  };\n}\n\nfunction makeMap(size, root, ownerID, hash$$1) {\n  var map = Object.create(MapPrototype);\n  map.size = size;\n  map._root = root;\n  map.__ownerID = ownerID;\n  map.__hash = hash$$1;\n  map.__altered = false;\n  return map;\n}\n\nvar EMPTY_MAP;\nfunction emptyMap() {\n  return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n}\n\nfunction updateMap(map, k, v) {\n  var newRoot;\n  var newSize;\n  if (!map._root) {\n    if (v === NOT_SET) {\n      return map;\n    }\n    newSize = 1;\n    newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);\n  } else {\n    var didChangeSize = MakeRef(CHANGE_LENGTH);\n    var didAlter = MakeRef(DID_ALTER);\n    newRoot = updateNode(\n      map._root,\n      map.__ownerID,\n      0,\n      undefined,\n      k,\n      v,\n      didChangeSize,\n      didAlter\n    );\n    if (!didAlter.value) {\n      return map;\n    }\n    newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);\n  }\n  if (map.__ownerID) {\n    map.size = newSize;\n    map._root = newRoot;\n    map.__hash = undefined;\n    map.__altered = true;\n    return map;\n  }\n  return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n}\n\nfunction updateNode(\n  node,\n  ownerID,\n  shift,\n  keyHash,\n  key,\n  value,\n  didChangeSize,\n  didAlter\n) {\n  if (!node) {\n    if (value === NOT_SET) {\n      return node;\n    }\n    SetRef(didAlter);\n    SetRef(didChangeSize);\n    return new ValueNode(ownerID, keyHash, [key, value]);\n  }\n  return node.update(\n    ownerID,\n    shift,\n    keyHash,\n    key,\n    value,\n    didChangeSize,\n    didAlter\n  );\n}\n\nfunction isLeafNode(node) {\n  return node.constructor === ValueNode ||\n    node.constructor === HashCollisionNode;\n}\n\nfunction mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n  if (node.keyHash === keyHash) {\n    return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);\n  }\n\n  var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n  var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\n  var newNode;\n  var nodes = idx1 === idx2\n    ? [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)]\n    : ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2\n        ? [node, newNode]\n        : [newNode, node]);\n\n  return new BitmapIndexedNode(ownerID, 1 << idx1 | 1 << idx2, nodes);\n}\n\nfunction createNodes(ownerID, entries, key, value) {\n  if (!ownerID) {\n    ownerID = new OwnerID();\n  }\n  var node = new ValueNode(ownerID, hash(key), [key, value]);\n  for (var ii = 0; ii < entries.length; ii++) {\n    var entry = entries[ii];\n    node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n  }\n  return node;\n}\n\nfunction packNodes(ownerID, nodes, count, excluding) {\n  var bitmap = 0;\n  var packedII = 0;\n  var packedNodes = new Array(count);\n  for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, (bit <<= 1)) {\n    var node = nodes[ii];\n    if (node !== undefined && ii !== excluding) {\n      bitmap |= bit;\n      packedNodes[packedII++] = node;\n    }\n  }\n  return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n}\n\nfunction expandNodes(ownerID, nodes, bitmap, including, node) {\n  var count = 0;\n  var expandedNodes = new Array(SIZE);\n  for (var ii = 0; bitmap !== 0; ii++, (bitmap >>>= 1)) {\n    expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n  }\n  expandedNodes[including] = node;\n  return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n}\n\nfunction mergeIntoMapWith(map, merger, collections) {\n  var iters = [];\n  for (var ii = 0; ii < collections.length; ii++) {\n    var value = collections[ii];\n    var iter = KeyedCollection(value);\n    if (!isCollection(value)) {\n      iter = iter.map(function (v) { return fromJS(v); });\n    }\n    iters.push(iter);\n  }\n  return mergeIntoCollectionWith(map, merger, iters);\n}\n\nfunction deepMerger(oldVal, newVal) {\n  return oldVal && oldVal.mergeDeep && isCollection(newVal)\n    ? oldVal.mergeDeep(newVal)\n    : is(oldVal, newVal) ? oldVal : newVal;\n}\n\nfunction deepMergerWith(merger) {\n  return function (oldVal, newVal, key) {\n    if (oldVal && oldVal.mergeDeepWith && isCollection(newVal)) {\n      return oldVal.mergeDeepWith(merger, newVal);\n    }\n    var nextValue = merger(oldVal, newVal, key);\n    return is(oldVal, nextValue) ? oldVal : nextValue;\n  };\n}\n\nfunction mergeIntoCollectionWith(collection, merger, iters) {\n  iters = iters.filter(function (x) { return x.size !== 0; });\n  if (iters.length === 0) {\n    return collection;\n  }\n  if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {\n    return collection.constructor(iters[0]);\n  }\n  return collection.withMutations(function (collection) {\n    var mergeIntoMap = merger\n      ? function (value, key) {\n          collection.update(\n            key,\n            NOT_SET,\n            function (oldVal) { return oldVal === NOT_SET ? value : merger(oldVal, value, key); }\n          );\n        }\n      : function (value, key) {\n          collection.set(key, value);\n        };\n    for (var ii = 0; ii < iters.length; ii++) {\n      iters[ii].forEach(mergeIntoMap);\n    }\n  });\n}\n\nfunction updateInDeepMap(existing, keyPath, i, notSetValue, updater) {\n  var isNotSet = existing === NOT_SET;\n  if (i === keyPath.length) {\n    var existingValue = isNotSet ? notSetValue : existing;\n    var newValue = updater(existingValue);\n    return newValue === existingValue ? existing : newValue;\n  }\n  if (!(isNotSet || (existing && existing.set))) {\n    throw new TypeError(\n      'Invalid keyPath: Value at [' +\n        keyPath.slice(0, i).map(quoteString) +\n        '] does not have a .set() method and cannot be updated: ' +\n        existing\n    );\n  }\n  var key = keyPath[i];\n  var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);\n  var nextUpdated = updateInDeepMap(\n    nextExisting,\n    keyPath,\n    i + 1,\n    notSetValue,\n    updater\n  );\n  return nextUpdated === nextExisting\n    ? existing\n    : nextUpdated === NOT_SET\n        ? existing.remove(key)\n        : (isNotSet ? emptyMap() : existing).set(key, nextUpdated);\n}\n\nfunction popCount(x) {\n  x -= x >> 1 & 0x55555555;\n  x = (x & 0x33333333) + (x >> 2 & 0x33333333);\n  x = x + (x >> 4) & 0x0f0f0f0f;\n  x += x >> 8;\n  x += x >> 16;\n  return x & 0x7f;\n}\n\nfunction setIn(array, idx, val, canEdit) {\n  var newArray = canEdit ? array : arrCopy(array);\n  newArray[idx] = val;\n  return newArray;\n}\n\nfunction spliceIn(array, idx, val, canEdit) {\n  var newLen = array.length + 1;\n  if (canEdit && idx + 1 === newLen) {\n    array[idx] = val;\n    return array;\n  }\n  var newArray = new Array(newLen);\n  var after = 0;\n  for (var ii = 0; ii < newLen; ii++) {\n    if (ii === idx) {\n      newArray[ii] = val;\n      after = -1;\n    } else {\n      newArray[ii] = array[ii + after];\n    }\n  }\n  return newArray;\n}\n\nfunction spliceOut(array, idx, canEdit) {\n  var newLen = array.length - 1;\n  if (canEdit && idx === newLen) {\n    array.pop();\n    return array;\n  }\n  var newArray = new Array(newLen);\n  var after = 0;\n  for (var ii = 0; ii < newLen; ii++) {\n    if (ii === idx) {\n      after = 1;\n    }\n    newArray[ii] = array[ii + after];\n  }\n  return newArray;\n}\n\nvar MAX_ARRAY_MAP_SIZE = SIZE / 4;\nvar MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\nvar MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n\nvar List = (function (IndexedCollection$$1) {\n  function List(value) {\n    var empty = emptyList();\n    if (value === null || value === undefined) {\n      return empty;\n    }\n    if (isList(value)) {\n      return value;\n    }\n    var iter = IndexedCollection$$1(value);\n    var size = iter.size;\n    if (size === 0) {\n      return empty;\n    }\n    assertNotInfinite(size);\n    if (size > 0 && size < SIZE) {\n      return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n    }\n    return empty.withMutations(function (list) {\n      list.setSize(size);\n      iter.forEach(function (v, i) { return list.set(i, v); });\n    });\n  }\n\n  if ( IndexedCollection$$1 ) List.__proto__ = IndexedCollection$$1;\n  List.prototype = Object.create( IndexedCollection$$1 && IndexedCollection$$1.prototype );\n  List.prototype.constructor = List;\n\n  List.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  List.prototype.toString = function toString () {\n    return this.__toString('List [', ']');\n  };\n\n  // @pragma Access\n\n  List.prototype.get = function get (index, notSetValue) {\n    index = wrapIndex(this, index);\n    if (index >= 0 && index < this.size) {\n      index += this._origin;\n      var node = listNodeFor(this, index);\n      return node && node.array[index & MASK];\n    }\n    return notSetValue;\n  };\n\n  // @pragma Modification\n\n  List.prototype.set = function set (index, value) {\n    return updateList(this, index, value);\n  };\n\n  List.prototype.remove = function remove (index) {\n    return !this.has(index)\n      ? this\n      : index === 0\n          ? this.shift()\n          : index === this.size - 1 ? this.pop() : this.splice(index, 1);\n  };\n\n  List.prototype.insert = function insert (index, value) {\n    return this.splice(index, 0, value);\n  };\n\n  List.prototype.clear = function clear () {\n    if (this.size === 0) {\n      return this;\n    }\n    if (this.__ownerID) {\n      this.size = (this._origin = (this._capacity = 0));\n      this._level = SHIFT;\n      this._root = (this._tail = null);\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return emptyList();\n  };\n\n  List.prototype.push = function push (/*...values*/) {\n    var values = arguments;\n    var oldSize = this.size;\n    return this.withMutations(function (list) {\n      setListBounds(list, 0, oldSize + values.length);\n      for (var ii = 0; ii < values.length; ii++) {\n        list.set(oldSize + ii, values[ii]);\n      }\n    });\n  };\n\n  List.prototype.pop = function pop () {\n    return setListBounds(this, 0, -1);\n  };\n\n  List.prototype.unshift = function unshift (/*...values*/) {\n    var values = arguments;\n    return this.withMutations(function (list) {\n      setListBounds(list, -values.length);\n      for (var ii = 0; ii < values.length; ii++) {\n        list.set(ii, values[ii]);\n      }\n    });\n  };\n\n  List.prototype.shift = function shift () {\n    return setListBounds(this, 1);\n  };\n\n  // @pragma Composition\n\n  List.prototype.merge = function merge (/*...iters*/) {\n    return mergeIntoListWith(this, undefined, arguments);\n  };\n\n  List.prototype.mergeWith = function mergeWith (merger) {\n    var iters = [], len = arguments.length - 1;\n    while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n    return mergeIntoListWith(this, merger, iters);\n  };\n\n  List.prototype.mergeDeep = function mergeDeep (/*...iters*/) {\n    return mergeIntoListWith(this, deepMerger, arguments);\n  };\n\n  List.prototype.mergeDeepWith = function mergeDeepWith (merger) {\n    var iters = [], len = arguments.length - 1;\n    while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n    return mergeIntoListWith(this, deepMergerWith(merger), iters);\n  };\n\n  List.prototype.setSize = function setSize (size) {\n    return setListBounds(this, 0, size);\n  };\n\n  // @pragma Iteration\n\n  List.prototype.slice = function slice (begin, end) {\n    var size = this.size;\n    if (wholeSlice(begin, end, size)) {\n      return this;\n    }\n    return setListBounds(\n      this,\n      resolveBegin(begin, size),\n      resolveEnd(end, size)\n    );\n  };\n\n  List.prototype.__iterator = function __iterator (type, reverse) {\n    var index = reverse ? this.size : 0;\n    var values = iterateList(this, reverse);\n    return new Iterator(function () {\n      var value = values();\n      return value === DONE\n        ? iteratorDone()\n        : iteratorValue(type, reverse ? --index : index++, value);\n    });\n  };\n\n  List.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    var index = reverse ? this.size : 0;\n    var values = iterateList(this, reverse);\n    var value;\n    while ((value = values()) !== DONE) {\n      if (fn(value, reverse ? --index : index++, this$1) === false) {\n        break;\n      }\n    }\n    return index;\n  };\n\n  List.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    if (!ownerID) {\n      if (this.size === 0) {\n        return emptyList();\n      }\n      this.__ownerID = ownerID;\n      return this;\n    }\n    return makeList(\n      this._origin,\n      this._capacity,\n      this._level,\n      this._root,\n      this._tail,\n      ownerID,\n      this.__hash\n    );\n  };\n\n  return List;\n}(IndexedCollection));\n\nfunction isList(maybeList) {\n  return !!(maybeList && maybeList[IS_LIST_SENTINEL]);\n}\n\nList.isList = isList;\n\nvar IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\n\nvar ListPrototype = List.prototype;\nListPrototype[IS_LIST_SENTINEL] = true;\nListPrototype[DELETE] = ListPrototype.remove;\nListPrototype.setIn = MapPrototype.setIn;\nListPrototype.deleteIn = (ListPrototype.removeIn = MapPrototype.removeIn);\nListPrototype.update = MapPrototype.update;\nListPrototype.updateIn = MapPrototype.updateIn;\nListPrototype.mergeIn = MapPrototype.mergeIn;\nListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\nListPrototype.withMutations = MapPrototype.withMutations;\nListPrototype.asMutable = MapPrototype.asMutable;\nListPrototype.asImmutable = MapPrototype.asImmutable;\nListPrototype.wasAltered = MapPrototype.wasAltered;\n\nvar VNode = function VNode(array, ownerID) {\n  this.array = array;\n  this.ownerID = ownerID;\n};\n\n// TODO: seems like these methods are very similar\n\nVNode.prototype.removeBefore = function removeBefore (ownerID, level, index) {\n  if (index === level ? 1 << level : 0 || this.array.length === 0) {\n    return this;\n  }\n  var originIndex = index >>> level & MASK;\n  if (originIndex >= this.array.length) {\n    return new VNode([], ownerID);\n  }\n  var removingFirst = originIndex === 0;\n  var newChild;\n  if (level > 0) {\n    var oldChild = this.array[originIndex];\n    newChild = oldChild &&\n      oldChild.removeBefore(ownerID, level - SHIFT, index);\n    if (newChild === oldChild && removingFirst) {\n      return this;\n    }\n  }\n  if (removingFirst && !newChild) {\n    return this;\n  }\n  var editable = editableVNode(this, ownerID);\n  if (!removingFirst) {\n    for (var ii = 0; ii < originIndex; ii++) {\n      editable.array[ii] = undefined;\n    }\n  }\n  if (newChild) {\n    editable.array[originIndex] = newChild;\n  }\n  return editable;\n};\n\nVNode.prototype.removeAfter = function removeAfter (ownerID, level, index) {\n  if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n    return this;\n  }\n  var sizeIndex = index - 1 >>> level & MASK;\n  if (sizeIndex >= this.array.length) {\n    return this;\n  }\n\n  var newChild;\n  if (level > 0) {\n    var oldChild = this.array[sizeIndex];\n    newChild = oldChild &&\n      oldChild.removeAfter(ownerID, level - SHIFT, index);\n    if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n      return this;\n    }\n  }\n\n  var editable = editableVNode(this, ownerID);\n  editable.array.splice(sizeIndex + 1);\n  if (newChild) {\n    editable.array[sizeIndex] = newChild;\n  }\n  return editable;\n};\n\nvar DONE = {};\n\nfunction iterateList(list, reverse) {\n  var left = list._origin;\n  var right = list._capacity;\n  var tailPos = getTailOffset(right);\n  var tail = list._tail;\n\n  return iterateNodeOrLeaf(list._root, list._level, 0);\n\n  function iterateNodeOrLeaf(node, level, offset) {\n    return level === 0\n      ? iterateLeaf(node, offset)\n      : iterateNode(node, level, offset);\n  }\n\n  function iterateLeaf(node, offset) {\n    var array = offset === tailPos ? tail && tail.array : node && node.array;\n    var from = offset > left ? 0 : left - offset;\n    var to = right - offset;\n    if (to > SIZE) {\n      to = SIZE;\n    }\n    return function () {\n      if (from === to) {\n        return DONE;\n      }\n      var idx = reverse ? --to : from++;\n      return array && array[idx];\n    };\n  }\n\n  function iterateNode(node, level, offset) {\n    var values;\n    var array = node && node.array;\n    var from = offset > left ? 0 : left - offset >> level;\n    var to = (right - offset >> level) + 1;\n    if (to > SIZE) {\n      to = SIZE;\n    }\n    return function () {\n      while (true) {\n        if (values) {\n          var value = values();\n          if (value !== DONE) {\n            return value;\n          }\n          values = null;\n        }\n        if (from === to) {\n          return DONE;\n        }\n        var idx = reverse ? --to : from++;\n        values = iterateNodeOrLeaf(\n          array && array[idx],\n          level - SHIFT,\n          offset + (idx << level)\n        );\n      }\n    };\n  }\n}\n\nfunction makeList(origin, capacity, level, root, tail, ownerID, hash) {\n  var list = Object.create(ListPrototype);\n  list.size = capacity - origin;\n  list._origin = origin;\n  list._capacity = capacity;\n  list._level = level;\n  list._root = root;\n  list._tail = tail;\n  list.__ownerID = ownerID;\n  list.__hash = hash;\n  list.__altered = false;\n  return list;\n}\n\nvar EMPTY_LIST;\nfunction emptyList() {\n  return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n}\n\nfunction updateList(list, index, value) {\n  index = wrapIndex(list, index);\n\n  if (index !== index) {\n    return list;\n  }\n\n  if (index >= list.size || index < 0) {\n    return list.withMutations(function (list) {\n      index < 0\n        ? setListBounds(list, index).set(0, value)\n        : setListBounds(list, 0, index + 1).set(index, value);\n    });\n  }\n\n  index += list._origin;\n\n  var newTail = list._tail;\n  var newRoot = list._root;\n  var didAlter = MakeRef(DID_ALTER);\n  if (index >= getTailOffset(list._capacity)) {\n    newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n  } else {\n    newRoot = updateVNode(\n      newRoot,\n      list.__ownerID,\n      list._level,\n      index,\n      value,\n      didAlter\n    );\n  }\n\n  if (!didAlter.value) {\n    return list;\n  }\n\n  if (list.__ownerID) {\n    list._root = newRoot;\n    list._tail = newTail;\n    list.__hash = undefined;\n    list.__altered = true;\n    return list;\n  }\n  return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n}\n\nfunction updateVNode(node, ownerID, level, index, value, didAlter) {\n  var idx = index >>> level & MASK;\n  var nodeHas = node && idx < node.array.length;\n  if (!nodeHas && value === undefined) {\n    return node;\n  }\n\n  var newNode;\n\n  if (level > 0) {\n    var lowerNode = node && node.array[idx];\n    var newLowerNode = updateVNode(\n      lowerNode,\n      ownerID,\n      level - SHIFT,\n      index,\n      value,\n      didAlter\n    );\n    if (newLowerNode === lowerNode) {\n      return node;\n    }\n    newNode = editableVNode(node, ownerID);\n    newNode.array[idx] = newLowerNode;\n    return newNode;\n  }\n\n  if (nodeHas && node.array[idx] === value) {\n    return node;\n  }\n\n  SetRef(didAlter);\n\n  newNode = editableVNode(node, ownerID);\n  if (value === undefined && idx === newNode.array.length - 1) {\n    newNode.array.pop();\n  } else {\n    newNode.array[idx] = value;\n  }\n  return newNode;\n}\n\nfunction editableVNode(node, ownerID) {\n  if (ownerID && node && ownerID === node.ownerID) {\n    return node;\n  }\n  return new VNode(node ? node.array.slice() : [], ownerID);\n}\n\nfunction listNodeFor(list, rawIndex) {\n  if (rawIndex >= getTailOffset(list._capacity)) {\n    return list._tail;\n  }\n  if (rawIndex < 1 << list._level + SHIFT) {\n    var node = list._root;\n    var level = list._level;\n    while (node && level > 0) {\n      node = node.array[rawIndex >>> level & MASK];\n      level -= SHIFT;\n    }\n    return node;\n  }\n}\n\nfunction setListBounds(list, begin, end) {\n  // Sanitize begin & end using this shorthand for ToInt32(argument)\n  // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n  if (begin !== undefined) {\n    begin |= 0;\n  }\n  if (end !== undefined) {\n    end |= 0;\n  }\n  var owner = list.__ownerID || new OwnerID();\n  var oldOrigin = list._origin;\n  var oldCapacity = list._capacity;\n  var newOrigin = oldOrigin + begin;\n  var newCapacity = end === undefined\n    ? oldCapacity\n    : end < 0 ? oldCapacity + end : oldOrigin + end;\n  if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n    return list;\n  }\n\n  // If it's going to end after it starts, it's empty.\n  if (newOrigin >= newCapacity) {\n    return list.clear();\n  }\n\n  var newLevel = list._level;\n  var newRoot = list._root;\n\n  // New origin might need creating a higher root.\n  var offsetShift = 0;\n  while (newOrigin + offsetShift < 0) {\n    newRoot = new VNode(\n      newRoot && newRoot.array.length ? [undefined, newRoot] : [],\n      owner\n    );\n    newLevel += SHIFT;\n    offsetShift += 1 << newLevel;\n  }\n  if (offsetShift) {\n    newOrigin += offsetShift;\n    oldOrigin += offsetShift;\n    newCapacity += offsetShift;\n    oldCapacity += offsetShift;\n  }\n\n  var oldTailOffset = getTailOffset(oldCapacity);\n  var newTailOffset = getTailOffset(newCapacity);\n\n  // New size might need creating a higher root.\n  while (newTailOffset >= 1 << newLevel + SHIFT) {\n    newRoot = new VNode(\n      newRoot && newRoot.array.length ? [newRoot] : [],\n      owner\n    );\n    newLevel += SHIFT;\n  }\n\n  // Locate or create the new tail.\n  var oldTail = list._tail;\n  var newTail = newTailOffset < oldTailOffset\n    ? listNodeFor(list, newCapacity - 1)\n    : newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;\n\n  // Merge Tail into tree.\n  if (\n    oldTail &&\n    newTailOffset > oldTailOffset &&\n    newOrigin < oldCapacity &&\n    oldTail.array.length\n  ) {\n    newRoot = editableVNode(newRoot, owner);\n    var node = newRoot;\n    for (var level = newLevel; level > SHIFT; level -= SHIFT) {\n      var idx = oldTailOffset >>> level & MASK;\n      node = (node.array[idx] = editableVNode(node.array[idx], owner));\n    }\n    node.array[oldTailOffset >>> SHIFT & MASK] = oldTail;\n  }\n\n  // If the size has been reduced, there's a chance the tail needs to be trimmed.\n  if (newCapacity < oldCapacity) {\n    newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n  }\n\n  // If the new origin is within the tail, then we do not need a root.\n  if (newOrigin >= newTailOffset) {\n    newOrigin -= newTailOffset;\n    newCapacity -= newTailOffset;\n    newLevel = SHIFT;\n    newRoot = null;\n    newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n\n    // Otherwise, if the root has been trimmed, garbage collect.\n  } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n    offsetShift = 0;\n\n    // Identify the new top root node of the subtree of the old root.\n    while (newRoot) {\n      var beginIndex = newOrigin >>> newLevel & MASK;\n      if (beginIndex !== newTailOffset >>> newLevel & MASK) {\n        break;\n      }\n      if (beginIndex) {\n        offsetShift += (1 << newLevel) * beginIndex;\n      }\n      newLevel -= SHIFT;\n      newRoot = newRoot.array[beginIndex];\n    }\n\n    // Trim the new sides of the new root.\n    if (newRoot && newOrigin > oldOrigin) {\n      newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n    }\n    if (newRoot && newTailOffset < oldTailOffset) {\n      newRoot = newRoot.removeAfter(\n        owner,\n        newLevel,\n        newTailOffset - offsetShift\n      );\n    }\n    if (offsetShift) {\n      newOrigin -= offsetShift;\n      newCapacity -= offsetShift;\n    }\n  }\n\n  if (list.__ownerID) {\n    list.size = newCapacity - newOrigin;\n    list._origin = newOrigin;\n    list._capacity = newCapacity;\n    list._level = newLevel;\n    list._root = newRoot;\n    list._tail = newTail;\n    list.__hash = undefined;\n    list.__altered = true;\n    return list;\n  }\n  return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n}\n\nfunction mergeIntoListWith(list, merger, collections) {\n  var iters = [];\n  var maxSize = 0;\n  for (var ii = 0; ii < collections.length; ii++) {\n    var value = collections[ii];\n    var iter = IndexedCollection(value);\n    if (iter.size > maxSize) {\n      maxSize = iter.size;\n    }\n    if (!isCollection(value)) {\n      iter = iter.map(function (v) { return fromJS(v); });\n    }\n    iters.push(iter);\n  }\n  if (maxSize > list.size) {\n    list = list.setSize(maxSize);\n  }\n  return mergeIntoCollectionWith(list, merger, iters);\n}\n\nfunction getTailOffset(size) {\n  return size < SIZE ? 0 : size - 1 >>> SHIFT << SHIFT;\n}\n\nvar OrderedMap = (function (Map$$1) {\n  function OrderedMap(value) {\n    return value === null || value === undefined\n      ? emptyOrderedMap()\n      : isOrderedMap(value)\n          ? value\n          : emptyOrderedMap().withMutations(function (map) {\n              var iter = KeyedCollection(value);\n              assertNotInfinite(iter.size);\n              iter.forEach(function (v, k) { return map.set(k, v); });\n            });\n  }\n\n  if ( Map$$1 ) OrderedMap.__proto__ = Map$$1;\n  OrderedMap.prototype = Object.create( Map$$1 && Map$$1.prototype );\n  OrderedMap.prototype.constructor = OrderedMap;\n\n  OrderedMap.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  OrderedMap.prototype.toString = function toString () {\n    return this.__toString('OrderedMap {', '}');\n  };\n\n  // @pragma Access\n\n  OrderedMap.prototype.get = function get (k, notSetValue) {\n    var index = this._map.get(k);\n    return index !== undefined ? this._list.get(index)[1] : notSetValue;\n  };\n\n  // @pragma Modification\n\n  OrderedMap.prototype.clear = function clear () {\n    if (this.size === 0) {\n      return this;\n    }\n    if (this.__ownerID) {\n      this.size = 0;\n      this._map.clear();\n      this._list.clear();\n      return this;\n    }\n    return emptyOrderedMap();\n  };\n\n  OrderedMap.prototype.set = function set (k, v) {\n    return updateOrderedMap(this, k, v);\n  };\n\n  OrderedMap.prototype.remove = function remove (k) {\n    return updateOrderedMap(this, k, NOT_SET);\n  };\n\n  OrderedMap.prototype.wasAltered = function wasAltered () {\n    return this._map.wasAltered() || this._list.wasAltered();\n  };\n\n  OrderedMap.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    return this._list.__iterate(\n      function (entry) { return entry && fn(entry[1], entry[0], this$1); },\n      reverse\n    );\n  };\n\n  OrderedMap.prototype.__iterator = function __iterator (type, reverse) {\n    return this._list.fromEntrySeq().__iterator(type, reverse);\n  };\n\n  OrderedMap.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    var newMap = this._map.__ensureOwner(ownerID);\n    var newList = this._list.__ensureOwner(ownerID);\n    if (!ownerID) {\n      if (this.size === 0) {\n        return emptyOrderedMap();\n      }\n      this.__ownerID = ownerID;\n      this._map = newMap;\n      this._list = newList;\n      return this;\n    }\n    return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n  };\n\n  return OrderedMap;\n}(Map));\n\nfunction isOrderedMap(maybeOrderedMap) {\n  return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n}\n\nOrderedMap.isOrderedMap = isOrderedMap;\n\nOrderedMap.prototype[IS_ORDERED_SENTINEL] = true;\nOrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n\nfunction makeOrderedMap(map, list, ownerID, hash) {\n  var omap = Object.create(OrderedMap.prototype);\n  omap.size = map ? map.size : 0;\n  omap._map = map;\n  omap._list = list;\n  omap.__ownerID = ownerID;\n  omap.__hash = hash;\n  return omap;\n}\n\nvar EMPTY_ORDERED_MAP;\nfunction emptyOrderedMap() {\n  return EMPTY_ORDERED_MAP ||\n    (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));\n}\n\nfunction updateOrderedMap(omap, k, v) {\n  var map = omap._map;\n  var list = omap._list;\n  var i = map.get(k);\n  var has = i !== undefined;\n  var newMap;\n  var newList;\n  if (v === NOT_SET) {\n    // removed\n    if (!has) {\n      return omap;\n    }\n    if (list.size >= SIZE && list.size >= map.size * 2) {\n      newList = list.filter(function (entry, idx) { return entry !== undefined && i !== idx; });\n      newMap = newList.toKeyedSeq().map(function (entry) { return entry[0]; }).flip().toMap();\n      if (omap.__ownerID) {\n        newMap.__ownerID = (newList.__ownerID = omap.__ownerID);\n      }\n    } else {\n      newMap = map.remove(k);\n      newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n    }\n  } else if (has) {\n    if (v === list.get(i)[1]) {\n      return omap;\n    }\n    newMap = map;\n    newList = list.set(i, [k, v]);\n  } else {\n    newMap = map.set(k, list.size);\n    newList = list.set(list.size, [k, v]);\n  }\n  if (omap.__ownerID) {\n    omap.size = newMap.size;\n    omap._map = newMap;\n    omap._list = newList;\n    omap.__hash = undefined;\n    return omap;\n  }\n  return makeOrderedMap(newMap, newList);\n}\n\nvar Stack = (function (IndexedCollection$$1) {\n  function Stack(value) {\n    return value === null || value === undefined\n      ? emptyStack()\n      : isStack(value) ? value : emptyStack().pushAll(value);\n  }\n\n  if ( IndexedCollection$$1 ) Stack.__proto__ = IndexedCollection$$1;\n  Stack.prototype = Object.create( IndexedCollection$$1 && IndexedCollection$$1.prototype );\n  Stack.prototype.constructor = Stack;\n\n  Stack.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  Stack.prototype.toString = function toString () {\n    return this.__toString('Stack [', ']');\n  };\n\n  // @pragma Access\n\n  Stack.prototype.get = function get (index, notSetValue) {\n    var head = this._head;\n    index = wrapIndex(this, index);\n    while (head && index--) {\n      head = head.next;\n    }\n    return head ? head.value : notSetValue;\n  };\n\n  Stack.prototype.peek = function peek () {\n    return this._head && this._head.value;\n  };\n\n  // @pragma Modification\n\n  Stack.prototype.push = function push (/*...values*/) {\n    var arguments$1 = arguments;\n\n    if (arguments.length === 0) {\n      return this;\n    }\n    var newSize = this.size + arguments.length;\n    var head = this._head;\n    for (var ii = arguments.length - 1; ii >= 0; ii--) {\n      head = {\n        value: arguments$1[ii],\n        next: head\n      };\n    }\n    if (this.__ownerID) {\n      this.size = newSize;\n      this._head = head;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return makeStack(newSize, head);\n  };\n\n  Stack.prototype.pushAll = function pushAll (iter) {\n    iter = IndexedCollection$$1(iter);\n    if (iter.size === 0) {\n      return this;\n    }\n    if (this.size === 0 && isStack(iter)) {\n      return iter;\n    }\n    assertNotInfinite(iter.size);\n    var newSize = this.size;\n    var head = this._head;\n    iter.__iterate(\n      function (value) {\n        newSize++;\n        head = {\n          value: value,\n          next: head\n        };\n      },\n      /* reverse */ true\n    );\n    if (this.__ownerID) {\n      this.size = newSize;\n      this._head = head;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return makeStack(newSize, head);\n  };\n\n  Stack.prototype.pop = function pop () {\n    return this.slice(1);\n  };\n\n  Stack.prototype.clear = function clear () {\n    if (this.size === 0) {\n      return this;\n    }\n    if (this.__ownerID) {\n      this.size = 0;\n      this._head = undefined;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return emptyStack();\n  };\n\n  Stack.prototype.slice = function slice (begin, end) {\n    if (wholeSlice(begin, end, this.size)) {\n      return this;\n    }\n    var resolvedBegin = resolveBegin(begin, this.size);\n    var resolvedEnd = resolveEnd(end, this.size);\n    if (resolvedEnd !== this.size) {\n      // super.slice(begin, end);\n      return IndexedCollection$$1.prototype.slice.call(this, begin, end);\n    }\n    var newSize = this.size - resolvedBegin;\n    var head = this._head;\n    while (resolvedBegin--) {\n      head = head.next;\n    }\n    if (this.__ownerID) {\n      this.size = newSize;\n      this._head = head;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return makeStack(newSize, head);\n  };\n\n  // @pragma Mutability\n\n  Stack.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    if (!ownerID) {\n      if (this.size === 0) {\n        return emptyStack();\n      }\n      this.__ownerID = ownerID;\n      this.__altered = false;\n      return this;\n    }\n    return makeStack(this.size, this._head, ownerID, this.__hash);\n  };\n\n  // @pragma Iteration\n\n  Stack.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    if (reverse) {\n      return new ArraySeq(this.toArray()).__iterate(\n        function (v, k) { return fn(v, k, this$1); },\n        reverse\n      );\n    }\n    var iterations = 0;\n    var node = this._head;\n    while (node) {\n      if (fn(node.value, iterations++, this$1) === false) {\n        break;\n      }\n      node = node.next;\n    }\n    return iterations;\n  };\n\n  Stack.prototype.__iterator = function __iterator (type, reverse) {\n    if (reverse) {\n      return new ArraySeq(this.toArray()).__iterator(type, reverse);\n    }\n    var iterations = 0;\n    var node = this._head;\n    return new Iterator(function () {\n      if (node) {\n        var value = node.value;\n        node = node.next;\n        return iteratorValue(type, iterations++, value);\n      }\n      return iteratorDone();\n    });\n  };\n\n  return Stack;\n}(IndexedCollection));\n\nfunction isStack(maybeStack) {\n  return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);\n}\n\nStack.isStack = isStack;\n\nvar IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\nvar StackPrototype = Stack.prototype;\nStackPrototype[IS_STACK_SENTINEL] = true;\nStackPrototype.withMutations = MapPrototype.withMutations;\nStackPrototype.asMutable = MapPrototype.asMutable;\nStackPrototype.asImmutable = MapPrototype.asImmutable;\nStackPrototype.wasAltered = MapPrototype.wasAltered;\nStackPrototype.shift = StackPrototype.pop;\nStackPrototype.unshift = StackPrototype.push;\nStackPrototype.unshiftAll = StackPrototype.pushAll;\n\nfunction makeStack(size, head, ownerID, hash) {\n  var map = Object.create(StackPrototype);\n  map.size = size;\n  map._head = head;\n  map.__ownerID = ownerID;\n  map.__hash = hash;\n  map.__altered = false;\n  return map;\n}\n\nvar EMPTY_STACK;\nfunction emptyStack() {\n  return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n}\n\nfunction deepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (\n    !isCollection(b) ||\n    (a.size !== undefined && b.size !== undefined && a.size !== b.size) ||\n    (a.__hash !== undefined &&\n      b.__hash !== undefined &&\n      a.__hash !== b.__hash) ||\n    isKeyed(a) !== isKeyed(b) ||\n    isIndexed(a) !== isIndexed(b) ||\n    isOrdered(a) !== isOrdered(b)\n  ) {\n    return false;\n  }\n\n  if (a.size === 0 && b.size === 0) {\n    return true;\n  }\n\n  var notAssociative = !isAssociative(a);\n\n  if (isOrdered(a)) {\n    var entries = a.entries();\n    return b.every(function (v, k) {\n      var entry = entries.next().value;\n      return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n    }) && entries.next().done;\n  }\n\n  var flipped = false;\n\n  if (a.size === undefined) {\n    if (b.size === undefined) {\n      if (typeof a.cacheResult === 'function') {\n        a.cacheResult();\n      }\n    } else {\n      flipped = true;\n      var _ = a;\n      a = b;\n      b = _;\n    }\n  }\n\n  var allEqual = true;\n  var bSize = b.__iterate(function (v, k) {\n    if (\n      notAssociative\n        ? !a.has(v)\n        : flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)\n    ) {\n      allEqual = false;\n      return false;\n    }\n  });\n\n  return allEqual && a.size === bSize;\n}\n\n/**\n * Contributes additional methods to a constructor\n */\nfunction mixin(ctor, methods) {\n  var keyCopier = function (key) {\n    ctor.prototype[key] = methods[key];\n  };\n  Object.keys(methods).forEach(keyCopier);\n  Object.getOwnPropertySymbols &&\n    Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n  return ctor;\n}\n\nvar Set = (function (SetCollection$$1) {\n  function Set(value) {\n    return value === null || value === undefined\n      ? emptySet()\n      : isSet(value) && !isOrdered(value)\n          ? value\n          : emptySet().withMutations(function (set) {\n              var iter = SetCollection$$1(value);\n              assertNotInfinite(iter.size);\n              iter.forEach(function (v) { return set.add(v); });\n            });\n  }\n\n  if ( SetCollection$$1 ) Set.__proto__ = SetCollection$$1;\n  Set.prototype = Object.create( SetCollection$$1 && SetCollection$$1.prototype );\n  Set.prototype.constructor = Set;\n\n  Set.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  Set.fromKeys = function fromKeys (value) {\n    return this(KeyedCollection(value).keySeq());\n  };\n\n  Set.intersect = function intersect (sets) {\n    sets = Collection(sets).toArray();\n    return sets.length\n      ? SetPrototype.intersect.apply(Set(sets.pop()), sets)\n      : emptySet();\n  };\n\n  Set.union = function union (sets) {\n    sets = Collection(sets).toArray();\n    return sets.length\n      ? SetPrototype.union.apply(Set(sets.pop()), sets)\n      : emptySet();\n  };\n\n  Set.prototype.toString = function toString () {\n    return this.__toString('Set {', '}');\n  };\n\n  // @pragma Access\n\n  Set.prototype.has = function has (value) {\n    return this._map.has(value);\n  };\n\n  // @pragma Modification\n\n  Set.prototype.add = function add (value) {\n    return updateSet(this, this._map.set(value, true));\n  };\n\n  Set.prototype.remove = function remove (value) {\n    return updateSet(this, this._map.remove(value));\n  };\n\n  Set.prototype.clear = function clear () {\n    return updateSet(this, this._map.clear());\n  };\n\n  // @pragma Composition\n\n  Set.prototype.union = function union () {\n    var iters = [], len = arguments.length;\n    while ( len-- ) iters[ len ] = arguments[ len ];\n\n    iters = iters.filter(function (x) { return x.size !== 0; });\n    if (iters.length === 0) {\n      return this;\n    }\n    if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n      return this.constructor(iters[0]);\n    }\n    return this.withMutations(function (set) {\n      for (var ii = 0; ii < iters.length; ii++) {\n        SetCollection$$1(iters[ii]).forEach(function (value) { return set.add(value); });\n      }\n    });\n  };\n\n  Set.prototype.intersect = function intersect () {\n    var iters = [], len = arguments.length;\n    while ( len-- ) iters[ len ] = arguments[ len ];\n\n    if (iters.length === 0) {\n      return this;\n    }\n    iters = iters.map(function (iter) { return SetCollection$$1(iter); });\n    var toRemove = [];\n    this.forEach(function (value) {\n      if (!iters.every(function (iter) { return iter.includes(value); })) {\n        toRemove.push(value);\n      }\n    });\n    return this.withMutations(function (set) {\n      toRemove.forEach(function (value) {\n        set.remove(value);\n      });\n    });\n  };\n\n  Set.prototype.subtract = function subtract () {\n    var iters = [], len = arguments.length;\n    while ( len-- ) iters[ len ] = arguments[ len ];\n\n    if (iters.length === 0) {\n      return this;\n    }\n    var toRemove = [];\n    this.forEach(function (value) {\n      if (iters.some(function (iter) { return iter.includes(value); })) {\n        toRemove.push(value);\n      }\n    });\n    return this.withMutations(function (set) {\n      toRemove.forEach(function (value) {\n        set.remove(value);\n      });\n    });\n  };\n\n  Set.prototype.merge = function merge () {\n    return this.union.apply(this, arguments);\n  };\n\n  Set.prototype.mergeWith = function mergeWith (merger) {\n    var iters = [], len = arguments.length - 1;\n    while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n    return this.union.apply(this, iters);\n  };\n\n  Set.prototype.sort = function sort (comparator) {\n    // Late binding\n    return OrderedSet(sortFactory(this, comparator));\n  };\n\n  Set.prototype.sortBy = function sortBy (mapper, comparator) {\n    // Late binding\n    return OrderedSet(sortFactory(this, comparator, mapper));\n  };\n\n  Set.prototype.wasAltered = function wasAltered () {\n    return this._map.wasAltered();\n  };\n\n  Set.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    return this._map.__iterate(function (_, k) { return fn(k, k, this$1); }, reverse);\n  };\n\n  Set.prototype.__iterator = function __iterator (type, reverse) {\n    return this._map.map(function (_, k) { return k; }).__iterator(type, reverse);\n  };\n\n  Set.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    var newMap = this._map.__ensureOwner(ownerID);\n    if (!ownerID) {\n      if (this.size === 0) {\n        return emptySet();\n      }\n      this.__ownerID = ownerID;\n      this._map = newMap;\n      return this;\n    }\n    return this.__make(newMap, ownerID);\n  };\n\n  return Set;\n}(SetCollection));\n\nfunction isSet(maybeSet) {\n  return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);\n}\n\nSet.isSet = isSet;\n\nvar IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\n\nvar SetPrototype = Set.prototype;\nSetPrototype[IS_SET_SENTINEL] = true;\nSetPrototype[DELETE] = SetPrototype.remove;\nSetPrototype.mergeDeep = SetPrototype.merge;\nSetPrototype.mergeDeepWith = SetPrototype.mergeWith;\nSetPrototype.withMutations = MapPrototype.withMutations;\nSetPrototype.asMutable = MapPrototype.asMutable;\nSetPrototype.asImmutable = MapPrototype.asImmutable;\n\nSetPrototype.__empty = emptySet;\nSetPrototype.__make = makeSet;\n\nfunction updateSet(set, newMap) {\n  if (set.__ownerID) {\n    set.size = newMap.size;\n    set._map = newMap;\n    return set;\n  }\n  return newMap === set._map\n    ? set\n    : newMap.size === 0 ? set.__empty() : set.__make(newMap);\n}\n\nfunction makeSet(map, ownerID) {\n  var set = Object.create(SetPrototype);\n  set.size = map ? map.size : 0;\n  set._map = map;\n  set.__ownerID = ownerID;\n  return set;\n}\n\nvar EMPTY_SET;\nfunction emptySet() {\n  return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n}\n\n/**\n * Returns a lazy seq of nums from start (inclusive) to end\n * (exclusive), by step, where start defaults to 0, step to 1, and end to\n * infinity. When start is equal to end, returns empty list.\n */\nvar Range = (function (IndexedSeq$$1) {\n  function Range(start, end, step) {\n    if (!(this instanceof Range)) {\n      return new Range(start, end, step);\n    }\n    invariant(step !== 0, 'Cannot step a Range by 0');\n    start = start || 0;\n    if (end === undefined) {\n      end = Infinity;\n    }\n    step = step === undefined ? 1 : Math.abs(step);\n    if (end < start) {\n      step = -step;\n    }\n    this._start = start;\n    this._end = end;\n    this._step = step;\n    this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n    if (this.size === 0) {\n      if (EMPTY_RANGE) {\n        return EMPTY_RANGE;\n      }\n      EMPTY_RANGE = this;\n    }\n  }\n\n  if ( IndexedSeq$$1 ) Range.__proto__ = IndexedSeq$$1;\n  Range.prototype = Object.create( IndexedSeq$$1 && IndexedSeq$$1.prototype );\n  Range.prototype.constructor = Range;\n\n  Range.prototype.toString = function toString () {\n    if (this.size === 0) {\n      return 'Range []';\n    }\n    return 'Range [ ' +\n      this._start +\n      '...' +\n      this._end +\n      (this._step !== 1 ? ' by ' + this._step : '') +\n      ' ]';\n  };\n\n  Range.prototype.get = function get (index, notSetValue) {\n    return this.has(index)\n      ? this._start + wrapIndex(this, index) * this._step\n      : notSetValue;\n  };\n\n  Range.prototype.includes = function includes (searchValue) {\n    var possibleIndex = (searchValue - this._start) / this._step;\n    return possibleIndex >= 0 &&\n      possibleIndex < this.size &&\n      possibleIndex === Math.floor(possibleIndex);\n  };\n\n  Range.prototype.slice = function slice (begin, end) {\n    if (wholeSlice(begin, end, this.size)) {\n      return this;\n    }\n    begin = resolveBegin(begin, this.size);\n    end = resolveEnd(end, this.size);\n    if (end <= begin) {\n      return new Range(0, 0);\n    }\n    return new Range(\n      this.get(begin, this._end),\n      this.get(end, this._end),\n      this._step\n    );\n  };\n\n  Range.prototype.indexOf = function indexOf (searchValue) {\n    var offsetValue = searchValue - this._start;\n    if (offsetValue % this._step === 0) {\n      var index = offsetValue / this._step;\n      if (index >= 0 && index < this.size) {\n        return index;\n      }\n    }\n    return -1;\n  };\n\n  Range.prototype.lastIndexOf = function lastIndexOf (searchValue) {\n    return this.indexOf(searchValue);\n  };\n\n  Range.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    var size = this.size;\n    var step = this._step;\n    var value = reverse ? this._start + (size - 1) * step : this._start;\n    var i = 0;\n    while (i !== size) {\n      if (fn(value, reverse ? size - ++i : i++, this$1) === false) {\n        break;\n      }\n      value += reverse ? -step : step;\n    }\n    return i;\n  };\n\n  Range.prototype.__iterator = function __iterator (type, reverse) {\n    var size = this.size;\n    var step = this._step;\n    var value = reverse ? this._start + (size - 1) * step : this._start;\n    var i = 0;\n    return new Iterator(function () {\n      if (i === size) {\n        return iteratorDone();\n      }\n      var v = value;\n      value += reverse ? -step : step;\n      return iteratorValue(type, reverse ? size - ++i : i++, v);\n    });\n  };\n\n  Range.prototype.equals = function equals (other) {\n    return other instanceof Range\n      ? this._start === other._start &&\n          this._end === other._end &&\n          this._step === other._step\n      : deepEqual(this, other);\n  };\n\n  return Range;\n}(IndexedSeq));\n\nvar EMPTY_RANGE;\n\n// Note: all of these methods are deprecated.\nCollection.isIterable = isCollection;\nCollection.isKeyed = isKeyed;\nCollection.isIndexed = isIndexed;\nCollection.isAssociative = isAssociative;\nCollection.isOrdered = isOrdered;\n\nCollection.Iterator = Iterator;\n\nmixin(Collection, {\n  // ### Conversion to other types\n\n  toArray: function toArray() {\n    assertNotInfinite(this.size);\n    var array = new Array(this.size || 0);\n    this.valueSeq().__iterate(function (v, i) {\n      array[i] = v;\n    });\n    return array;\n  },\n\n  toIndexedSeq: function toIndexedSeq() {\n    return new ToIndexedSequence(this);\n  },\n\n  toJS: function toJS$1() {\n    return this.toSeq().map(toJS).toJSON();\n  },\n\n  toKeyedSeq: function toKeyedSeq() {\n    return new ToKeyedSequence(this, true);\n  },\n\n  toMap: function toMap() {\n    // Use Late Binding here to solve the circular dependency.\n    return Map(this.toKeyedSeq());\n  },\n\n  toObject: function toObject() {\n    assertNotInfinite(this.size);\n    var object = {};\n    this.__iterate(function (v, k) {\n      object[k] = v;\n    });\n    return object;\n  },\n\n  toOrderedMap: function toOrderedMap() {\n    // Use Late Binding here to solve the circular dependency.\n    return OrderedMap(this.toKeyedSeq());\n  },\n\n  toOrderedSet: function toOrderedSet() {\n    // Use Late Binding here to solve the circular dependency.\n    return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n  },\n\n  toSet: function toSet() {\n    // Use Late Binding here to solve the circular dependency.\n    return Set(isKeyed(this) ? this.valueSeq() : this);\n  },\n\n  toSetSeq: function toSetSeq() {\n    return new ToSetSequence(this);\n  },\n\n  toSeq: function toSeq() {\n    return isIndexed(this)\n      ? this.toIndexedSeq()\n      : isKeyed(this) ? this.toKeyedSeq() : this.toSetSeq();\n  },\n\n  toStack: function toStack() {\n    // Use Late Binding here to solve the circular dependency.\n    return Stack(isKeyed(this) ? this.valueSeq() : this);\n  },\n\n  toList: function toList() {\n    // Use Late Binding here to solve the circular dependency.\n    return List(isKeyed(this) ? this.valueSeq() : this);\n  },\n\n  // ### Common JavaScript methods and properties\n\n  toString: function toString() {\n    return '[Collection]';\n  },\n\n  __toString: function __toString(head, tail) {\n    if (this.size === 0) {\n      return head + tail;\n    }\n    return head +\n      ' ' +\n      this.toSeq().map(this.__toStringMapper).join(', ') +\n      ' ' +\n      tail;\n  },\n\n  // ### ES6 Collection methods (ES6 Array and Map)\n\n  concat: function concat() {\n    var values = [], len = arguments.length;\n    while ( len-- ) values[ len ] = arguments[ len ];\n\n    return reify(this, concatFactory(this, values));\n  },\n\n  includes: function includes(searchValue) {\n    return this.some(function (value) { return is(value, searchValue); });\n  },\n\n  entries: function entries() {\n    return this.__iterator(ITERATE_ENTRIES);\n  },\n\n  every: function every(predicate, context) {\n    assertNotInfinite(this.size);\n    var returnValue = true;\n    this.__iterate(function (v, k, c) {\n      if (!predicate.call(context, v, k, c)) {\n        returnValue = false;\n        return false;\n      }\n    });\n    return returnValue;\n  },\n\n  filter: function filter(predicate, context) {\n    return reify(this, filterFactory(this, predicate, context, true));\n  },\n\n  find: function find(predicate, context, notSetValue) {\n    var entry = this.findEntry(predicate, context);\n    return entry ? entry[1] : notSetValue;\n  },\n\n  forEach: function forEach(sideEffect, context) {\n    assertNotInfinite(this.size);\n    return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n  },\n\n  join: function join(separator) {\n    assertNotInfinite(this.size);\n    separator = separator !== undefined ? '' + separator : ',';\n    var joined = '';\n    var isFirst = true;\n    this.__iterate(function (v) {\n      isFirst ? (isFirst = false) : (joined += separator);\n      joined += v !== null && v !== undefined ? v.toString() : '';\n    });\n    return joined;\n  },\n\n  keys: function keys() {\n    return this.__iterator(ITERATE_KEYS);\n  },\n\n  map: function map(mapper, context) {\n    return reify(this, mapFactory(this, mapper, context));\n  },\n\n  reduce: function reduce$1(reducer, initialReduction, context) {\n    return reduce(\n      this,\n      reducer,\n      initialReduction,\n      context,\n      arguments.length < 2,\n      false\n    );\n  },\n\n  reduceRight: function reduceRight(reducer, initialReduction, context) {\n    return reduce(\n      this,\n      reducer,\n      initialReduction,\n      context,\n      arguments.length < 2,\n      true\n    );\n  },\n\n  reverse: function reverse() {\n    return reify(this, reverseFactory(this, true));\n  },\n\n  slice: function slice(begin, end) {\n    return reify(this, sliceFactory(this, begin, end, true));\n  },\n\n  some: function some(predicate, context) {\n    return !this.every(not(predicate), context);\n  },\n\n  sort: function sort(comparator) {\n    return reify(this, sortFactory(this, comparator));\n  },\n\n  values: function values() {\n    return this.__iterator(ITERATE_VALUES);\n  },\n\n  // ### More sequential methods\n\n  butLast: function butLast() {\n    return this.slice(0, -1);\n  },\n\n  isEmpty: function isEmpty() {\n    return this.size !== undefined ? this.size === 0 : !this.some(function () { return true; });\n  },\n\n  count: function count(predicate, context) {\n    return ensureSize(\n      predicate ? this.toSeq().filter(predicate, context) : this\n    );\n  },\n\n  countBy: function countBy(grouper, context) {\n    return countByFactory(this, grouper, context);\n  },\n\n  equals: function equals(other) {\n    return deepEqual(this, other);\n  },\n\n  entrySeq: function entrySeq() {\n    var collection = this;\n    if (collection._cache) {\n      // We cache as an entries array, so we can just return the cache!\n      return new ArraySeq(collection._cache);\n    }\n    var entriesSequence = collection.toSeq().map(entryMapper).toIndexedSeq();\n    entriesSequence.fromEntrySeq = function () { return collection.toSeq(); };\n\n    // Entries are plain Array, which do not define toJS, so it must\n    // manually converts keys and values before conversion.\n    entriesSequence.toJS = function() {\n      return this.map(function (entry) { return [toJS(entry[0]), toJS(entry[1])]; }).toJSON();\n    };\n\n    return entriesSequence;\n  },\n\n  filterNot: function filterNot(predicate, context) {\n    return this.filter(not(predicate), context);\n  },\n\n  findEntry: function findEntry(predicate, context, notSetValue) {\n    var found = notSetValue;\n    this.__iterate(function (v, k, c) {\n      if (predicate.call(context, v, k, c)) {\n        found = [k, v];\n        return false;\n      }\n    });\n    return found;\n  },\n\n  findKey: function findKey(predicate, context) {\n    var entry = this.findEntry(predicate, context);\n    return entry && entry[0];\n  },\n\n  findLast: function findLast(predicate, context, notSetValue) {\n    return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n  },\n\n  findLastEntry: function findLastEntry(predicate, context, notSetValue) {\n    return this.toKeyedSeq()\n      .reverse()\n      .findEntry(predicate, context, notSetValue);\n  },\n\n  findLastKey: function findLastKey(predicate, context) {\n    return this.toKeyedSeq().reverse().findKey(predicate, context);\n  },\n\n  first: function first() {\n    return this.find(returnTrue);\n  },\n\n  flatMap: function flatMap(mapper, context) {\n    return reify(this, flatMapFactory(this, mapper, context));\n  },\n\n  flatten: function flatten(depth) {\n    return reify(this, flattenFactory(this, depth, true));\n  },\n\n  fromEntrySeq: function fromEntrySeq() {\n    return new FromEntriesSequence(this);\n  },\n\n  get: function get(searchKey, notSetValue) {\n    return this.find(function (_, key) { return is(key, searchKey); }, undefined, notSetValue);\n  },\n\n  getIn: function getIn(searchKeyPath, notSetValue) {\n    var nested = this;\n    var keyPath = coerceKeyPath(searchKeyPath);\n    var i = 0;\n    while (i !== keyPath.length) {\n      if (!nested || !nested.get) {\n        throw new TypeError(\n          'Invalid keyPath: Value at [' +\n            keyPath.slice(0, i).map(quoteString) +\n            '] does not have a .get() method: ' +\n            nested\n        );\n      }\n      nested = nested.get(keyPath[i++], NOT_SET);\n      if (nested === NOT_SET) {\n        return notSetValue;\n      }\n    }\n    return nested;\n    // var step;\n    // while (!(step = iter.next()).done) {\n    //   var key = step.value;\n    //   nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;\n    //   if (nested === NOT_SET) {\n    //     return notSetValue;\n    //   }\n    // }\n    // return nested;\n  },\n\n  groupBy: function groupBy(grouper, context) {\n    return groupByFactory(this, grouper, context);\n  },\n\n  has: function has(searchKey) {\n    return this.get(searchKey, NOT_SET) !== NOT_SET;\n  },\n\n  hasIn: function hasIn(searchKeyPath) {\n    return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;\n  },\n\n  isSubset: function isSubset(iter) {\n    iter = typeof iter.includes === 'function' ? iter : Collection(iter);\n    return this.every(function (value) { return iter.includes(value); });\n  },\n\n  isSuperset: function isSuperset(iter) {\n    iter = typeof iter.isSubset === 'function' ? iter : Collection(iter);\n    return iter.isSubset(this);\n  },\n\n  keyOf: function keyOf(searchValue) {\n    return this.findKey(function (value) { return is(value, searchValue); });\n  },\n\n  keySeq: function keySeq() {\n    return this.toSeq().map(keyMapper).toIndexedSeq();\n  },\n\n  last: function last() {\n    return this.toSeq().reverse().first();\n  },\n\n  lastKeyOf: function lastKeyOf(searchValue) {\n    return this.toKeyedSeq().reverse().keyOf(searchValue);\n  },\n\n  max: function max(comparator) {\n    return maxFactory(this, comparator);\n  },\n\n  maxBy: function maxBy(mapper, comparator) {\n    return maxFactory(this, comparator, mapper);\n  },\n\n  min: function min(comparator) {\n    return maxFactory(\n      this,\n      comparator ? neg(comparator) : defaultNegComparator\n    );\n  },\n\n  minBy: function minBy(mapper, comparator) {\n    return maxFactory(\n      this,\n      comparator ? neg(comparator) : defaultNegComparator,\n      mapper\n    );\n  },\n\n  rest: function rest() {\n    return this.slice(1);\n  },\n\n  skip: function skip(amount) {\n    return amount === 0 ? this : this.slice(Math.max(0, amount));\n  },\n\n  skipLast: function skipLast(amount) {\n    return amount === 0 ? this : this.slice(0, -Math.max(0, amount));\n  },\n\n  skipWhile: function skipWhile(predicate, context) {\n    return reify(this, skipWhileFactory(this, predicate, context, true));\n  },\n\n  skipUntil: function skipUntil(predicate, context) {\n    return this.skipWhile(not(predicate), context);\n  },\n\n  sortBy: function sortBy(mapper, comparator) {\n    return reify(this, sortFactory(this, comparator, mapper));\n  },\n\n  take: function take(amount) {\n    return this.slice(0, Math.max(0, amount));\n  },\n\n  takeLast: function takeLast(amount) {\n    return this.slice(-Math.max(0, amount));\n  },\n\n  takeWhile: function takeWhile(predicate, context) {\n    return reify(this, takeWhileFactory(this, predicate, context));\n  },\n\n  takeUntil: function takeUntil(predicate, context) {\n    return this.takeWhile(not(predicate), context);\n  },\n\n  update: function update(fn) {\n    return fn(this);\n  },\n\n  valueSeq: function valueSeq() {\n    return this.toIndexedSeq();\n  },\n\n  // ### Hashable Object\n\n  hashCode: function hashCode() {\n    return this.__hash || (this.__hash = hashCollection(this));\n  }\n\n  // ### Internal\n\n  // abstract __iterate(fn, reverse)\n\n  // abstract __iterator(type, reverse)\n});\n\nvar CollectionPrototype = Collection.prototype;\nCollectionPrototype[IS_ITERABLE_SENTINEL] = true;\nCollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.values;\nCollectionPrototype.toJSON = CollectionPrototype.toArray;\nCollectionPrototype.__toStringMapper = quoteString;\nCollectionPrototype.inspect = (CollectionPrototype.toSource = function() {\n  return this.toString();\n});\nCollectionPrototype.chain = CollectionPrototype.flatMap;\nCollectionPrototype.contains = CollectionPrototype.includes;\n\nmixin(KeyedCollection, {\n  // ### More sequential methods\n\n  flip: function flip() {\n    return reify(this, flipFactory(this));\n  },\n\n  mapEntries: function mapEntries(mapper, context) {\n    var this$1 = this;\n\n    var iterations = 0;\n    return reify(\n      this,\n      this.toSeq()\n        .map(function (v, k) { return mapper.call(context, [k, v], iterations++, this$1); })\n        .fromEntrySeq()\n    );\n  },\n\n  mapKeys: function mapKeys(mapper, context) {\n    var this$1 = this;\n\n    return reify(\n      this,\n      this.toSeq().flip().map(function (k, v) { return mapper.call(context, k, v, this$1); }).flip()\n    );\n  }\n});\n\nvar KeyedCollectionPrototype = KeyedCollection.prototype;\nKeyedCollectionPrototype[IS_KEYED_SENTINEL] = true;\nKeyedCollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.entries;\nKeyedCollectionPrototype.toJSON = CollectionPrototype.toObject;\nKeyedCollectionPrototype.__toStringMapper = function (v, k) { return quoteString(k) + ': ' + quoteString(v); };\n\nmixin(IndexedCollection, {\n  // ### Conversion to other types\n\n  toKeyedSeq: function toKeyedSeq() {\n    return new ToKeyedSequence(this, false);\n  },\n\n  // ### ES6 Collection methods (ES6 Array and Map)\n\n  filter: function filter(predicate, context) {\n    return reify(this, filterFactory(this, predicate, context, false));\n  },\n\n  findIndex: function findIndex(predicate, context) {\n    var entry = this.findEntry(predicate, context);\n    return entry ? entry[0] : -1;\n  },\n\n  indexOf: function indexOf(searchValue) {\n    var key = this.keyOf(searchValue);\n    return key === undefined ? -1 : key;\n  },\n\n  lastIndexOf: function lastIndexOf(searchValue) {\n    var key = this.lastKeyOf(searchValue);\n    return key === undefined ? -1 : key;\n  },\n\n  reverse: function reverse() {\n    return reify(this, reverseFactory(this, false));\n  },\n\n  slice: function slice(begin, end) {\n    return reify(this, sliceFactory(this, begin, end, false));\n  },\n\n  splice: function splice(index, removeNum /*, ...values*/) {\n    var numArgs = arguments.length;\n    removeNum = Math.max(removeNum || 0, 0);\n    if (numArgs === 0 || (numArgs === 2 && !removeNum)) {\n      return this;\n    }\n    // If index is negative, it should resolve relative to the size of the\n    // collection. However size may be expensive to compute if not cached, so\n    // only call count() if the number is in fact negative.\n    index = resolveBegin(index, index < 0 ? this.count() : this.size);\n    var spliced = this.slice(0, index);\n    return reify(\n      this,\n      numArgs === 1\n        ? spliced\n        : spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))\n    );\n  },\n\n  // ### More collection methods\n\n  findLastIndex: function findLastIndex(predicate, context) {\n    var entry = this.findLastEntry(predicate, context);\n    return entry ? entry[0] : -1;\n  },\n\n  first: function first() {\n    return this.get(0);\n  },\n\n  flatten: function flatten(depth) {\n    return reify(this, flattenFactory(this, depth, false));\n  },\n\n  get: function get(index, notSetValue) {\n    index = wrapIndex(this, index);\n    return index < 0 ||\n      (this.size === Infinity || (this.size !== undefined && index > this.size))\n      ? notSetValue\n      : this.find(function (_, key) { return key === index; }, undefined, notSetValue);\n  },\n\n  has: function has(index) {\n    index = wrapIndex(this, index);\n    return index >= 0 &&\n      (this.size !== undefined\n        ? this.size === Infinity || index < this.size\n        : this.indexOf(index) !== -1);\n  },\n\n  interpose: function interpose(separator) {\n    return reify(this, interposeFactory(this, separator));\n  },\n\n  interleave: function interleave(/*...collections*/) {\n    var collections = [this].concat(arrCopy(arguments));\n    var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, collections);\n    var interleaved = zipped.flatten(true);\n    if (zipped.size) {\n      interleaved.size = zipped.size * collections.length;\n    }\n    return reify(this, interleaved);\n  },\n\n  keySeq: function keySeq() {\n    return Range(0, this.size);\n  },\n\n  last: function last() {\n    return this.get(-1);\n  },\n\n  skipWhile: function skipWhile(predicate, context) {\n    return reify(this, skipWhileFactory(this, predicate, context, false));\n  },\n\n  zip: function zip(/*, ...collections */) {\n    var collections = [this].concat(arrCopy(arguments));\n    return reify(this, zipWithFactory(this, defaultZipper, collections));\n  },\n\n  zipWith: function zipWith(zipper /*, ...collections */) {\n    var collections = arrCopy(arguments);\n    collections[0] = this;\n    return reify(this, zipWithFactory(this, zipper, collections));\n  }\n});\n\nvar IndexedCollectionPrototype = IndexedCollection.prototype;\nIndexedCollectionPrototype[IS_INDEXED_SENTINEL] = true;\nIndexedCollectionPrototype[IS_ORDERED_SENTINEL] = true;\n\nmixin(SetCollection, {\n  // ### ES6 Collection methods (ES6 Array and Map)\n\n  get: function get(value, notSetValue) {\n    return this.has(value) ? value : notSetValue;\n  },\n\n  includes: function includes(value) {\n    return this.has(value);\n  },\n\n  // ### More sequential methods\n\n  keySeq: function keySeq() {\n    return this.valueSeq();\n  }\n});\n\nSetCollection.prototype.has = CollectionPrototype.includes;\nSetCollection.prototype.contains = SetCollection.prototype.includes;\n\n// Mixin subclasses\n\nmixin(KeyedSeq, KeyedCollection.prototype);\nmixin(IndexedSeq, IndexedCollection.prototype);\nmixin(SetSeq, SetCollection.prototype);\n\n// #pragma Helper functions\n\nfunction reduce(collection, reducer, reduction, context, useFirst, reverse) {\n  assertNotInfinite(collection.size);\n  collection.__iterate(\n    function (v, k, c) {\n      if (useFirst) {\n        useFirst = false;\n        reduction = v;\n      } else {\n        reduction = reducer.call(context, reduction, v, k, c);\n      }\n    },\n    reverse\n  );\n  return reduction;\n}\n\nfunction keyMapper(v, k) {\n  return k;\n}\n\nfunction entryMapper(v, k) {\n  return [k, v];\n}\n\nfunction toJS(value) {\n  return value && typeof value.toJS === 'function' ? value.toJS() : value;\n}\n\nfunction not(predicate) {\n  return function() {\n    return !predicate.apply(this, arguments);\n  };\n}\n\nfunction neg(predicate) {\n  return function() {\n    return -predicate.apply(this, arguments);\n  };\n}\n\nfunction defaultZipper() {\n  return arrCopy(arguments);\n}\n\nfunction defaultNegComparator(a, b) {\n  return a < b ? 1 : a > b ? -1 : 0;\n}\n\nfunction hashCollection(collection) {\n  if (collection.size === Infinity) {\n    return 0;\n  }\n  var ordered = isOrdered(collection);\n  var keyed = isKeyed(collection);\n  var h = ordered ? 1 : 0;\n  var size = collection.__iterate(\n    keyed\n      ? ordered\n          ? function (v, k) {\n              h = 31 * h + hashMerge(hash(v), hash(k)) | 0;\n            }\n          : function (v, k) {\n              h = h + hashMerge(hash(v), hash(k)) | 0;\n            }\n      : ordered\n          ? function (v) {\n              h = 31 * h + hash(v) | 0;\n            }\n          : function (v) {\n              h = h + hash(v) | 0;\n            }\n  );\n  return murmurHashOfSize(size, h);\n}\n\nfunction murmurHashOfSize(size, h) {\n  h = imul(h, 0xcc9e2d51);\n  h = imul(h << 15 | h >>> -15, 0x1b873593);\n  h = imul(h << 13 | h >>> -13, 5);\n  h = (h + 0xe6546b64 | 0) ^ size;\n  h = imul(h ^ h >>> 16, 0x85ebca6b);\n  h = imul(h ^ h >>> 13, 0xc2b2ae35);\n  h = smi(h ^ h >>> 16);\n  return h;\n}\n\nfunction hashMerge(a, b) {\n  return a ^ b + 0x9e3779b9 + (a << 6) + (a >> 2) | 0; // int\n}\n\nvar OrderedSet = (function (Set$$1) {\n  function OrderedSet(value) {\n    return value === null || value === undefined\n      ? emptyOrderedSet()\n      : isOrderedSet(value)\n          ? value\n          : emptyOrderedSet().withMutations(function (set) {\n              var iter = SetCollection(value);\n              assertNotInfinite(iter.size);\n              iter.forEach(function (v) { return set.add(v); });\n            });\n  }\n\n  if ( Set$$1 ) OrderedSet.__proto__ = Set$$1;\n  OrderedSet.prototype = Object.create( Set$$1 && Set$$1.prototype );\n  OrderedSet.prototype.constructor = OrderedSet;\n\n  OrderedSet.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  OrderedSet.fromKeys = function fromKeys (value) {\n    return this(KeyedCollection(value).keySeq());\n  };\n\n  OrderedSet.prototype.toString = function toString () {\n    return this.__toString('OrderedSet {', '}');\n  };\n\n  return OrderedSet;\n}(Set));\n\nfunction isOrderedSet(maybeOrderedSet) {\n  return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n}\n\nOrderedSet.isOrderedSet = isOrderedSet;\n\nvar OrderedSetPrototype = OrderedSet.prototype;\nOrderedSetPrototype[IS_ORDERED_SENTINEL] = true;\nOrderedSetPrototype.zip = IndexedCollectionPrototype.zip;\nOrderedSetPrototype.zipWith = IndexedCollectionPrototype.zipWith;\n\nOrderedSetPrototype.__empty = emptyOrderedSet;\nOrderedSetPrototype.__make = makeOrderedSet;\n\nfunction makeOrderedSet(map, ownerID) {\n  var set = Object.create(OrderedSetPrototype);\n  set.size = map ? map.size : 0;\n  set._map = map;\n  set.__ownerID = ownerID;\n  return set;\n}\n\nvar EMPTY_ORDERED_SET;\nfunction emptyOrderedSet() {\n  return EMPTY_ORDERED_SET ||\n    (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));\n}\n\nvar Record = function Record(defaultValues, name) {\n  var hasInitialized;\n\n  var RecordType = function Record(values) {\n    var this$1 = this;\n\n    if (values instanceof RecordType) {\n      return values;\n    }\n    if (!(this instanceof RecordType)) {\n      return new RecordType(values);\n    }\n    if (!hasInitialized) {\n      hasInitialized = true;\n      var keys = Object.keys(defaultValues);\n      var indices = (RecordTypePrototype._indices = {});\n      RecordTypePrototype._name = name;\n      RecordTypePrototype._keys = keys;\n      RecordTypePrototype._defaultValues = defaultValues;\n      for (var i = 0; i < keys.length; i++) {\n        var propName = keys[i];\n        indices[propName] = i;\n        if (RecordTypePrototype[propName]) {\n          /* eslint-disable no-console */\n          typeof console === 'object' &&\n            console.warn &&\n            console.warn(\n              'Cannot define ' +\n                recordName(this$1) +\n                ' with property \"' +\n                propName +\n                '\" since that property name is part of the Record API.'\n            );\n          /* eslint-enable no-console */\n        } else {\n          setProp(RecordTypePrototype, propName);\n        }\n      }\n    }\n    this.__ownerID = undefined;\n    this._values = List().withMutations(function (l) {\n      l.setSize(this$1._keys.length);\n      KeyedCollection(values).forEach(function (v, k) {\n        l.set(this$1._indices[k], v === this$1._defaultValues[k] ? undefined : v);\n      });\n    });\n  };\n\n  var RecordTypePrototype = (RecordType.prototype = Object.create(\n    RecordPrototype\n  ));\n  RecordTypePrototype.constructor = RecordType;\n\n  return RecordType;\n};\n\nRecord.prototype.toString = function toString () {\n    var this$1 = this;\n\n  var str = recordName(this) + ' { ';\n  var keys = this._keys;\n  var k;\n  for (var i = 0, l = keys.length; i !== l; i++) {\n    k = keys[i];\n    str += (i ? ', ' : '') + k + ': ' + quoteString(this$1.get(k));\n  }\n  return str + ' }';\n};\n\nRecord.prototype.equals = function equals (other) {\n  return this === other ||\n    (this._keys === other._keys && recordSeq(this).equals(recordSeq(other)));\n};\n\nRecord.prototype.hashCode = function hashCode () {\n  return recordSeq(this).hashCode();\n};\n\n// @pragma Access\n\nRecord.prototype.has = function has (k) {\n  return this._indices.hasOwnProperty(k);\n};\n\nRecord.prototype.get = function get (k, notSetValue) {\n  if (!this.has(k)) {\n    return notSetValue;\n  }\n  var index = this._indices[k];\n  var value = this._values.get(index);\n  return value === undefined ? this._defaultValues[k] : value;\n};\n\n// @pragma Modification\n\nRecord.prototype.set = function set (k, v) {\n  if (this.has(k)) {\n    var newValues = this._values.set(\n      this._indices[k],\n      v === this._defaultValues[k] ? undefined : v\n    );\n    if (newValues !== this._values && !this.__ownerID) {\n      return makeRecord(this, newValues);\n    }\n  }\n  return this;\n};\n\nRecord.prototype.remove = function remove (k) {\n  return this.set(k);\n};\n\nRecord.prototype.clear = function clear () {\n  var newValues = this._values.clear().setSize(this._keys.length);\n  return this.__ownerID ? this : makeRecord(this, newValues);\n};\n\nRecord.prototype.wasAltered = function wasAltered () {\n  return this._values.wasAltered();\n};\n\nRecord.prototype.toSeq = function toSeq () {\n  return recordSeq(this);\n};\n\nRecord.prototype.toJS = function toJS () {\n  return recordSeq(this).toJS();\n};\n\nRecord.prototype.__iterator = function __iterator (type, reverse) {\n  return recordSeq(this).__iterator(type, reverse);\n};\n\nRecord.prototype.__iterate = function __iterate (fn, reverse) {\n  return recordSeq(this).__iterate(fn, reverse);\n};\n\nRecord.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n  if (ownerID === this.__ownerID) {\n    return this;\n  }\n  var newValues = this._values.__ensureOwner(ownerID);\n  if (!ownerID) {\n    this.__ownerID = ownerID;\n    this._values = newValues;\n    return this;\n  }\n  return makeRecord(this, newValues, ownerID);\n};\n\nRecord.isRecord = isRecord;\nRecord.getDescriptiveName = recordName;\nvar RecordPrototype = Record.prototype;\nRecordPrototype[IS_RECORD_SENTINEL] = true;\nRecordPrototype[DELETE] = RecordPrototype.remove;\nRecordPrototype.getIn = CollectionPrototype.getIn;\nRecordPrototype.hasIn = CollectionPrototype.hasIn;\nRecordPrototype.merge = MapPrototype.merge;\nRecordPrototype.mergeWith = MapPrototype.mergeWith;\nRecordPrototype.mergeIn = MapPrototype.mergeIn;\nRecordPrototype.mergeDeep = MapPrototype.mergeDeep;\nRecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;\nRecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\nRecordPrototype.setIn = MapPrototype.setIn;\nRecordPrototype.update = MapPrototype.update;\nRecordPrototype.updateIn = MapPrototype.updateIn;\nRecordPrototype.withMutations = MapPrototype.withMutations;\nRecordPrototype.asMutable = MapPrototype.asMutable;\nRecordPrototype.asImmutable = MapPrototype.asImmutable;\nRecordPrototype[ITERATOR_SYMBOL] = CollectionPrototype.entries;\nRecordPrototype.toJSON = (RecordPrototype.toObject = CollectionPrototype.toObject);\nRecordPrototype.inspect = (RecordPrototype.toSource = CollectionPrototype.toSource);\n\nfunction makeRecord(likeRecord, values, ownerID) {\n  var record = Object.create(Object.getPrototypeOf(likeRecord));\n  record._values = values;\n  record.__ownerID = ownerID;\n  return record;\n}\n\nfunction recordName(record) {\n  return record._name || record.constructor.name || 'Record';\n}\n\nfunction recordSeq(record) {\n  return keyedSeqFromValue(record._keys.map(function (k) { return [k, record.get(k)]; }));\n}\n\nfunction setProp(prototype, name) {\n  try {\n    Object.defineProperty(prototype, name, {\n      get: function() {\n        return this.get(name);\n      },\n      set: function(value) {\n        invariant(this.__ownerID, 'Cannot set on an immutable record.');\n        this.set(name, value);\n      }\n    });\n  } catch (error) {\n    // Object.defineProperty failed. Probably IE8.\n  }\n}\n\n/**\n * Returns a lazy Seq of `value` repeated `times` times. When `times` is\n * undefined, returns an infinite sequence of `value`.\n */\nvar Repeat = (function (IndexedSeq$$1) {\n  function Repeat(value, times) {\n    if (!(this instanceof Repeat)) {\n      return new Repeat(value, times);\n    }\n    this._value = value;\n    this.size = times === undefined ? Infinity : Math.max(0, times);\n    if (this.size === 0) {\n      if (EMPTY_REPEAT) {\n        return EMPTY_REPEAT;\n      }\n      EMPTY_REPEAT = this;\n    }\n  }\n\n  if ( IndexedSeq$$1 ) Repeat.__proto__ = IndexedSeq$$1;\n  Repeat.prototype = Object.create( IndexedSeq$$1 && IndexedSeq$$1.prototype );\n  Repeat.prototype.constructor = Repeat;\n\n  Repeat.prototype.toString = function toString () {\n    if (this.size === 0) {\n      return 'Repeat []';\n    }\n    return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';\n  };\n\n  Repeat.prototype.get = function get (index, notSetValue) {\n    return this.has(index) ? this._value : notSetValue;\n  };\n\n  Repeat.prototype.includes = function includes (searchValue) {\n    return is(this._value, searchValue);\n  };\n\n  Repeat.prototype.slice = function slice (begin, end) {\n    var size = this.size;\n    return wholeSlice(begin, end, size)\n      ? this\n      : new Repeat(\n          this._value,\n          resolveEnd(end, size) - resolveBegin(begin, size)\n        );\n  };\n\n  Repeat.prototype.reverse = function reverse () {\n    return this;\n  };\n\n  Repeat.prototype.indexOf = function indexOf (searchValue) {\n    if (is(this._value, searchValue)) {\n      return 0;\n    }\n    return -1;\n  };\n\n  Repeat.prototype.lastIndexOf = function lastIndexOf (searchValue) {\n    if (is(this._value, searchValue)) {\n      return this.size;\n    }\n    return -1;\n  };\n\n  Repeat.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    var size = this.size;\n    var i = 0;\n    while (i !== size) {\n      if (fn(this$1._value, reverse ? size - ++i : i++, this$1) === false) {\n        break;\n      }\n    }\n    return i;\n  };\n\n  Repeat.prototype.__iterator = function __iterator (type, reverse) {\n    var this$1 = this;\n\n    var size = this.size;\n    var i = 0;\n    return new Iterator(\n      function () { return i === size\n          ? iteratorDone()\n          : iteratorValue(type, reverse ? size - ++i : i++, this$1._value); }\n    );\n  };\n\n  Repeat.prototype.equals = function equals (other) {\n    return other instanceof Repeat\n      ? is(this._value, other._value)\n      : deepEqual(other);\n  };\n\n  return Repeat;\n}(IndexedSeq));\n\nvar EMPTY_REPEAT;\n\nvar Immutable = {\n  Collection: Collection,\n  // Note: Iterable is deprecated\n  Iterable: Collection,\n\n  Seq: Seq,\n  Map: Map,\n  OrderedMap: OrderedMap,\n  List: List,\n  Stack: Stack,\n  Set: Set,\n  OrderedSet: OrderedSet,\n\n  Record: Record,\n  Range: Range,\n  Repeat: Repeat,\n\n  is: is,\n  fromJS: fromJS,\n  hash: hash,\n\n  isImmutable: isImmutable,\n  isCollection: isCollection,\n  isKeyed: isKeyed,\n  isIndexed: isIndexed,\n  isAssociative: isAssociative,\n  isOrdered: isOrdered,\n  isValueObject: isValueObject\n};\n\n// Note: Iterable is deprecated\nvar Iterable = Collection;\n\nexports['default'] = Immutable;\nexports.Collection = Collection;\nexports.Iterable = Iterable;\nexports.Seq = Seq;\nexports.Map = Map;\nexports.OrderedMap = OrderedMap;\nexports.List = List;\nexports.Stack = Stack;\nexports.Set = Set;\nexports.OrderedSet = OrderedSet;\nexports.Record = Record;\nexports.Range = Range;\nexports.Repeat = Repeat;\nexports.is = is;\nexports.fromJS = fromJS;\nexports.hash = hash;\nexports.isImmutable = isImmutable;\nexports.isCollection = isCollection;\nexports.isKeyed = isKeyed;\nexports.isIndexed = isIndexed;\nexports.isAssociative = isAssociative;\nexports.isOrdered = isOrdered;\nexports.isValueObject = isValueObject;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","import {\n    Dangle,\n    Direction,\n    Edge,\n    EdgeOperation,\n    Face,\n    faces,\n    Matrix2,\n    make_matrix2,\n    Partition,\n    Point2,\n } from './datatypes';\n\nimport {is, List, Map, Set} from 'immutable';\n\nlet face_vertices = Map<Face, Matrix2>([\n    [Face.t, make_matrix2([\n        [0,  1,  2 ],\n        [9,  25, 15],\n        [16, 24, 22]])],\n    [Face.b, make_matrix2([\n        [20, 19, 18],\n        [13, 12, 11],\n        [8,  7,  6 ]])],\n    [Face.n, make_matrix2([\n        [2,  1,  0 ],\n        [5,  4,  3 ],\n        [8,  7,  6 ]])],\n    [Face.e, make_matrix2([\n        [22, 15, 2 ],\n        [21, 14, 5 ],\n        [20, 13, 8 ]])],\n    [Face.s, make_matrix2([\n        [16, 24, 22],\n        [17, 23, 21],\n        [18, 19, 20]])],\n    [Face.w, make_matrix2([\n        [0,  9,  16],\n        [3,  10, 17],\n        [6,  11, 18]])]\n]);\n\nlet face_quadrants = Map<Face, Matrix2>([\n    [Face.t, make_matrix2([\n        [0,  1 ],\n        [2,  3 ]])],\n    [Face.b, make_matrix2([\n        [4,  5 ],\n        [6,  7 ]])],\n    [Face.n, make_matrix2([\n        [8,  9 ],\n        [10, 11]])],\n    [Face.e, make_matrix2([\n        [12, 13],\n        [14, 15]])],\n    [Face.s, make_matrix2([\n        [16, 17],\n        [18, 19]])],\n    [Face.w, make_matrix2([\n        [20, 21],\n        [22, 23]])],\n]);\n\nfunction build_edge_quadrant_mappings(): [Map<number, List<Edge>>, Map<Edge, List<number>>] {\n    let quadrant_2_edges = Map<number, List<Edge>>();\n    let edge_2_quadrants = Map<Edge, List<number>>();\n\n    for (let f of faces){\n        let vs = face_vertices.get(f);\n        let qs = face_quadrants.get(f);\n        for (let [x, y] of [[0,0], [1,0], [0,1], [1,1]]){\n            let q_edges = get_quadrant_edges(vs, x, y);\n            quadrant_2_edges = quadrant_2_edges.set(qs.get(x, y), q_edges);\n            q_edges.forEach(function (qe) {\n                let q = qs.get(x, y);\n                if (edge_2_quadrants.has(qe)) {\n                    edge_2_quadrants = edge_2_quadrants.update(qe, (xs) => xs.push(q));\n                } else {\n                    edge_2_quadrants = edge_2_quadrants.set(qe, List<number>([q]));\n                }\n            });\n        }\n    }\n\n    return [quadrant_2_edges, edge_2_quadrants];\n}\n\nfunction get_quadrant_edges(m: Matrix2, x: number, y: number): List<Edge> {\n    let offsets = [\n        [0,0,0,1],\n        [0,0,1,0],\n        [1,1,0,1],\n        [1,1,1,0]\n    ];\n    let edges = List<Edge>();\n    for (let [x1, y1, x2, y2] of offsets){\n        let e1 = m.get(x+x1, y+y1);\n        let e2 = m.get(x+x2, y+y2);\n        if (e2 < e1){\n            edges = edges.push(new Edge(e2, e1));\n        } else {\n            edges = edges.push(new Edge(e1, e2));\n        }\n    }\n    return edges;\n}\n\nexport let [quadrant_2_edges, edge_2_quadrants] = build_edge_quadrant_mappings();\n\nfunction get_quadrant_partition(quadrant: number, cut_edges: List<Edge>) {\n    let current_partition = Set<number>([quadrant]).asMutable();\n    let horizon = List<Edge>(quadrant_2_edges.get(quadrant)).asMutable();\n\n    while (horizon.size > 0){\n        let e = horizon.first(); horizon = horizon.shift();\n        if (cut_edges.contains(e)){\n            continue;\n        }\n        let next_qs = Set<number>(edge_2_quadrants.get(e));\n        let new_qs = next_qs.subtract(current_partition);\n        if (new_qs.size > 0) {\n            new_qs.forEach(function (q){\n                horizon.push(...quadrant_2_edges.get(q).toArray());\n                current_partition.add(q);\n            });\n        }\n    }\n    return current_partition.asImmutable();\n}\n\nfunction range(x: number){\n    let arr: number[] = [];\n    for (let i = 0; i < x; i++){\n         arr.push(i);\n    } \n    return arr;\n}\n\nfunction get_partitions(cut_edges: List<Edge>){\n    let partitions = List<Partition>().asMutable();\n    let quadrants = Set<number>(range(24)).asMutable();\n    while (quadrants.size > 0){\n        let q = quadrants.first(); quadrants.remove(q);\n        let partition = get_quadrant_partition(q, cut_edges);\n        partitions.push(partition);\n        quadrants.subtract(partition);\n    }\n    return partitions.asImmutable();\n}\n\nexport class FaceMesh {\n    readonly vertices: Matrix2;\n    readonly quadrants: Matrix2;\n\n    constructor(vertices: Matrix2, quadrants: Matrix2){\n        this.vertices = vertices;\n        this.quadrants = quadrants;\n    }\n\n    rotate(degrees: number) {\n        return new FaceMesh(this.vertices.rotate(degrees), this.quadrants.rotate(degrees));\n    }\n}\n\ninterface BoxMeshParams {\n    dimensions?: [number, number, number],\n    face_meshes?: Map<Face, FaceMesh>,\n    cut_edges?: List<Edge>\n}\n\nexport class BoxMesh{\n    readonly dimensions: [number, number, number];\n    readonly face_meshes: Map<Face, FaceMesh>;\n    readonly cut_edges: List<Edge>;\n\n    constructor({dimensions, face_meshes, cut_edges}: BoxMeshParams){\n        this.dimensions = dimensions;\n        \n        if (face_meshes === undefined) {\n            face_meshes = Map<Face, FaceMesh>();\n            for (let f of faces){\n                face_meshes = face_meshes.set(f,\n                    new FaceMesh(face_vertices.get(f), face_quadrants.get(f)));\n            }\n        }\n        this.face_meshes = face_meshes;\n\n        if (cut_edges === undefined){\n            cut_edges = List<Edge>();\n        }\n        this.cut_edges = cut_edges;\n    }\n\n    update({dimensions, face_meshes, cut_edges}: BoxMeshParams){\n        if (dimensions === undefined){\n            dimensions = this.dimensions;\n        }\n\n        if (face_meshes === undefined){\n            face_meshes = this.face_meshes;\n        }\n\n        if (cut_edges === undefined){\n            cut_edges = this.cut_edges;\n        }\n        return new BoxMesh({dimensions, face_meshes, cut_edges});\n    }\n\n    cut(face: Face, start: Point2, end: Point2){\n        return this.cut_or_tape(EdgeOperation.cut, face, start, end);\n    }\n\n    tape(face: Face, start: Point2, end: Point2){\n        return this.cut_or_tape(EdgeOperation.tape, face, start, end);\n    }\n\n    cut_or_tape(operation: EdgeOperation, face: Face, start: Point2, end: Point2): BoxMesh {\n        let [x1, y1] = start;\n        let [x2, y2] = end;\n\n        if (Math.abs(x2 - x1) + Math.abs(y2 - y1) != 1){\n            throw `start and end points of cut/tape are not adjacent: ${start} and ${end}`;\n        }\n\n        let f = this.face_meshes.get(face).vertices;\n        let fs = f.get(x1, y1);\n        let fe = f.get(x2, y2);\n\n        let new_edge = new Edge(fs, fe);\n\n        let new_cut_edges = this.cut_edges;\n        if (operation == EdgeOperation.cut && !new_cut_edges.contains(new_edge)) {\n            new_cut_edges = new_cut_edges.push(new_edge);\n        }\n\n        if (operation == EdgeOperation.tape && new_cut_edges.contains(new_edge)) {\n            new_cut_edges = new_cut_edges.remove(new_cut_edges.indexOf(new_edge));\n        }\n\n        return this.update({cut_edges: new_cut_edges});\n    }\n\n    get_rends() {\n        return get_partitions(this.cut_edges);\n    }\n\n    get_free_rends() {\n        return this.get_rends().filter(x => !this.is_partition_fixed(x));\n    }\n\n    is_partition_fixed(partition: Set<number>) {\n        let face_membership = this.get_partition_face_membership(partition);\n        return face_membership.get(Face.b) > 0;\n    }\n\n    get_partition_face_membership(partition: Partition) {\n        let face_membership = Map<Face, number>().asMutable();\n        for (let f of faces) {\n            let total = 0;\n            let quadrants = this.face_meshes.get(f).quadrants;\n            partition.forEach(function (q) {\n                if (quadrants.contains(q)){\n                    total += 1;\n                }\n            });\n            face_membership.set(f, total);\n        }\n        return face_membership.asImmutable();\n    }\n\n    get_quadrant_face(quadrant: number){\n        for (let f of faces){\n            if (this.face_meshes.get(f).quadrants.contains(quadrant)) {\n                return f;\n            }\n        }\n    }\n\n    get_dangles() {\n        let rends = this.get_rends();\n        let fixed_rends = rends.filter(x => this.is_partition_fixed(x));\n\n        let dangles = List<Dangle>().asMutable();\n        let inner_this = this;\n\n        this.get_box_edges().forEach(function ([e1, e2]) {\n            let e_2_q_2_f = Map<Edge, Map<number, Face>>().asMutable();\n            for (let e of [e1, e2]){ //initialize e_2_q_2_f\n                let inner_map = Map<number, Face>().asMutable();\n                edge_2_quadrants.get(e).forEach(function (q) {\n                    inner_map.set(q, inner_this.get_quadrant_face(q));\n                });\n                 inner_map = inner_map.asImmutable()\n                e_2_q_2_f.set(e, inner_map);\n            }\n            e_2_q_2_f = e_2_q_2_f.asImmutable();\n\n            let edge_dangles = List<Dangle>().asMutable();\n\n            for (let es of [[e1, e2], [e1], [e2]]) {\n                let new_cut_edges = inner_this.cut_edges.push(...es);\n                let new_partitions = get_partitions(new_cut_edges);\n\n                if (new_partitions.size != rends.size) {\n\n                    new_partitions.forEach(function (np) {\n                        if (rends.contains(np)){\n                            return;\n                        }\n\n                        if (inner_this.is_partition_fixed(np)) {\n                            return;\n                        }\n\n                        let any_intersections = false;\n                        fixed_rends.forEach(function (fixed_rend) {\n                            if (np.intersect(fixed_rend).size > 0){\n                                any_intersections = true;\n                            }\n                        });\n                        if (!any_intersections) {\n                            return;\n                        }\n\n                        let any_dangle_matches = false;\n                        edge_dangles.forEach(function (ed) {\n                            if (is(np, ed.partition)){\n                                any_dangle_matches = true;\n                                return;\n                            }\n                        });\n                        if (any_dangle_matches){\n                            return;\n                        }\n\n                        let q_2_fs = List<Map<number, Face>>().asMutable();\n                        for (let e of es) {\n                            q_2_fs.push(e_2_q_2_f.get(e));\n                        }\n                        q_2_fs = q_2_fs.asImmutable();\n\n                        let fixed_fs = List<Face>().asMutable();\n                        let dangle_fs = List<Face>().asMutable();\n\n                        q_2_fs.forEach(function (q_2_f) {\n                            q_2_f.entrySeq().forEach(function ([q, f]) {\n                                if (np.contains(q)) {\n                                    dangle_fs = dangle_fs.push(f);\n                                } else {\n                                    fixed_fs = fixed_fs.push(f);\n                                }\n                            });\n                        });\n                        fixed_fs = fixed_fs.asImmutable();\n                        dangle_fs = dangle_fs.asImmutable();\n\n                        if (fixed_fs.toSet().size != 1 || dangle_fs.toSet().size != 1) {\n                            return;\n                        }\n\n                        edge_dangles.push(new Dangle(\n                            np, List<Edge>(es), fixed_fs.get(0), dangle_fs.get(0)));\n                    });\n                }\n            }\n            edge_dangles = edge_dangles.asImmutable();\n            dangles.push(...edge_dangles.toArray());\n        });\n        dangles = List<Dangle>(dangles.sortBy(x => x.partition.size));\n\n        let final_dangles = List<Dangle>().asMutable();\n\n        for (let i = 0; i < dangles.size; i++) {\n            let p = dangles.get(i).partition;\n\n            let any_supersets = false;\n            dangles.skip(i+1).forEach(function (d) {\n                if (p.isSubset(d.partition)) {\n                    any_supersets = true;\n                }\n            })\n            if (!any_supersets) {\n                final_dangles.push(dangles.get(i));\n            }\n        }\n        final_dangles = final_dangles.asImmutable();\n\n        return final_dangles;\n    }\n\n    get_box_edges() {\n        let edges = List<[Edge, Edge]>();\n\n        let t_b_edge_coords: [number, number][][] = [\n            [[0,0], [0,1], [0,2]],\n            [[0,0], [1,0], [2,0]],\n            [[2,0], [2,1], [2,2]],\n            [[0,2], [1,2], [2,2]]\n        ];\n\n        for (let f of [Face.t, Face.b]) {\n            let m = this.face_meshes.get(f).vertices;\n\n            for (let [[p1x, p1y], [p2x, p2y], [p3x, p3y]] of t_b_edge_coords) {\n                let v1 = m.get(p1x, p1y);\n                let v2 = m.get(p2x, p2y);\n                let v3 = m.get(p3x, p3y);\n\n                let e1 = new Edge(v1, v2);\n\n                let e2 = new Edge(v2, v3);\n\n                edges = edges.push([e1, e2]);\n            }\n        }\n\n        for (let f of [Face.n, Face.e, Face.s, Face.w]) {\n            let m = this.face_meshes.get(f).vertices;\n\n            let v1 = m.get(0,0);\n            let v2 = m.get(0,1);\n            let v3 = m.get(0,2);\n\n            let e1 = new Edge(v1, v2);\n\n            let e2 = new Edge(v2, v3);\n\n            edges = edges.push([e1, e2]);\n\n        }\n        return edges;\n    }    \n\n    rotate_y(degrees: number) {\n        //validate degrees somehow\n\n        if (degrees == 0 || degrees == 360) {\n            return this;\n        }\n\n        let new_faces = rotate_y_faces(this.face_meshes, degrees);\n    \n        if (degrees = 180) {\n            return this.update({face_meshes: new_faces});\n        } else {\n            let [x, y, z] = this.dimensions;\n            return this.update({dimensions: [z, y, x], face_meshes: new_faces});\n        }\n    }\n\n    roll(direction: Direction){\n        let [x, y, z] = this.dimensions;\n        let new_x, new_y, new_z;\n        if (direction == Direction.n || direction == Direction.s) {\n            [new_x, new_y, new_z] = [x, y, z];\n        } else {\n            [new_x, new_y, new_z] = [y, x, z];\n        }\n\n        let new_faces = roll_faces(this.face_meshes, direction);\n\n        return this.update({dimensions: [new_x, new_y, new_z], face_meshes: new_faces});\n    }\n\n    description(){\n        let face_descr = Map<Face, string>([\n            [Face.t, 'top'],\n            [Face.b, 'bottom'],\n            [Face.n, 'back'],\n            [Face.e, 'right'],\n            [Face.s, 'front'],\n            [Face.w, 'left']\n        ]);\n\n        let [x, y, z] = this.dimensions;\n\n        let result = `The box's dimensions measure ${x} by ${y} by ${z}`;\n\n        let rends = this.get_free_rends();\n        let inner_this = this;\n\n        rends.forEach(function (fr) {\n            let face_membership = inner_this.get_partition_face_membership(fr);\n            let faces_present: Face[] =[];\n            for (let f of faces){\n                if (face_membership.get(f) > 0) {\n                    faces_present.push(f);\n                }\n            }\n\n            let faces_text: string;\n            if (faces_present.length == 1) {\n                faces_text = face_descr.get(faces_present[0]) + ' face';\n            } else {\n                faces_text = faces_present.slice(0, -1).map(f => face_descr.get(f)).join(', ');\n                faces_text += ` and ${face_descr.get(faces_present[faces_present.length-1])} faces`;\n            }\n\n            result += `\\nA portion of the box's ${faces_text} has been rended free; it lies on the floor off to the side.`;\n        });\n\n        let dangles = this.get_dangles();\n\n        dangles.forEach(function (d) {\n            let face_membership = inner_this.get_partition_face_membership(d.partition);\n            let faces_present: Face[] = [];\n            for (let f of faces){\n                if (face_membership.get(f) > 0) {\n                    faces_present.push(f);\n                }\n            }\n\n            let faces_text: string;\n            if (faces_present.length == 1) {\n                faces_text = face_descr.get(faces_present[0]) + ' face';\n            } else {\n                faces_text = faces_present.slice(0, -1).map(f => face_descr.get(f)).join(', ');\n                faces_text += ` and ${face_descr.get(faces_present[faces_present.length-1])} faces`;\n            }\n\n            result += `\\nA portion of the box's ${faces_text} sits on a free hinge; from the ${face_descr.get(d.free_face)} face it can be swung to the ${face_descr.get(d.fixed_face)}.`;\n        });\n\n        return result;\n    }\n}\n\nfunction rotate_y_faces(fs: Map<Face, FaceMesh>, degrees: number) {\n    if (degrees == 0 || degrees == 360) {\n        return fs;\n    }\n\n    let shift = degrees / 90;\n    let face_cycle = [Face.n, Face.w, Face.s, Face.e, Face.n, Face.w, Face.s, Face.e];\n\n    let new_faces = Map<Face, FaceMesh>();\n\n    for (let f of [Face.n, Face.e, Face.s, Face.w]){\n        let ind = face_cycle.indexOf(f);\n        new_faces = new_faces.set(f, fs.get(face_cycle[ind + shift]));\n    }\n\n    for (let f of [Face.t, Face.b]){\n        new_faces = new_faces.set(f, fs.get(f).rotate(degrees));\n    }\n\n    return new_faces;\n}\n\nfunction roll_faces(fs: Map<Face, FaceMesh>, direction: Direction){\n    let new_faces = Map<Face, FaceMesh>().asMutable();\n\n    if (direction == Direction.n) {\n        new_faces.set(\n            Face.n, fs.get(Face.t).rotate(180)).set(\n            Face.t, fs.get(Face.s)).set(\n            Face.s, fs.get(Face.b)).set(\n            Face.b, fs.get(Face.n).rotate(180)).set(\n            Face.e, fs.get(Face.e).rotate(90)).set(\n            Face.w, fs.get(Face.w).rotate(270));\n    } else if (direction == Direction.s) {\n        new_faces.set(\n            Face.s, fs.get(Face.t)).set(\n            Face.t, fs.get(Face.n).rotate(180)).set(\n            Face.n, fs.get(Face.b)).set(\n            Face.b, fs.get(Face.s).rotate(180)).set(\n            Face.e, fs.get(Face.e).rotate(270)).set(\n            Face.w, fs.get(Face.w).rotate(90));\n    } else if (direction == Direction.e) {\n        new_faces.set(\n            Face.e, fs.get(Face.t).rotate(90)).set(\n            Face.t, fs.get(Face.w).rotate(90)).set(\n            Face.w, fs.get(Face.b).rotate(270)).set(\n            Face.b, fs.get(Face.e).rotate(270)).set(\n            Face.n, fs.get(Face.n).rotate(270)).set(\n            Face.s, fs.get(Face.s).rotate(90));\n    } else if (direction == Direction.w) {\n        new_faces.set(\n            Face.w, fs.get(Face.t).rotate(270)).set(\n            Face.t, fs.get(Face.e).rotate(270)).set(\n            Face.e, fs.get(Face.b).rotate(90)).set(\n            Face.b, fs.get(Face.w).rotate(90)).set(\n            Face.n, fs.get(Face.n).rotate(90)).set(\n            Face.s, fs.get(Face.s).rotate(270));\n    }\n\n    return new_faces.asImmutable();\n}\n\n\nexport function test(){\n    let bm = new BoxMesh({dimensions: [2,3,4]});\n\n    let bm2 = bm.cut(Face.t, [0,0], [1,0]).cut(Face.t, [1,0], [1,1]).cut(Face.t, [1,1], [0,1]).cut(Face.t, [0,1], [0,0]);\n    let bm3 = bm2.cut(Face.t, [0,1], [0,2]).cut(Face.s, [0, 0], [0, 1]).cut(Face.s, [0,1], [1,1]).cut(Face.s, [1,1], [1,0]).cut(Face.t, [1, 2], [1,1])\n\n    let bm4 = bm.cut(Face.t, [0,0], [1,0]).roll(Direction.s).cut(Face.t, [0,2], [0,1]).cut(Face.t, [0,1], [1,1]).cut(Face.t, [1,1], [1,2]);\n\n    let bm5 = bm.cut(Face.n, [0,0], [1,0]).cut(Face.n, [1,0], [2,0]).cut(Face.n, [2,0], [2,1]).cut(Face.n, [2,1], [1,1]).cut(Face.n, [1,1], [0,1]).cut(Face.n, [1,1], [1, 0]).cut(Face.n, [0,1], [0,0]);\n\n    let bm6 = bm.cut(Face.t, [0,0], [0,1]).cut(Face.t, [0,1], [1,1]).cut(Face.t, [1,1], [1,0]);\n    let bm7 = bm2.cut(Face.t, [0,1], [0,2]).cut(Face.t, [1,1], [1,2]);\n\n    let bm8 = (bm.cut(Face.t, [0,0], [1,0]).cut(Face.t, [1,0], [2,0]).cut(Face.t, [2,0], [2,1]).cut(Face.t, [2,1], [2,2])\n             .cut(Face.t, [0,2], [0,1]).cut(Face.t, [0,1], [1,1]).cut(Face.t, [1,1], [1,2])\n             .cut(Face.s, [1,0], [1,1]).cut(Face.s, [1,1], [0,1])\n             .cut(Face.w, [0,0], [0,1]).cut(Face.w, [0,1], [1,1]).cut(Face.w, [1,1], [2,1]));\n\n    let bms: BoxMesh[] = [bm, bm2, bm3, bm4, bm5, bm6, bm7, bm8];\n    for (let i = 0; i < bms.length; i++) {\n        let b = bms[i];\n\n        console.log('Box #', i+1);\n        console.log();\n        console.log(b.description());\n        console.log();\n        console.log();\n    }\n}\n","import {Map} from 'immutable';\nimport {Direction, EdgeOperation, EdgeDirection, Face, RelativePosition, RendOperation} from './datatypes';\n\nimport {starts_with, untokenize} from './text_tools';\n\nexport type Token = string;\n\nexport type HorizPositionWord = 'left' | 'center' | 'right';\nexport let horiz_position_word_tokens: [HorizPositionWord][] = [['left'], ['center'], ['right']];\n\nexport type VertPositionWord = 'top' | 'middle' | 'bottom';\nexport let vert_position_word_tokens: [VertPositionWord][] = [['top'], ['middle'], ['bottom']];\n\nexport type PositionWord = HorizPositionWord | VertPositionWord;\nexport let word_2_relative_position = Map<PositionWord, RelativePosition>([\n    ['left', RelativePosition.left],\n    ['center', RelativePosition.center],\n    ['right', RelativePosition.right],\n    ['top', RelativePosition.top],\n    ['middle', RelativePosition.middle],\n    ['bottom', RelativePosition.bottom]\n]);\nexport let position_word_tokens: [PositionWord][] = (<[PositionWord][]>horiz_position_word_tokens).concat(vert_position_word_tokens);\n\nexport type FaceWord = 'back' | 'front' | 'right' | 'left' | 'top' | 'bottom';\nexport let word_2_face = Map<FaceWord, Face>([\n    ['back', Face.n],\n    ['front', Face.s],\n    ['right', Face.e],\n    ['left', Face.w],\n    ['top', Face.t],\n    ['bottom', Face.b]\n]);\nexport let face_word_tokens: [FaceWord][] = [['back'], ['front'], ['right'], ['left'], ['top'], ['bottom']];\n\nexport type RendOpWord = 'remove' | 'replace';\nexport let word_2_rend_op = Map<RendOpWord, RendOperation>([\n    ['remove', RendOperation.open],\n    ['replace', RendOperation.close]\n]);\nexport let rend_op_word_tokens: [RendOpWord][] = [['remove'], ['replace']];\n\nexport type DangleOpWord = 'open' | 'close';\nexport let word_2_dangle_op = Map<DangleOpWord, RendOperation>([\n    ['open', RendOperation.open],\n    ['close', RendOperation.close]\n]);\nexport let dangle_op_word_tokens: [DangleOpWord][] = [['open'], ['close']];\n\n\nexport type EdgeOpWord = 'cut' | 'tape';\nexport let word_2_edge_op = Map<EdgeOpWord, EdgeOperation>([\n    ['cut', EdgeOperation.cut],\n    ['tape', EdgeOperation.tape]\n]);\nexport let edge_op_word_tokens: [EdgeOpWord][] = [['cut'], ['tape']];\n\nexport type EdgeDirWord = 'horizontally' | 'vertically';\nexport let word_2_edge_dir = Map<EdgeDirWord, EdgeDirection>([\n    ['horizontally', EdgeDirection.horizontal],\n    ['vertically', EdgeDirection.vertical]\n]);\nexport let edge_dir_word_tokens: [EdgeDirWord][] = [['horizontally'], ['vertically']];\n\nexport type RotateYDirWord = \"left\" | \"right\";\nexport let word_2_degrees = Map<RotateYDirWord, number>([\n    ['left', 270],\n    ['right', 90]\n]);\nexport let rotate_y_word_tokens: [RotateYDirWord][] = [['left'], ['right']];\n\nexport type RollDirWord = \"forward\" | \"backward\" | \"left\" | \"right\";\nexport let word_2_dir = Map<RollDirWord, Direction>([\n    ['forward', Direction.n],\n    ['backward', Direction.s],\n    ['left', Direction.w],\n    ['right', Direction.e]\n]);\nexport let roll_dir_word_tokens: [RollDirWord][] = [['forward'], ['backward'], ['left'], ['right']];\n\nexport enum DisplayEltType {\n    keyword = 0,\n    option = 1,\n    filler = 2,\n    partial = 3,\n    error = 4\n}\n\ninterface DisplayElt {\n    display: DisplayEltType,\n    tokens: Token[],\n    typeahead?: Token[][],\n    name?: string\n}\n\nexport enum MatchValidity {\n    valid = 0,\n    partial = 1,\n    invalid = 2\n}\n\n//export type MaybeMatch<str_type extends string> = str_type | false;\n\nexport class CommandParser {\n    tokens: Token[];\n    position: number = 0;\n    validity: MatchValidity = MatchValidity.valid;\n    match: DisplayElt[] = [];\n\n    constructor(tokens: Token[]) {\n        this.tokens = tokens;\n    }\n\n    consume_exact(spec_tokens: Token[], display: DisplayEltType=DisplayEltType.keyword, name?: string): boolean {\n        if (spec_tokens.length === 0) {\n            throw new Error(\"Can't consume an empty spec.\");\n        }\n\n        let match_tokens: Token[] = [];\n        let pos_offset = 0;\n        for (let spec_tok of spec_tokens) {\n            if (this.position === this.tokens.length) {\n                this.validity = MatchValidity.partial;\n                break; //partial validity\n            }\n            let next_tok = this.tokens[this.position + pos_offset];\n\n            if (spec_tok === next_tok) {\n                match_tokens.push(next_tok);\n                pos_offset++;\n                continue;\n            }\n\n            if (starts_with(spec_tok, next_tok)) {\n                match_tokens.push(next_tok);\n                this.validity = MatchValidity.partial;\n                pos_offset++;\n                break;\n            }\n\n            this.validity = MatchValidity.invalid;\n            break;   \n        }\n\n        this.position += pos_offset;\n\n        if (this.validity === MatchValidity.valid) {\n            this.match.push({\n                display: display,\n                tokens: match_tokens,\n                name: name});\n            this.position;\n            return true;\n        }\n\n        if (this.validity === MatchValidity.partial) {\n            if (this.position === this.tokens.length) {\n                this.match.push({\n                    display: DisplayEltType.partial,\n                    tokens: match_tokens,\n                    typeahead: [spec_tokens],\n                    name: name});\n\n                return false;\n            } else {\n                this.validity = MatchValidity.invalid;\n            }\n        }\n\n        match_tokens.push(...this.tokens.slice(this.position));\n        this.position = this.tokens.length;\n        this.match.push({\n            display: DisplayEltType.error,\n            tokens: match_tokens,\n            name: name});\n        return false;\n    }\n\n    consume_option<S extends string>(option_spec_tokens: Token[][], name?: string, display: DisplayEltType=DisplayEltType.option): S | false{\n        let partial_matches: DisplayElt[] = []; \n        for (let spec_toks of option_spec_tokens) {\n            let subparser = new CommandParser(this.tokens.slice(this.position));\n            let exact_match = subparser.consume_exact(spec_toks, display, name);\n\n            if (exact_match) {\n                this.match.push(subparser.match[0]);\n                this.position += subparser.position;\n                return <S>untokenize(subparser.match[0].tokens);\n            }\n\n            if (subparser.validity === MatchValidity.partial){\n                partial_matches.push(subparser.match[0]);\n            }\n        }\n\n        if (partial_matches.length > 0) {\n            this.validity = MatchValidity.partial;\n            this.position = this.tokens.length - 1;\n            let typeahead = partial_matches.map((de) => de.typeahead[0]);\n            this.match.push({\n                display: DisplayEltType.partial,\n                tokens: partial_matches[0].tokens,\n                typeahead: typeahead,\n                name: name})\n            return false;\n        }\n\n        this.validity = MatchValidity.invalid;\n        let match_tokens = this.tokens.slice(this.position);\n        this.match.push({\n            display: DisplayEltType.error,\n            tokens: match_tokens,\n            name: name});\n        return false;\n    }\n\n    consume_filler(spec_tokens: Token[]){\n        return this.consume_exact(spec_tokens, DisplayEltType.filler);\n    }\n\n    done() {\n        if (this.position !== this.tokens.length) {\n            this.validity = MatchValidity.invalid;\n            this.match.push({\n                display: DisplayEltType.error,\n                tokens: this.tokens.slice(this.position)\n            });\n            this.position = this.tokens.length;\n        }\n\n        return this.validity === MatchValidity.valid;\n    }\n\n    get_match(name: string){\n        for (let m of this.match) {\n            if (m.name === name) {\n                return m;\n            }\n        }\n        return null;\n    }\n}\n\nexport type CommandResult<WorldType> = {\n    world?: WorldType;\n    message?: string;\n} | undefined\n\nexport interface Command<WorldType> {\n    command_name: Token[];\n    execute: (world: WorldType, parser: CommandParser) => CommandResult<WorldType>;\n}\n\n","import {\n    Collection,\n    hash,\n    isImmutable,\n    List,\n    Map,\n    Set\n} from 'immutable';\n\nexport type Partition = Set<number>;\n\nexport class Edge {\n    readonly start: number;\n    readonly end: number;\n\n    constructor(start: number, end: number){\n        if (end < start){\n            this.start = end;\n            this.end = start;\n        } else {\n            this.start = start;\n            this.end = end;\n        }\n    }\n\n    equals(other:Edge){\n        return (this.start == other.start && this.end == other.end);\n    }\n\n    hashCode() {\n        return hash(hash(this.start) + hash(this.end));\n        // fuck\n        // return ( this.end << 16 ) ^ this.start;\n    }\n}\n\nexport enum Face {\n    n = 0,\n    s = 1,\n    e = 2,\n    w = 3,\n    t = 4,\n    b = 5\n}\n\nexport let faces = [Face.n, Face.s, Face.e, Face.w, Face.t, Face.b];\n\nexport enum Direction {\n    n = 0,\n    s = 1,\n    e = 2,\n    w = 3\n}\n\nexport let directions = [Direction.n, Direction.s, Direction.e, Direction.w];\n\nexport let direction_2_face = Map<Direction, Face>([\n    [Direction.n, Face.n],\n    [Direction.s, Face.s],\n    [Direction.e, Face.e],\n    [Direction.w, Face.w]\n]);\n\nexport class Dangle {\n    readonly partition: Partition;\n    readonly edges: List<Edge>;\n    readonly fixed_face: Face;\n    readonly free_face: Face;\n\n    constructor(partition: Partition, edges: List<Edge>, fixed_face: Face, free_face: Face) {\n        this.partition = partition;\n        this.edges = edges;\n        this.fixed_face = fixed_face;\n        this.free_face = free_face;\n    }\n\n    equals(other: Dangle){\n        return (\n            this.partition.equals(other.partition)\n            && this.edges.equals(other.edges)\n            && this.fixed_face === other.fixed_face\n            && this.free_face === other.free_face);\n    }\n\n    hashCode() {\n        return hash(hash(this.partition) + hash(this.edges) + hash(this.fixed_face) + hash(this.free_face));\n        //let faces_hash = (this.fixed_face << 16) ^ this.free_face; //fuck!\n        //return this.partition.hashCode() + this.edges.hashCode() + faces_hash;\n    }\n}\n\nexport type Point2 = [number, number];\n\nexport function make_matrix2(data_obj: number[][]) {\n    let dim_y = data_obj.length;\n    let dim_x = data_obj[0].length;\n\n    let data = new Int16Array(data_obj.reduce((x, y) => x.concat(y)));\n    // TODO complain if the total length is wrong\n    return new Matrix2(data, dim_x, dim_y);\n}\n\nexport class Matrix2 {\n    readonly dim_x: number;\n    readonly dim_y: number;\n    readonly data: Int16Array;\n    \n    constructor (data: Int16Array, dim_x: number, dim_y: number) {\n        this.data = data;\n        this.dim_x = dim_x;\n        this.dim_y = dim_y;\n    }\n\n    get(x: number, y: number): number {\n        return this.data[y * this.dim_x + x];\n    }\n\n    set(x: number, y: number, value: number) {\n        this.data[y * this.dim_x + x] = value;\n    }\n\n    rotate(degrees: number): Matrix2 {\n        //validate input better\n\n        if (degrees == 360 || degrees == 0) {\n            return this;\n        }\n\n        const n_rotations = degrees / 90;\n        let m: Matrix2 = this;\n        const dim_x = this.dim_x;\n        const dim_y = this.dim_y;\n        for (let i = 0; i < n_rotations; i++){\n            let new_data = new Int16Array(dim_x * dim_y);\n            let new_mat2 = new Matrix2(new_data, dim_y, dim_x);\n            for (let y = 0; y < dim_y; y++){\n                for (let x = 0; x < dim_x; x++){\n                    new_mat2.set(dim_y - 1 - y, x, m.get(x, y));\n                }\n            }\n            m = new_mat2;\n        }\n        return m\n    }\n\n    contains(value: number): boolean{\n        return this.data.indexOf(value) !== -1;\n    }\n}\n\n\nexport enum CardboardEdge {\n    intact = 0,\n    cut = 1,\n}\n\nexport enum TapeEdge {\n    untaped = 0,\n    taped = 1,\n    cut = 2\n}\n\nexport class EdgeState {\n    readonly cardboard: CardboardEdge;\n    readonly tape: TapeEdge;\n\n    constructor (cardboard?: CardboardEdge, tape?: TapeEdge){\n        if (cardboard === undefined) {\n            cardboard = CardboardEdge.intact;\n        }\n        this.cardboard = cardboard;\n\n        if (tape === undefined) {\n            tape = TapeEdge.untaped;\n        }\n        this.tape = tape;\n    }\n\n    cut() {\n        let new_tape: TapeEdge;\n        if (this.tape == TapeEdge.taped) {\n            new_tape = TapeEdge.cut;\n        } else {\n            new_tape = this.tape\n        }\n\n        return new EdgeState(CardboardEdge.cut, new_tape);\n    }\n\n\n    apply_tape() {\n        return new EdgeState(this.cardboard, TapeEdge.taped);\n    }\n}\n\nexport enum EdgeOperation {\n    cut = 0,\n    tape = 1\n}\n\nexport enum EdgeDirection {\n    horizontal = 0,\n    vertical = 1\n}\n\nexport enum RendState {\n    closed = 0,\n    open = 1\n}\n\nexport enum RendOperation {\n    close = 0,\n    open = 1\n}\n\nexport enum SpillageLevel {\n    none = 0,\n    light = 1,\n    heavy = 2\n}\n\nexport enum Weight {\n    empty = 0,\n    very_light = 1,\n    light = 2,\n    medium = 3,\n    heavy = 4,\n    very_heavy = 5\n}\n\nexport abstract class Item {\n    abstract weight(): Weight;\n    abstract name(): string;\n    abstract pre_gestalt(): string;\n    abstract post_gestalt(): string;\n    article(): string {\n        return 'a';\n    }\n}\n\n\nexport type Counter<T> = Map<T, number>;\n\nexport function counter_add<T>(counter: Counter<T>, key: T, inc: number){\n    let cur_val = 0;\n    if (counter.has(key)){\n        cur_val = counter.get(key);\n    }\n    return counter.set(key, cur_val + inc);\n}\n\nexport function counter_get<T>(counter: Counter<T>, key: T){\n    let cur_val = 0;\n    if (counter.has(key)){\n        cur_val = counter.get(key);\n    }\n    return cur_val;\n}\n\nexport function counter_update<T>(counter1: Counter<T>, counter2: Counter<T>){\n    let switch_to_immutable = isImmutable(counter1);\n    let result = counter1.asMutable();\n\n    counter2.forEach(function (v, k){\n        counter_add(result, k, v);\n    });\n\n    if (switch_to_immutable) {\n        result = result.asImmutable();\n    }\n    return result;\n}\n\nexport function counter_order<T>(counter: Counter<T>, include_zero=false){\n    let result = counter.sort();\n    if (!include_zero) {\n        result = result.filter((count) => count > 0);\n    }\n    return result.keySeq().toList().reverse();\n}\n\nexport enum RelativePosition {\n    left = 0, center = 1, right = 2,\n    top = 3, middle = 4, bottom = 5\n}\n\nexport class WreckError extends Error {}\n\n// used to signal errors caused by trying to update world state in a way that breaks the reality of the world\n// so assumes that commands are already valid, the attempted update *could work* if the state were different\nexport class WorldUpdateError extends WreckError {}\n\n// used to signal that a command/pseudo command is not specified legally\n// the command cannot be executed because it *cannot be interpreted*\nexport class CommandError extends WreckError {}","import {Item, Weight} from './datatypes'\n\nexport class Codex extends Item {\n    weight() {\n        return Weight.medium;\n    }\n\n    name() {\n        return 'codex';\n    }\n\n    pre_gestalt() {\n        return 'something thick and aged';\n    }\n\n    post_gestalt() {\n        return 'a thick, rotten codex with strange markings on the front';\n    }\n}\n\nexport class CityKey extends Item {\n    weight() {\n        return Weight.light;\n    }\n\n    name() {\n        return 'Key to the City';\n    }\n\n    pre_gestalt() {\n        return 'something glistening and golden';\n    }\n\n    post_gestalt() {\n        return 'a large, heavy golden key';\n    }\n\n    article() {\n        return 'the';\n    }\n}\n\nexport class Pinecone extends Item {\n    weight() {\n        return Weight.very_light;\n    }\n\n    name() {\n        return 'pinecone';\n    }\n\n    pre_gestalt() {\n        return 'something small, brown and flaky';\n    }\n\n    post_gestalt() {\n        return 'a small, brown pinecone that smells of the outdoors';\n    }\n}","\"use strict\";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJqcXVlcnkudGVybWluYWwuZC50cyIsInNvdXJjZXNDb250ZW50IjpbXX0=","import {List} from 'immutable';\nimport {CityKey, Codex, Pinecone} from './items';\nimport {Item} from './datatypes';\nimport {Box, SingleBoxWorld, WorldDriver} from './world';\n\ndeclare var jQuery: any;\n\njQuery(function($: any) {\n    let contents = List<Item>([new Codex(), new Pinecone(), new CityKey()]);\n    let world = new SingleBoxWorld({box: new Box({contents: contents})});\n    let world_driver = new WorldDriver(world);\n\n    $('#term').terminal(function(command: string) {\n        if (command !== '') {\n            try {\n                var result = world_driver.run(command);\n                if (result !== undefined) {\n                    this.echo(new String(result));\n                }\n            } catch(e) {\n                this.error(new String(e));\n            }\n        } else {\n           this.echo('');\n        }\n    }, {\n        greetings: 'Demo Parser Interface for The Wreck',\n        name: 'wreck_demo',\n        height: 500,\n        prompt: '> '\n    });\n});","import {Face} from './datatypes';\n\nimport {List, Map} from 'immutable';\n\nexport function uncapitalize(msg: string) {\n    return msg[0].toLowerCase() + msg.slice(1);\n}\n\nexport function capitalize(msg: string) {\n    return msg[0].toUpperCase() + msg.slice(1);\n}\n\nexport function face_message(face_order: List<Face>, f_code_2_name?: Map<Face, string>){\n    if (f_code_2_name === undefined) {\n        f_code_2_name = Map<Face, string>([\n            [Face.n, 'back'],\n            [Face.s, 'front'],\n            [Face.e, 'right'],\n            [Face.w, 'left'],\n            [Face.t, 'top'],\n            [Face.b, 'bottom']\n        ]);\n    }\n\n    if (face_order.size == 1) {\n        return f_code_2_name.get(face_order.first()) + ' face';\n    } else {\n        return face_order.butLast().map(f_code_2_name.get).join(', ') + ' and ' + f_code_2_name.get(face_order.last()) + ' faces';\n    }\n}\n\nexport function starts_with(str: string, searchString: string, position?: number){\n    position = position || 0;\n    return str.substr(position, searchString.length) === searchString;\n}\n\nexport function tokens_equal(tks1: string[], tks2: string[]) {\n    if (tks1.length !== tks2.length) {\n        return false;\n    }\n\n    for (let i = 0; i < tks1.length; i++) {\n        if (tks1[i] !== tks2[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function tokenize(s: string) {\n    return s.split(/\\s+/);\n}\n\nexport function untokenize(tokens: string[]){\n    return tokens.join(' ');\n}","import {BoxMesh, edge_2_quadrants, FaceMesh} from './box_geometry';\n\nimport {\n    CardboardEdge,\n    CommandError,\n    Counter,\n    counter_order,\n    counter_update,\n    Dangle,\n    Direction,\n    directions,\n    direction_2_face,\n    Edge,\n    EdgeDirection,\n    EdgeOperation,\n    EdgeState,\n    Face,\n    Item,\n    Partition,\n    Point2,\n    RelativePosition,\n    RendOperation,\n    RendState,\n    SpillageLevel,\n    TapeEdge,\n    Weight,\n    WorldUpdateError\n} from './datatypes';\n\nimport {\n    DangleOpWord, dangle_op_word_tokens,\n    EdgeDirWord, edge_dir_word_tokens,\n    EdgeOpWord, edge_op_word_tokens,\n    FaceWord, face_word_tokens,\n    PositionWord, position_word_tokens,\n    RendOpWord, rend_op_word_tokens,\n    RollDirWord, roll_dir_word_tokens,\n    RotateYDirWord, rotate_y_word_tokens,\n    Token,\n    word_2_degrees,\n    word_2_dir,\n    word_2_edge_dir,\n    word_2_edge_op,\n    word_2_face,\n    word_2_relative_position,\n    word_2_rend_op,\n    word_2_dangle_op,\n    CommandResult,\n    CommandParser,\n    Command,\n    DisplayEltType,\n    MatchValidity\n} from './commands'\n\nimport {WorldUpdateEffects, with_world_update, world_update} from './world_update_effects';\n\nimport {CityKey, Codex, Pinecone} from './items';\n\nimport {capitalize, face_message, uncapitalize, tokens_equal, tokenize, untokenize} from './text_tools';\n\nimport {List, Map, Set} from 'immutable';\n\nexport interface BoxParams {\n    box_mesh?: BoxMesh,\n    rend_state?: Map<Partition, RendState>,\n    dangle_state?: Map<Dangle, RendState>,\n    edge_state?: Map<Edge, EdgeState>,\n    contents?: List<Item>\n}\n\nexport class Box {\n    readonly box_mesh: BoxMesh;\n    readonly rend_state: Map<Partition, RendState>;\n    readonly dangle_state: Map<Dangle, RendState>;\n    readonly edge_state: Map<Edge, EdgeState>;\n    readonly contents: List<Item>;\n\n    constructor({box_mesh, rend_state, dangle_state, edge_state, contents}: BoxParams){\n        if (box_mesh === undefined) {\n            box_mesh = new BoxMesh({dimensions: [2, 2, 2]});\n        }\n        this.box_mesh = box_mesh;\n\n        if (rend_state === undefined) {\n            rend_state = this.default_rend_state(this.box_mesh);\n        }\n        this.rend_state = rend_state;\n\n        if (dangle_state === undefined) {\n            dangle_state = this.default_dangle_state(this.box_mesh);\n        }\n        this.dangle_state = dangle_state;\n\n        if (edge_state === undefined) {\n            edge_state = Map<Edge, EdgeState>();\n        }\n        this.edge_state = edge_state;\n\n        if (contents === undefined) {\n            contents = List<Item>();\n        }\n        this.contents = contents;\n    }\n\n    update({box_mesh, rend_state, dangle_state, edge_state, contents}: BoxParams){\n        if (box_mesh === undefined) {\n            box_mesh = this.box_mesh;\n        }\n\n        if (rend_state === undefined) {\n            rend_state = this.rend_state;\n        }\n\n        if (dangle_state === undefined) {\n            dangle_state = this.dangle_state;\n        }\n\n        if (edge_state === undefined) {\n            edge_state = this.edge_state;\n        }\n        \n        if (contents === undefined) {\n            contents = this.contents;\n        }\n\n        return new Box({box_mesh, rend_state, dangle_state, edge_state, contents});\n    }\n\n    default_rend_state(box_mesh: BoxMesh) {\n        let rends = box_mesh.get_free_rends();\n        let result = Map<Partition, RendState>().asMutable();\n        rends.forEach(function (r) {\n            result.set(r, RendState.closed);\n        });\n        return result.asImmutable();\n    }\n\n    default_dangle_state(box_mesh: BoxMesh) {\n        let dangles = box_mesh.get_dangles();\n        let result = Map<Dangle, RendState>().asMutable();\n        dangles.forEach(function (d) {\n            result.set(d, RendState.closed);\n        });\n        return result.asImmutable();\n    }\n\n    open_or_close_rend(operation: RendOperation, rend: Partition) {\n        let box_rends = this.box_mesh.get_rends();\n\n        if (!box_rends.contains(rend)){\n            throw new CommandError('rend does not exist on the box');\n        }\n\n        if (this.box_mesh.is_partition_fixed(rend)) {\n            throw new WorldUpdateError('cannot open or close a fixed rend');\n        }\n\n        let new_rend_state = this.rend_state;\n        let intended_new_state = operation == RendOperation.close ? RendState.closed : RendState.open;\n        if (intended_new_state == new_rend_state.get(rend)) {\n            throw new WorldUpdateError(`cannot ${RendOperation[operation]} a rend that is already ${RendState[intended_new_state]}`);\n        }\n\n        new_rend_state = new_rend_state.set(rend, intended_new_state);\n\n        let new_box = this.update({rend_state: new_rend_state});\n\n        if (new_box.is_collapsed()) {\n            let effects = world_update.effects;\n            effects.box_collapsed = true;\n            effects.collapse_spilled_items = effects.collapse_spilled_items.push(...new_box.contents.toArray());\n            let new_contents = List<Item>();\n            new_box = new_box.update({contents: new_contents});\n        }\n\n        return new_box;\n    }\n\n    open_or_close_dangle(operation: RendOperation, dangle: Dangle) {\n        if (this.box_mesh.is_partition_fixed(dangle.partition)) {\n            throw new WorldUpdateError('cannot open or close a fixed dangle');\n        }\n\n        let box_dangles = this.box_mesh.get_dangles();\n\n        if (box_dangles.some((d) => dangle == d)){\n            throw new CommandError('dangle does not exist on the box');\n        }\n\n        let intended_new_state = operation == RendOperation.close ? RendState.closed : RendState.open;\n        if (this.dangle_state.get(dangle) == intended_new_state) {\n            throw new WorldUpdateError(`cannot ${RendOperation[operation]} a dangle that is already ${RendState[intended_new_state]}`);\n        }\n\n        let new_dangle_state = this.dangle_state.set(dangle, intended_new_state);\n\n        let new_box = this.update({dangle_state: new_dangle_state});\n        if (new_box.is_collapsed()) {\n            let effects = world_update.effects;\n            effects.box_collapsed = true;\n            effects.collapse_spilled_items = effects.collapse_spilled_items.push(...new_box.contents.toArray());\n            let new_contents = List<Item>();\n            new_box = new_box.update({contents: new_contents});\n        }\n        return new_box;\n    }\n\n    rotate_y(degrees: number) {\n        let new_box_mesh = this.box_mesh.rotate_y(degrees);\n        return this.update(new_box_mesh);\n    }\n\n    roll(direction: Direction) {\n        if (this.dangle_state.some((state) => state == RendState.open)) {\n            throw new WorldUpdateError('cannot roll a box with open dangles');\n        }\n\n        let new_box_mesh = this.box_mesh.roll(direction);\n        let dir_face: Face = direction_2_face.get(direction);\n\n        let new_contents = this.contents;\n        let rend_state_updates = this.rend_state;\n        let dangle_state_updates = this.dangle_state;\n\n        let inner_this = this;\n        let effects = world_update.effects;\n\n        if (new_contents.size > 0){\n            let dir_2_opposite = Map<Face, Face>([\n                [Face.n, Face.s],\n                [Face.s, Face.n],\n                [Face.e, Face.w],\n                [Face.w, Face.e]]);\n \n            let heavy_spill_faces: [Face, Face][] = [\n                [dir_face, Face.b],\n                [Face.t, dir_face],\n                [Face.b, dir_2_opposite.get(dir_face)]];\n            let light_spill_faces = ([Face.n, Face.s, Face.e, Face.w]\n                .filter((d) => d !== dir_face && d !== dir_2_opposite.get(dir_face))\n            );\n                \n            this.rend_state.forEach(function (state, r) {\n                let face_membership = inner_this.box_mesh.get_partition_face_membership(r);\n                        \n                for (let [test_face, spill_face] of heavy_spill_faces) {\n                    if (face_membership.get(test_face) > 0) {\n                        effects.spill_faces = effects.spill_faces.push(spill_face);\n                        effects.spillage_level = SpillageLevel.heavy;\n                        effects.spilled_items = effects.spilled_items.push(...new_contents.toArray());\n                        new_contents = List<Item>();\n\n                        if (state == RendState.closed) {\n                            effects.spilled_rends == effects.spilled_rends.add(r);\n                            rend_state_updates = rend_state_updates.set(r, RendState.open);\n                        }\n\n                    }\n                }\n\n                for (let spill_face of light_spill_faces) {\n                    if (face_membership.get(spill_face) > 0) {\n                        effects.spill_faces = effects.spill_faces.push(spill_face);\n                        if (effects.spillage_level < SpillageLevel.light) {\n                            effects.spillage_level = SpillageLevel.light;\n                        }\n                        if (new_contents.size > 0) {\n                            effects.spilled_items = effects.spilled_items.push(new_contents.first());\n                            new_contents = new_contents.rest();\n                        }\n                    }\n                }\n            });\n\n            this.box_mesh.get_dangles().forEach(function (d) {\n                let spillage_level = SpillageLevel.none;\n                let spill_face: Face;\n                if (d.free_face == Face.t) {\n                    spillage_level = SpillageLevel.heavy;\n                    spill_face = dir_face;\n                } else if (d.free_face == dir_face) {\n                    spillage_level = SpillageLevel.heavy;\n                    spill_face = Face.b;\n                } else if (light_spill_faces.indexOf(d.free_face) !== -1) {\n                    spillage_level = SpillageLevel.light;\n                    spill_face = d.free_face;\n                }\n\n                if (spillage_level !== SpillageLevel.none) {\n                    if (spillage_level > effects.spillage_level) {\n                        effects.spillage_level = spillage_level;\n                    }\n                    effects.spill_faces = effects.spill_faces.push(spill_face);\n\n                    if (spillage_level == SpillageLevel.light) {\n                        if (new_contents.size > 0) {\n                            effects.spilled_items = effects.spilled_items.push(new_contents.first());\n                            new_contents = new_contents.rest();\n                        }\n                    } else if (spillage_level == SpillageLevel.heavy) {\n                        effects.spilled_items = effects.spilled_items.push(...new_contents.toArray());\n                        new_contents = List<Item>();\n                    }\n\n                    effects.spilled_dangles = effects.spilled_dangles.add(d);\n                    dangle_state_updates = dangle_state_updates.set(d, RendState.open);\n                }\n            });\n            \n            new_box_mesh.get_dangles().forEach(function (d) {\n                if (d.free_face == dir_2_opposite.get(dir_face)) {\n                    effects.spillage_level = SpillageLevel.heavy;\n                    effects.spill_faces = effects.spill_faces.push(dir_2_opposite.get(dir_face));\n\n                    effects.spilled_items = effects.spilled_items.push(...new_contents.toArray());\n                    new_contents = List<Item>();\n\n                    effects.spilled_dangles = effects.spilled_dangles.add(d);\n                    dangle_state_updates = dangle_state_updates.set(d, RendState.open);\n                }\n            });\n        }\n        let new_box = this.update({\n            box_mesh: new_box_mesh,\n            rend_state: rend_state_updates,\n            dangle_state: dangle_state_updates,\n            contents: new_contents\n        });\n\n        if (new_box.is_collapsed()) {\n            effects.box_collapsed = true;\n            effects.collapse_spilled_items = effects.collapse_spilled_items.push(...new_contents.toArray());\n            new_contents = List<Item>();\n            new_box = new_box.update({contents: new_contents});\n        }\n\n        return new_box;\n    }\n\n    lift() {\n        let effects = world_update.effects;\n        let inner_this = this;\n\n        let new_contents = this.contents;\n        let new_rend_state = this.rend_state;\n        let new_dangle_state = this.dangle_state;\n\n        if (new_contents.size > 0) {\n            let test_box_mesh = this.box_mesh.roll(Direction.s).roll(Direction.s);\n\n            test_box_mesh.get_free_rends().forEach(function (r) {\n                let face_membership = test_box_mesh.get_partition_face_membership(r);\n                let test_faces = [Face.b, Face.n, Face.s, Face.e, Face.w];\n                let count = test_faces.map(face_membership.get).reduce((x, y) => x + y);\n                if (face_membership.get(Face.t) > count) {\n                    effects.spillage_level = SpillageLevel.heavy;\n                    effects.spill_faces = effects.spill_faces.push(Face.b);\n\n                    effects.spilled_items = effects.spilled_items.push(...new_contents.toArray());\n                    new_contents = List<Item>();\n\n                    if (new_rend_state.get(r, RendState.closed) == RendState.closed) {\n                        effects.spilled_rends = effects.spilled_rends.add(r);\n                        new_rend_state = new_rend_state.set(r, RendState.open);\n                    }\n                }\n            });\n\n            test_box_mesh.get_dangles().forEach(function (d) {\n                if (d.free_face == Face.t) {\n                    effects.spillage_level = SpillageLevel.heavy;\n                    effects.spill_faces = effects.spill_faces.push(Face.b);\n\n                    effects.spilled_items = effects.spilled_items.push(...new_contents.toArray());\n                    new_contents = List<Item>();\n\n                    effects.spilled_dangles = effects.spilled_dangles.add(d);\n                    new_dangle_state = new_dangle_state.set(d, RendState.open);\n                }\n            });\n\n            this.rend_state.forEach(function (state, r) {\n                let face_membership = inner_this.box_mesh.get_partition_face_membership(r);\n                let light_spill_faces = [Face.n, Face.s, Face.e, Face.w].filter((f) => face_membership.get(f) > 0);\n                if (light_spill_faces.length > 0) {\n                    if (effects.spillage_level < SpillageLevel.light) {\n                        effects.spillage_level = SpillageLevel.light;\n                    }\n                    effects.spill_faces.push(...light_spill_faces);\n\n                    if (new_contents.size > 0) {\n                        effects.spilled_items = effects.spilled_items.push(new_contents.first());\n                        new_contents = new_contents.rest();\n                    }\n                    if (state == RendState.closed) {\n                        effects.spilled_rends.add(r);\n                        new_rend_state = new_rend_state.set(r, RendState.open);\n                    }\n                }\n            });\n\n            this.dangle_state.forEach(function (state, d) {\n                if ([Face.n, Face.s, Face.e, Face.w].indexOf(d.free_face) !== -1) {\n                    if (effects.spillage_level < SpillageLevel.light) {\n                        effects.spillage_level = SpillageLevel.light;\n                    }\n                    effects.spill_faces.push(d.free_face);\n\n                    if (new_contents.size > 0) {\n                        effects.spilled_items = effects.spilled_items.push(new_contents.first());\n                        new_contents = new_contents.rest();\n                    }\n                }\n            });\n        }\n\n        let new_box = this.update({rend_state: new_rend_state, dangle_state: new_dangle_state, contents: new_contents});\n\n        if (new_box.is_collapsed()) {\n            effects.box_collapsed = true;\n            effects.collapse_spilled_items = effects.collapse_spilled_items.push(...new_contents.toArray());\n            new_contents = List<Item>();\n            new_box = new_box.update({contents: new_contents});\n        }\n\n        return new_box;\n    }\n\n    cut(face: Face, start: Point2, end: Point2) {\n        return this.cut_or_tape(EdgeOperation.cut, face, start, end);\n    }\n\n    tape(face: Face, start: Point2, end: Point2) {\n        return this.cut_or_tape(EdgeOperation.tape, face, start, end);\n    }\n\n    cut_or_tape(operation: EdgeOperation, face: Face, start: Point2, end: Point2) {\n        let effects = world_update.effects;\n        let inner_this = this;\n\n        if (face !== Face.s && face !== Face.t) {\n            throw new WorldUpdateError('cannot cut or tape sides other than top or front');\n        }\n\n        let [x1, y1] = start;\n        let [x2, y2] = end;\n        let v1 = this.box_mesh.face_meshes.get(face).vertices.get(x1, y1);\n        let v2 = this.box_mesh.face_meshes.get(face).vertices.get(x2, y2);\n\n        let edge = new Edge(v1, v2);\n\n        let quadrants = edge_2_quadrants.get(edge);\n\n        this.rend_state.forEach(function (state, r) {\n            if (state == RendState.open && quadrants.every(r.contains)) {\n                throw new WorldUpdateError('cannot cut or tape on an open rend');\n            }\n        });\n\n        this.dangle_state.forEach(function (state, d) {\n            if (state == RendState.open && quadrants.every(d.partition.contains)) {\n                throw new WorldUpdateError('cannot cut or tape on an open dangle');\n            }\n        });\n\n        let new_box_mesh: BoxMesh;\n        if (operation == EdgeOperation.cut) {\n            new_box_mesh = this.box_mesh.cut(face, start, end);\n        } else {\n            new_box_mesh = this.box_mesh.tape(face, start, end);\n        }\n\n        let new_rend_state = this.default_rend_state(new_box_mesh);\n        this.rend_state.forEach(function (state, r) {\n            if (new_rend_state.has(r)) {\n                new_rend_state = new_rend_state.set(r, state);\n            } else {\n                effects.repaired_rends = effects.repaired_rends.push(r);\n            }\n        });\n\n        new_rend_state.forEach(function (state, new_r) {\n            if (!inner_this.rend_state.has(new_r)) {\n                effects.new_rends = effects.new_rends.push(new_r);\n            }\n        });\n\n        let new_dangle_state = this.default_dangle_state(new_box_mesh);\n        this.dangle_state.forEach(function (state, d) {\n            if (new_dangle_state.has(d)) {\n                new_dangle_state = new_dangle_state.set(d, state);\n            } else {\n                effects.repaired_dangles = effects.repaired_dangles.push(d);\n            }\n        });\n\n        new_dangle_state.forEach(function (state, new_d) {\n            if (!inner_this.dangle_state.has(new_d)) {\n                effects.new_dangles = effects.new_dangles.push(new_d);\n            }\n        });\n\n        let new_edge_state = this.edge_state;\n        if (operation == EdgeOperation.cut) {\n            new_edge_state = new_edge_state.set(edge, new_edge_state.get(edge, new EdgeState()).cut());\n        } else {\n            new_edge_state = new_edge_state.set(edge, new_edge_state.get(edge, new EdgeState()).apply_tape());\n        }\n\n        return this.update({box_mesh: new_box_mesh, rend_state: new_rend_state, dangle_state: new_dangle_state, edge_state: new_edge_state});\n    }\n\n    take_next_item() {\n        let effects = world_update.effects;\n\n        if (this.contents.size == 0) {\n            throw new WorldUpdateError('cannot take an item from an empty box');\n        }\n\n        if (!this.appears_open()) {\n            throw new WorldUpdateError('cannot take an item from a box with no visible openings');\n        }\n\n        let new_contents = this.contents;\n        effects.taken_items = effects.taken_items.push(new_contents.first());\n        new_contents = new_contents.rest();\n\n        return this.update({contents: new_contents});\n    }\n\n    next_item() {\n        if (this.contents.size == 0) {\n            return null;\n        }\n        return this.contents.first();\n    }\n\n    appears_open() {\n        if (this.rend_state.some((state) => state == RendState.open)) {\n            return true;\n        }\n        if (this.dangle_state.some((state) => state == RendState.open)) {\n            return true;\n        }\n        return false;\n    }\n\n    appears_empty() {\n        return this.appears_open() && this.contents.size == 0;\n    }\n\n    is_collapsed(){\n        let open_faces = Map<Face, number>().asMutable();\n        let inner_this = this;\n        \n        this.rend_state.forEach(function (state, r) {\n            if (state == RendState.open){\n                let face_membership = inner_this.box_mesh.get_partition_face_membership(r);\n                counter_update(open_faces, face_membership);\n            }\n        });\n\n        this.dangle_state.forEach(function (state, d) {\n            if (state == RendState.open){\n                let face_membership = inner_this.box_mesh.get_partition_face_membership(d.partition);\n                counter_update(open_faces, face_membership);\n            }\n        });\n\n        let total_open_sides = 0;\n        open_faces.forEach(function (count, face) {\n            if (count > 0) {\n                total_open_sides += 1;\n            }\n        });\n\n        return total_open_sides >= 3;\n    }\n}\n\nexport interface SingleBoxWorldParams {\n    box?: Box,\n    taken_items?: List<Item>,\n    spilled_items?: List<Item>\n}\n\nexport class SingleBoxWorld {\n    readonly box: Box;\n    readonly taken_items: List<Item>;\n    readonly spilled_items: List<Item>;\n\n    constructor({box, taken_items, spilled_items}: SingleBoxWorldParams) {\n        if (box === undefined) {\n            box = new Box({});\n        }\n        this.box = box;\n\n        if (taken_items === undefined) {\n            taken_items = List<Item>();\n        }\n        this.taken_items = taken_items;\n\n        if (spilled_items === undefined) {\n            spilled_items = List<Item>();\n        }\n        this.spilled_items = spilled_items;\n    }\n\n    update({box, taken_items, spilled_items}: SingleBoxWorldParams) {\n        if (box === undefined) {\n            box = this.box;\n        }\n\n        if (taken_items === undefined) {\n            taken_items = this.taken_items;\n        }\n\n        if (spilled_items === undefined) {\n            spilled_items = this.spilled_items;\n        }\n\n        return new SingleBoxWorld({box, taken_items, spilled_items});\n    }\n\n    cut_message(new_box: Box, cut_edge_states: List<EdgeState>, effects: WorldUpdateEffects) {\n        let cut_message: string;\n        if (cut_edge_states.get(0).cardboard == CardboardEdge.intact) {\n            cut_message = 'You slide your blade along the cardboard';\n            if (cut_edge_states.get(0).tape == TapeEdge.taped) {\n                cut_message += ' and tape';\n            }\n            cut_message += '.';\n        } else {\n            if (cut_edge_states.get(0).tape == TapeEdge.taped) {\n                cut_message = 'You draw your blade easily along the line. It slits open the thin layer of tape covering the gap in the cardboard.';\n            } else {\n                cut_message = 'You slide your blade along the line, but nothing is there to resist it.';\n            }\n        }\n\n        if (cut_edge_states.size > 1) {\n            if (cut_edge_states.get(1).cardboard != cut_edge_states.get(0).cardboard) {\n                if (cut_edge_states.get(1).cardboard == CardboardEdge.intact) {\n                    cut_message += ' Halfway across, it catches on solid cardboard, and you pull it along the rest of the way.';\n                } else {\n                    if (cut_edge_states.get(1).tape == TapeEdge.taped) {\n                        cut_message += ' Halfway across, you reach a gap in the cardboard, and your blade slides easily along the thin layer of tape.';\n                    } else {\n                        cut_message += ' Halfway across, you reach a gap in the cardboard, and your blade is met with no further resistance.';\n                    }\n                }\n            }\n        }\n\n        let message = cut_message;\n        if (effects.new_rends.size > 0) {\n            let total_face_membership = Map<Face, number>();\n            effects.new_rends.forEach(function (r) {\n                let face_membership = new_box.box_mesh.get_partition_face_membership(r);\n                total_face_membership = counter_update(total_face_membership, face_membership);\n            })\n            let face_order = counter_order(total_face_membership);\n            let face_msg = face_message(face_order);\n\n            let new_rends_message: string;\n            if (effects.new_rends.size == 1) {\n                new_rends_message = `A new section of cardboard comes free on the ${face_msg}.`;\n            } else {\n                new_rends_message = `${effects.new_rends.size} new sections of cardboard come free on the ${face_msg}.`;\n            }\n            message += '\\n' + new_rends_message;\n        }\n\n        if (effects.new_dangles.size > 0) {\n            let total_face_membership = Map<Face, number>();\n            effects.new_dangles.forEach(function (d) {\n                let face_membership = new_box.box_mesh.get_partition_face_membership(d.partition);\n                total_face_membership = counter_update(total_face_membership, face_membership);\n            })\n            let face_order = counter_order(total_face_membership);\n            let face_msg = face_message(face_order);\n\n            let new_rends_message: string;\n            if (effects.new_dangles.size == 1) {\n                new_rends_message = `A new section of cardboard on the ${face_msg} can be swung freely on a hinge.`;\n            } else {\n                new_rends_message = `${effects.new_dangles.size} new sections of cardboard on the ${face_msg} can be swung freely on a hinge.`;\n            }\n            message += '\\n' + new_rends_message;\n        }\n        return message;\n    }\n\n    tape_message(new_box: Box, cut_edge_states: List<EdgeState>, effects: WorldUpdateEffects) {\n        let tape_message: string;\n        if (cut_edge_states.some((ces) => ces.cardboard == CardboardEdge.intact)) {\n            tape_message = 'You draw out a length of tape and fasten it to the cardboard.';\n        } else {\n            if (cut_edge_states.some((ces) => ces.tape == TapeEdge.taped)) {\n                tape_message = 'You lay another length of tape over the cut edge.';\n            } else {\n                tape_message = 'You seal the gap in the cardboard with a length of tape.';\n            }\n        }\n\n        let message = tape_message;\n        if (effects.repaired_dangles.size > 0) {\n            let total_face_membership = Map<Face, number>();\n            effects.repaired_dangles.forEach(function (d) {\n                let face_membership = new_box.box_mesh.get_partition_face_membership(d.partition);\n                total_face_membership = counter_update(total_face_membership, face_membership);\n            })\n            let face_order = counter_order(total_face_membership);\n            let face_msg = face_message(face_order);\n\n            let repaired_dangles_message: string;\n            if (effects.new_rends.size == 1) {\n                repaired_dangles_message = `A formerly freely-swinging section of cardboard on the ${face_msg} can no longer swing on its hinge.`;\n            } else {\n                repaired_dangles_message = `${face_order.size} formerly freely-swinging sections of cardboard on the ${face_msg} can no longer swing on their hinges.`;\n            }\n            message += '\\n' + repaired_dangles_message;\n        }\n        return message;\n    }\n\n    item_spill_message(spilled_items: List<Item>){\n        let si = spilled_items;\n        let during_spill_msg: string;\n        let after_spill_msg: string;\n\n        if (si.size == 1) {\n            let item_msg = si.get(0).pre_gestalt();\n            during_spill_msg = `${capitalize(item_msg)} spills out before you.`;\n            after_spill_msg = `It's ${si.get(0).article()} ${si.get(0).name()} - ${si.get(0).post_gestalt()}.`;\n        } else {\n            let item_msg = si.butLast().map((i) => i.pre_gestalt()).join(', ') + ' and ' + si.last().pre_gestalt();\n            during_spill_msg = capitalize(`${item_msg} spill out before you.`);\n\n            let after_msgs = si.map((i) => `${i.article()} ${i.name()} - ${i.post_gestalt()}`);\n            after_spill_msg = \"It's \" + after_msgs.butLast().join(', ') + ' and ' + after_msgs.last() + '.';\n        }\n\n        let spill_msg = during_spill_msg + ' ' + after_spill_msg;\n        return spill_msg;\n    }\n\n    spill_message(new_box: Box) {\n        let effects = world_update.effects;\n\n        let structural_dmg_msgs = List<string>();\n\n        if (effects.spilled_rends.size > 0) {\n            let total_face_membership = Map<Face, number>();\n            effects.spilled_rends.forEach(function (sr) {\n                let sr_mem = new_box.box_mesh.get_partition_face_membership(sr);\n                total_face_membership = counter_update(total_face_membership, sr_mem);\n            });\n            let sr_faces = counter_order(total_face_membership);\n            let f_msg = face_message(sr_faces);\n            let spilled_rends_msg = `free cardboard on the ${f_msg} falls away`;\n            structural_dmg_msgs = structural_dmg_msgs.push(spilled_rends_msg);\n        }\n\n        if (effects.spilled_dangles.size > 0) {\n            let total_face_membership = Map<Face, number>();\n            effects.spilled_dangles.forEach(function (sd) {\n                let sd_mem = new_box.box_mesh.get_partition_face_membership(sd.partition);\n                total_face_membership = counter_update(total_face_membership, sd_mem);\n            });\n            let sd_faces = counter_order(total_face_membership);\n            let f_msg = face_message(sd_faces);\n            let spilled_dangles_msg = `dangling cardboard on the ${f_msg} swings open`;\n            structural_dmg_msgs = structural_dmg_msgs.push(spilled_dangles_msg);\n        }\n\n        let spill_msg = this.item_spill_message(effects.spilled_items);\n        let result: string;\n\n        if (structural_dmg_msgs.size > 0) {\n            let structure_dmg_msg = structural_dmg_msgs.join(' and ');\n            result = `${structure_dmg_msg}. ${spill_msg}`;\n        } else {\n            result = spill_msg;\n        }\n        return result;\n    }\n}\n\nlet commands: Command<SingleBoxWorld>[] = [];\n\nlet rotate_y_box: Command<SingleBoxWorld> = {\n    command_name: ['rotate'],\n    \n    execute: function(world:SingleBoxWorld, parser: CommandParser): CommandResult<SingleBoxWorld> {\n        let dir_word = parser.consume_option<RotateYDirWord>(rotate_y_word_tokens);\n        if (!dir_word) {\n            return;\n        }\n        if (!parser.done()){\n            return;\n        }\n\n        let degrees = dir_word == 'right' ? 90 : 270;\n        let new_box = world.box.rotate_y(degrees);\n        let new_world = world.update({box: new_box});\n\n        let message = `You turn the box 90 degrees to the ${dir_word}`;\n\n        return {\n            world: new_world,\n            message: message\n        };\n    }\n}\ncommands.push(rotate_y_box);\n\nlet roll_box: Command<SingleBoxWorld> = {\n    command_name: [\"roll\"],\n\n    execute: function(world: SingleBoxWorld, parser: CommandParser): CommandResult<SingleBoxWorld> {\n        return with_world_update(function (effects) {\n            let dir_word = parser.consume_option<RollDirWord>(roll_dir_word_tokens);\n            if (!dir_word) {\n                return;\n            }\n            if (!parser.done()) {\n                return;\n            }\n            let direction = word_2_dir.get(dir_word);\n            let new_box = world.box.roll(direction);\n\n            let dir_msg = (dir_word == 'left' || dir_word == 'right') ? `over to the ${dir_word}` : dir_word;\n\n            let message: string;\n            let new_world: SingleBoxWorld;\n            if (effects.spillage_level == SpillageLevel.none) {\n                message = `You roll the box ${dir_msg}.`;\n                new_world = world.update({box: new_box});\n            } else {\n                let spill_msg = uncapitalize(world.spill_message(new_box));\n                message = `As you roll the box ${dir_msg}, ${spill_msg}`;\n\n                new_world = world.update({box: new_box, spilled_items: effects.spilled_items});\n            }\n\n            if (effects.box_collapsed) {\n                message += '\\nThe added stress on the box causes it to collapse in on itself.';\n                if (effects.collapse_spilled_items.size > 0) {\n                    message += ' ';\n                    message += world.item_spill_message(effects.collapse_spilled_items);\n                }\n            }\n\n            return {\n                world: new_world,\n                message: message\n            };\n        });\n    }\n}\ncommands.push(roll_box);\n\nlet lift_box: Command<SingleBoxWorld> = {\n    command_name: ['lift'],\n    execute: function(world: SingleBoxWorld, parser: CommandParser): CommandResult<SingleBoxWorld> {\n        //let inner_this = this;\n        return with_world_update(function (effects) {\n            if (!parser.done()){\n                return;\n            }\n            let new_box = world.box.lift();\n\n            let msg: string;\n            let new_world: SingleBoxWorld;\n            if (effects.spillage_level == SpillageLevel.none) {\n                msg = 'You lift up the box in place.';\n                new_world = world.update({box: new_box});\n            } else {\n                let spill_msg = uncapitalize(world.spill_message(new_box));\n                msg = 'As you start to lift up the box, ' + spill_msg;\n                new_world = world.update({box: new_box, spilled_items: effects.spilled_items});\n            }\n\n            if (effects.spillage_level <= SpillageLevel.heavy && !effects.box_collapsed) {\n                let total_weight = new_box.contents.reduce((x, i) => x + i.weight(), 0);\n                total_weight = Math.floor(total_weight / 2.9); //rule of thumb for translating \"normal item weights\" to \"normal box weights\"\n\n                if (total_weight > Weight.very_heavy) {\n                    total_weight = Weight.very_heavy;\n                }\n                let weight_2_msg = Map<Weight, string>([\n                    [Weight.empty, 'so light as to be empty'],\n                    [Weight.very_light, 'quite light'],\n                    [Weight.light, 'light'],\n                    [Weight.medium, 'neither light nor heavy'],\n                    [Weight.heavy, 'somewhat heavy'],\n                    [Weight.very_heavy, 'very heavy']\n                ]);\n                let weight_msg = weight_2_msg.get(total_weight);\n                let subject = effects.spillage_level == SpillageLevel.none ? 'It' : 'The box';\n                msg += `\\n${subject} feels ${weight_msg}. You set it back down.`;\n            }\n\n            if (effects.box_collapsed) {\n                msg += '\\nThe added stress on the box causes it to collapse in on itself.';\n                if (effects.collapse_spilled_items.size > 0) {\n                    msg += ' ' + world.item_spill_message(effects.collapse_spilled_items);\n                }\n            }\n\n            return {world:new_world, message: msg};\n        });\n    }\n}\ncommands.push(lift_box);\n\nlet cut_box: Command<SingleBoxWorld> = {\n    command_name: ['cut'],\n    execute: cut_or_tape_box\n}\ncommands.push(cut_box);\n\nlet tape_box: Command<SingleBoxWorld> = {\n    command_name: ['tape'],\n    execute: cut_or_tape_box\n}\ncommands.push(tape_box);\n\nfunction cut_or_tape_box(world: SingleBoxWorld, parser: CommandParser): CommandResult<SingleBoxWorld> {\n    //operation: EdgeOpWord, face_w: FaceWord, dir: EdgeDirWord, start_pos_a: PositionWord, start_pos_b: PositionWord, end_pos_b: PositionWord): CommandResult {\n    //let inner_this = this;\n    return with_world_update(function (effects) {\n        let operation: EdgeOpWord = <EdgeOpWord>untokenize(parser.get_match('command').tokens);\n        \n        if (!parser.consume_filler(['on'])){\n            return;\n        }\n\n        let face_w = parser.consume_option<FaceWord>(face_word_tokens, 'face');\n        if (!face_w){\n            return;\n        }\n        let face = word_2_face.get(face_w);\n        if (face !== Face.t && face !== Face.s) {\n            parser.get_match('face').display = DisplayEltType.error;\n            parser.validity = MatchValidity.invalid;\n            return {message: `Face must be either top or front. got ${face_w}`};\n        }\n\n        let dir = parser.consume_option(edge_dir_word_tokens);\n        if (!dir){\n            return;\n        }\n\n        if (!parser.consume_filler(['along'])){\n            return;\n        }\n        let dim_2_pos = [\n            ['left', 'center', 'right'],\n            ['top','middle', 'bottom']\n        ];\n\n        let dim_a: number;\n        let dim_b: number;\n\n        if (dir === 'vertically') {\n            dim_a = 0;\n            dim_b = 1;\n        } else {\n            dim_a = 1;\n            dim_b = 0;\n        }\n\n        let start_pos_a = parser.consume_option(position_word_tokens, 'start_pos_a');\n        if (!start_pos_a) {\n            return;\n        }\n\n        if (dim_2_pos[dim_a].indexOf(start_pos_a) === -1) {\n            parser.get_match('start_pos_a').display = DisplayEltType.error;\n            parser.validity = MatchValidity.invalid;\n            return {message: `invalid start_pos_a for ${dir} ${operation}: ${start_pos_a}`};\n        }\n\n        if (!parser.consume_filler(['from'])){\n            return;\n        }\n\n        let start_pos_b = parser.consume_option(position_word_tokens, 'start_pos_b');\n        if (!start_pos_b) {\n            return;\n        }\n        if (dim_2_pos[dim_b].indexOf(start_pos_b) === -1) {\n            parser.get_match('start_pos_b').display = DisplayEltType.error;\n            parser.validity = MatchValidity.invalid;\n            return {message: `invalid start_pos_b for ${dir} ${operation}: ${start_pos_b}`};\n        }\n\n        if (!parser.consume_filler(['to'])){\n            return;\n        }\n        let end_pos_b = parser.consume_option(position_word_tokens, 'end_pos_b');\n        if (!end_pos_b) {\n            return;\n        }\n        if (dim_2_pos[dim_b].indexOf(end_pos_b) === -1) {\n            parser.get_match('end_pos_b').display = DisplayEltType.error;\n            parser.validity = MatchValidity.invalid;\n            return {message: `invalid end_pos_b for ${dir} ${operation}: ${end_pos_b}`};\n        }\n\n        let pt1: Point2 = [null, null];\n        let pt2: Point2 = [null, null];\n\n        pt1[dim_a] = pt2[dim_a] = dim_2_pos[dim_a].indexOf(start_pos_a);\n\n        pt1[dim_b] = dim_2_pos[dim_b].indexOf(start_pos_b);\n        pt2[dim_b] = dim_2_pos[dim_b].indexOf(end_pos_b);\n\n        if (Math.abs(pt1[dim_b] - pt2[dim_b]) == 0) {\n            parser.get_match('end_pos_b').display = DisplayEltType.error;\n            return {message: 'no change between start_pos_b and end_pos_b.'};\n        }\n\n        if (!parser.done()){\n            return;\n        }\n\n        let cut_points: [Point2, Point2][];\n        if (Math.abs(pt1[dim_b] - pt2[dim_b]) == 2) {\n            let pt3: Point2 = [null, null];\n            pt3[dim_a] = dim_2_pos[dim_a].indexOf(start_pos_a);\n            pt3[dim_b] = 1;\n\n            cut_points = [[pt1, pt3], [pt3, pt2]];\n        } else {\n            cut_points = [[pt1, pt2]];\n        }\n\n        let cut_edge_states = List<EdgeState>();\n\n        let new_box = world.box;\n\n        cut_points.forEach(function ([p1, p2]) {\n            let vertices = new_box.box_mesh.face_meshes.get(face).vertices;\n            let v1 = vertices.get(p1[0], p1[1]);\n            let v2 = vertices.get(p2[0], p2[1]);\n            let edge = new Edge(v1, v2);\n\n            cut_edge_states = cut_edge_states.push(new_box.edge_state.get(edge, new EdgeState()));\n            new_box = new_box.cut_or_tape(word_2_edge_op.get(operation), face, p1, p2);\n        });\n\n        effects.new_dangles.forEach(function (nd) {\n            if (effects.new_rends.contains(nd.partition)) {\n                effects.new_dangles = effects.new_dangles.remove(effects.new_dangles.indexOf(nd));\n            }\n        });\n\n        effects.repaired_dangles.forEach(function (rd) {\n            if (effects.new_rends.contains(rd.partition)) {\n                effects.repaired_dangles = effects.repaired_dangles.remove(effects.repaired_dangles.indexOf(rd));\n            }\n        });\n\n        let message: string;\n        if (operation == 'cut') {\n            message = world.cut_message(new_box, cut_edge_states, effects);\n        } else {\n            message = world.tape_message(new_box, cut_edge_states, effects);\n        }\n\n        return {world: world.update({box: new_box}), message: message};\n    });\n}\n\nlet open_dangle: Command<SingleBoxWorld> = {\n    command_name: ['open'],\n    execute: open_or_close_dangle\n}\ncommands.push(open_dangle);\n\nlet close_dangle: Command<SingleBoxWorld> = {\n    command_name: ['close'],\n    execute: open_or_close_dangle\n}\ncommands.push(close_dangle);\n\nfunction open_or_close_dangle(world: SingleBoxWorld, parser: CommandParser): CommandResult<SingleBoxWorld> {\n    // operation: DangleOpWord, face_w: FaceWord)\n    return with_world_update(function (effects) {\n        let operation = <DangleOpWord>untokenize(parser.get_match('command').tokens);\n        let face_w = parser.consume_option<FaceWord>(face_word_tokens, 'face');\n        if (!face_w || !parser.done()) {\n            return;\n        }\n\n        let face = word_2_face.get(face_w)\n        let applicable_dangles = world.box.dangle_state.keySeq().filter((d) => d.free_face == face);\n        let new_box = world.box;\n        let updated = List<Dangle>();\n        applicable_dangles.forEach(function (d){\n            let err = false;\n            try {\n                new_box = new_box.open_or_close_dangle(word_2_dangle_op.get(operation), d);\n            } catch (e) {\n                err = true;\n                if (!(e instanceof WorldUpdateError)) {\n                    throw e;\n                }\n            }\n            if (!err) {\n                updated = updated.push(d);\n            }\n        });\n        if (updated.size === 0) {\n            parser.get_match('face').display = DisplayEltType.error;\n            parser.validity = MatchValidity.invalid;\n            return {message: `No dangles to ${operation} on ${face_w} face`};\n        }\n\n        let swing_dir_msg = operation === 'close' ? 'in' : 'out';\n        let num_hinges = updated.map((d) => d.fixed_face).toSet().size;\n        let hinge_msg: string;\n        if (num_hinges == 1) {\n            hinge_msg = 'hinge';\n        } else {\n            hinge_msg = 'hinges';\n        }\n\n        let message = `You swing the cardboard on the ${face_w} of the box ${swing_dir_msg} on its ${hinge_msg}`;\n        if (!world.box.appears_open() && new_box.appears_open()) {\n            message += '\\nYou get a glimpse inside the box through the opening.';\n\n            if (new_box.appears_empty()) {\n                message += \" It's empty.\";\n            } else {\n                message += ` You can see ${new_box.next_item().pre_gestalt()} inside.`;\n            }\n        }\n        if (effects.box_collapsed) {\n            message += '\\nThe added stress on the box causes it to collapse in on itself.';\n            if (effects.collapse_spilled_items.size > 0) {\n                message += ' ' + world.item_spill_message(effects.collapse_spilled_items);\n            }\n        }\n        return {world: world.update({box: new_box}), message: message};\n    });\n}\n\nlet remove_rend: Command<SingleBoxWorld> = {\n    command_name: ['remove'],\n    execute: remove_or_replace_rend\n}\ncommands.push(remove_rend);\n\nlet replace_rend: Command<SingleBoxWorld> = {\n    command_name: ['replace'],\n    execute: remove_or_replace_rend\n}\ncommands.push(replace_rend);\n\nfunction remove_or_replace_rend(world: SingleBoxWorld, parser: CommandParser): CommandResult<SingleBoxWorld> {\n    //operation: RendOpWord, face_w: FaceWord): CommandResult {\n    return with_world_update(function (effects) {\n        let operation = <RendOpWord>untokenize(parser.get_match('command').tokens);\n        let face_w = parser.consume_option<FaceWord>(face_word_tokens, 'face');\n        if (!face_w || !parser.done()) {\n            return;\n        }\n\n        let face = word_2_face.get(face_w);\n        let applicable_rends = List<Partition>();\n        world.box.rend_state.forEach(function (s, r) {\n            let face_membership = world.box.box_mesh.get_partition_face_membership(r);\n            if (face_membership.get(face) > 0) {\n                applicable_rends = applicable_rends.push(r);\n            }\n        });\n\n        let new_box = world.box;\n        let updated = List<Partition>();\n        applicable_rends.forEach(function (r){\n            let err = false;\n            try {\n                new_box = new_box.open_or_close_rend(word_2_rend_op.get(operation), r);\n            } catch (e) {\n                err = true;\n                if (!(e instanceof WorldUpdateError)) {\n                    throw e;\n                }\n            }\n            if (!err) {\n                updated = updated.push(r);\n            }\n        });\n        if (updated.size == 0) {\n            parser.get_match('face').display = DisplayEltType.error;\n            parser.validity = MatchValidity.invalid;\n            return {message: `No rends to ${operation} on ${face_w} face`};\n        }\n\n        let total_face_membership = Map<Face, number>();\n        total_face_membership = updated.reduce(\n            (total, r) => counter_update(\n                total,\n                world.box.box_mesh.get_partition_face_membership(r)),\n            total_face_membership);\n\n        let face_msg = face_message(counter_order(total_face_membership));\n\n        let message: string;\n        if (operation === 'remove') {\n            message = `You remove the free cardboard from the ${face_msg} and place it to the side.`;\n        } else {\n            `You replace the missing cardboard from the ${face_msg}.`;\n        }\n\n        if (!world.box.appears_open() && new_box.appears_open()) {\n            message += '\\nYou get a glimpse inside the box through the opening.';\n\n            if (new_box.appears_empty()) {\n                message += \" It's empty.\";\n            } else {\n                message += ` You can see ${new_box.next_item().pre_gestalt()} inside.`;\n            }\n        }\n        if (effects.box_collapsed) {\n            message += '\\nThe added stress on the box causes it to collapse in on itself.';\n            if (effects.collapse_spilled_items.size > 0) {\n                message += ' ' + world.item_spill_message(effects.collapse_spilled_items);\n            }\n        }\n        return {world:world.update({box: new_box}), message:message};\n    });\n}\n\nlet take_item: Command<SingleBoxWorld> = {\n    command_name: ['take', 'item'],\n    execute: function(world: SingleBoxWorld, parser: CommandParser): CommandResult<SingleBoxWorld> {\n        return with_world_update(function (effects) {\n            if (!parser.done()) {\n                return;\n            }\n\n            let new_box = world.box.take_next_item();\n\n            let new_taken_items = world.taken_items;\n            new_taken_items.push(...effects.taken_items.toArray());\n\n            let item = effects.taken_items.get(0);\n            let message = `You reach in and take ${item.pre_gestalt()}. It's ${item.post_gestalt()}; ${item.article()} ${item.name()}.`;\n        \n            if (new_box.appears_empty()) {\n                message += '\\nThe box is empty now.';\n            } else {\n                message += `\\nYou can now see ${new_box.next_item().pre_gestalt()} inside the box.`;\n            }\n\n            return {world: world.update({box: new_box, taken_items: new_taken_items}), message: message};\n        });\n    }\n}\ncommands.push(take_item);\n\nexport class WorldDriver {\n    world: SingleBoxWorld;\n\n    constructor (initial_world: SingleBoxWorld) {\n        this.world = initial_world;\n    }\n\n    run(cmd: string) {\n        let tokens = tokenize(cmd);\n        let parser = new CommandParser(tokens);\n\n        let command_map = Map<string, Command<SingleBoxWorld>>().asMutable();\n        let options: Token[][] = [];\n        commands.forEach(function (command){\n            options.push(command.command_name);\n            command_map.set(untokenize(command.command_name), command);\n        });\n\n        let cmd_name = parser.consume_option(options, 'command', DisplayEltType.keyword);\n        if (!cmd_name) {\n            return '';\n        }\n\n        let command = command_map.get(cmd_name)\n        let result = command.execute(this.world, parser);\n        if (result === undefined) {\n            return '';\n        }\n\n        if (result.world !== undefined) {\n            this.world = result.world;\n        }\n        if (result.message !== undefined) {\n            return result.message;\n        }\n    }\n\n    apply_command(cmd: string) {\n        let result = this.run(cmd);\n        console.log(result);\n    }\n}\n\nexport function test() {\n    let contents = List<Item>([new Codex(), new Pinecone(), new CityKey()]);\n    let world = new SingleBoxWorld({box: new Box({contents: contents})});\n\n    console.log('NEW WORLD: test heavy spillage when rolling\\n\\n\\n');\n\n    let d = new WorldDriver(world);\n    d.apply_command('lift');\n    d.apply_command('roll forward');\n    d.apply_command('rotate left');\n\n    // cut the top face vertically along the center from top to bottom\n    d.apply_command('cut on top vertically along center from top to bottom');\n\n    // cut the top face vertically along the right edge from top to bottom\n    d.apply_command('cut on top vertically along right from top to bottom');\n\n    // should result in a dangle\n    // cut the top face horizontally along the top edge from center to right\n    d.apply_command('cut on top horizontally along top from center to right');\n\n    // should result in a rend\n    // cut the top face horizontally along the bottom edge from center to right\n    d.apply_command('cut on top horizontally along bottom from center to right');\n\n    d.apply_command('roll forward');\n\n    // should result in the rend facing straight down, maybe spilling\n    d.apply_command('roll forward');\n\n    d.apply_command('lift');\n\n    console.log('\\n\\n\\nNEW WORLD: test heavy spillage and collapse from bottom when lifting\\n\\n\\n');\n    let d2 = new WorldDriver(world);\n\n    d2.apply_command('cut on front horizontally along bottom from left to right');\n    d2.apply_command('rotate left');\n    d2.apply_command('cut on front horizontally along bottom from left to right');\n    d2.apply_command('rotate left');\n    d2.apply_command('cut on front horizontally along bottom from left to right');\n    d2.apply_command('rotate left');\n    d2.apply_command('cut on front horizontally along bottom from left to right');\n    d2.apply_command('lift');\n    \n    console.log('\\n\\n\\nNEW WORLD: test taping\\n\\n\\n');\n    let d3 = new WorldDriver(world);\n\n    d3.apply_command('cut on top horizontally along top from left to right');\n    d3.apply_command('cut on top horizontally along bottom from left to right');\n    d3.apply_command('cut on top vertically along left from top to bottom');\n\n    d3.apply_command('open top');\n    d3.apply_command('take item');\n\n    d3.apply_command('close top');\n\n    d3.apply_command('cut on top vertically along right from top to bottom');\n    d3.apply_command('remove top');\n    d3.apply_command('take item');\n    d3.apply_command('take item');\n    d3.apply_command('replace top');\n\n    d3.apply_command('tape on top vertically along right from top to bottom');\n    d3.apply_command('tape on top vertically along left from top to middle');\n\n    console.log('\\n\\n\\nNEW WORLD: test light spillage when rolling and lifting\\n\\n\\n');\n    let d4 = new WorldDriver(world);\n\n    d4.apply_command('cut on front horizontally along top from left to right');\n    d4.apply_command('cut on front horizontally along bottom from left to right');\n    d4.apply_command('cut on front vertically along left from top to bottom');\n\n    d4.apply_command('lift');\n\n    d4.apply_command('cut on front vertically along right from top to bottom');\n\n    d4.apply_command('roll right');\n}\n","import {Matrix2, make_matrix2, Dangle, Face, Edge, Partition, faces, EdgeOperation, Point2, Direction, Item, SpillageLevel} from './datatypes';\n\nimport {Map, List, Set, OrderedSet, is} from 'immutable';\n\nexport class WorldUpdateEffects {\n    spill_faces = List<Face>();\n    spilled_items = List<Item>();\n    spilled_rends = Set<Partition>();\n    spilled_dangles = Set<Dangle>();\n    spillage_level = SpillageLevel.none;\n    taken_items = List<Item>();\n    new_rends = List<Partition>();\n    new_dangles = List<Dangle>();\n    repaired_rends = List<Partition>();\n    repaired_dangles = List<Dangle>();\n    box_collapsed = false;\n    collapse_spilled_items = List<Item>();\n}\n\ninterface WorldUpdateEffectsRef {\n    effects?: WorldUpdateEffects\n}\n\nexport let world_update: WorldUpdateEffectsRef = {};\n\nexport function with_world_update<T>(f: (effects: WorldUpdateEffects) => T) {\n    //TODO validate: error if world_update.effects isn't null/undefined\n    world_update.effects = new WorldUpdateEffects();\n    let result = f(world_update.effects);\n    world_update.effects = undefined;\n    return result;\n}\n\n//TODO define world update exceptions"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}