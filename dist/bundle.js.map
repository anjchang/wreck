{"version":3,"sources":["../../node_modules/browser-pack/_prelude.js","../../node_modules/immutable/dist/immutable.js","../../node_modules/jquery.terminal/js/jquery.terminal.js","../../node_modules/jquery/dist/jquery.js","box_geometry.ts","commands.ts","datatypes.ts","items.ts","main.ts","text_tools.ts","world.ts","world_update_effects.ts"],"names":[],"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n *  Copyright (c) 2014-2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(factory((global.Immutable = global.Immutable || {})));\n}(this, (function (exports) { 'use strict';\n\n// Used for setting prototype methods that IE8 chokes on.\nvar DELETE = 'delete';\n\n// Constants describing the size of trie nodes.\nvar SHIFT = 5; // Resulted in best performance after ______?\nvar SIZE = 1 << SHIFT;\nvar MASK = SIZE - 1;\n\n// A consistent shared value representing \"not set\" which equals nothing other\n// than itself, and nothing that could be provided externally.\nvar NOT_SET = {};\n\n// Boolean references, Rough equivalent of `bool &`.\nvar CHANGE_LENGTH = { value: false };\nvar DID_ALTER = { value: false };\n\nfunction MakeRef(ref) {\n  ref.value = false;\n  return ref;\n}\n\nfunction SetRef(ref) {\n  ref && (ref.value = true);\n}\n\n// A function which returns a value representing an \"owner\" for transient writes\n// to tries. The return value will only ever equal itself, and will not equal\n// the return of any subsequent call of this function.\nfunction OwnerID() {}\n\n// http://jsperf.com/copy-array-inline\nfunction arrCopy(arr, offset) {\n  offset = offset || 0;\n  var len = Math.max(0, arr.length - offset);\n  var newArr = new Array(len);\n  for (var ii = 0; ii < len; ii++) {\n    newArr[ii] = arr[ii + offset];\n  }\n  return newArr;\n}\n\nfunction ensureSize(iter) {\n  if (iter.size === undefined) {\n    iter.size = iter.__iterate(returnTrue);\n  }\n  return iter.size;\n}\n\nfunction wrapIndex(iter, index) {\n  // This implements \"is array index\" which the ECMAString spec defines as:\n  //\n  //     A String property name P is an array index if and only if\n  //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n  //     to 2^32−1.\n  //\n  // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n  if (typeof index !== 'number') {\n    var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n    if ('' + uint32Index !== index || uint32Index === 4294967295) {\n      return NaN;\n    }\n    index = uint32Index;\n  }\n  return index < 0 ? ensureSize(iter) + index : index;\n}\n\nfunction returnTrue() {\n  return true;\n}\n\nfunction wholeSlice(begin, end, size) {\n  return (begin === 0 || (size !== undefined && begin <= -size)) &&\n    (end === undefined || (size !== undefined && end >= size));\n}\n\nfunction resolveBegin(begin, size) {\n  return resolveIndex(begin, size, 0);\n}\n\nfunction resolveEnd(end, size) {\n  return resolveIndex(end, size, size);\n}\n\nfunction resolveIndex(index, size, defaultIndex) {\n  // Sanitize indices using this shorthand for ToInt32(argument)\n  // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n  return index === undefined\n    ? defaultIndex\n    : index < 0\n        ? size === Infinity ? size : Math.max(0, size + index) | 0\n        : size === undefined || size === index\n            ? index\n            : Math.min(size, index) | 0;\n}\n\nfunction isImmutable(maybeImmutable) {\n  return (isCollection(maybeImmutable) || isRecord(maybeImmutable)) &&\n    !maybeImmutable.__ownerID;\n}\n\nfunction isCollection(maybeCollection) {\n  return !!(maybeCollection && maybeCollection[IS_ITERABLE_SENTINEL]);\n}\n\nfunction isKeyed(maybeKeyed) {\n  return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);\n}\n\nfunction isIndexed(maybeIndexed) {\n  return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);\n}\n\nfunction isAssociative(maybeAssociative) {\n  return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n}\n\nfunction isOrdered(maybeOrdered) {\n  return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);\n}\n\nfunction isRecord(maybeRecord) {\n  return !!(maybeRecord && maybeRecord[IS_RECORD_SENTINEL]);\n}\n\nfunction isValueObject(maybeValue) {\n  return !!(maybeValue &&\n    typeof maybeValue.equals === 'function' &&\n    typeof maybeValue.hashCode === 'function');\n}\n\nvar IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\nvar IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\nvar IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\nvar IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\nvar IS_RECORD_SENTINEL = '@@__IMMUTABLE_RECORD__@@';\n\nvar Collection = function Collection(value) {\n  return isCollection(value) ? value : Seq(value);\n};\n\nvar KeyedCollection = (function (Collection) {\n  function KeyedCollection(value) {\n    return isKeyed(value) ? value : KeyedSeq(value);\n  }\n\n  if ( Collection ) KeyedCollection.__proto__ = Collection;\n  KeyedCollection.prototype = Object.create( Collection && Collection.prototype );\n  KeyedCollection.prototype.constructor = KeyedCollection;\n\n  return KeyedCollection;\n}(Collection));\n\nvar IndexedCollection = (function (Collection) {\n  function IndexedCollection(value) {\n    return isIndexed(value) ? value : IndexedSeq(value);\n  }\n\n  if ( Collection ) IndexedCollection.__proto__ = Collection;\n  IndexedCollection.prototype = Object.create( Collection && Collection.prototype );\n  IndexedCollection.prototype.constructor = IndexedCollection;\n\n  return IndexedCollection;\n}(Collection));\n\nvar SetCollection = (function (Collection) {\n  function SetCollection(value) {\n    return isCollection(value) && !isAssociative(value) ? value : SetSeq(value);\n  }\n\n  if ( Collection ) SetCollection.__proto__ = Collection;\n  SetCollection.prototype = Object.create( Collection && Collection.prototype );\n  SetCollection.prototype.constructor = SetCollection;\n\n  return SetCollection;\n}(Collection));\n\nCollection.Keyed = KeyedCollection;\nCollection.Indexed = IndexedCollection;\nCollection.Set = SetCollection;\n\nvar ITERATE_KEYS = 0;\nvar ITERATE_VALUES = 1;\nvar ITERATE_ENTRIES = 2;\n\nvar REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\n\nvar ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n\nvar Iterator = function Iterator(next) {\n  this.next = next;\n};\n\nIterator.prototype.toString = function toString () {\n  return '[Iterator]';\n};\n\nIterator.KEYS = ITERATE_KEYS;\nIterator.VALUES = ITERATE_VALUES;\nIterator.ENTRIES = ITERATE_ENTRIES;\n\nIterator.prototype.inspect = (Iterator.prototype.toSource = function() {\n  return this.toString();\n});\nIterator.prototype[ITERATOR_SYMBOL] = function() {\n  return this;\n};\n\nfunction iteratorValue(type, k, v, iteratorResult) {\n  var value = type === 0 ? k : type === 1 ? v : [k, v];\n  iteratorResult\n    ? (iteratorResult.value = value)\n    : (iteratorResult = {\n        value: value,\n        done: false\n      });\n  return iteratorResult;\n}\n\nfunction iteratorDone() {\n  return { value: undefined, done: true };\n}\n\nfunction hasIterator(maybeIterable) {\n  return !!getIteratorFn(maybeIterable);\n}\n\nfunction isIterator(maybeIterator) {\n  return maybeIterator && typeof maybeIterator.next === 'function';\n}\n\nfunction getIterator(iterable) {\n  var iteratorFn = getIteratorFn(iterable);\n  return iteratorFn && iteratorFn.call(iterable);\n}\n\nfunction getIteratorFn(iterable) {\n  var iteratorFn = iterable &&\n    ((REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||\n      iterable[FAUX_ITERATOR_SYMBOL]);\n  if (typeof iteratorFn === 'function') {\n    return iteratorFn;\n  }\n}\n\nfunction isArrayLike(value) {\n  return value && typeof value.length === 'number';\n}\n\nvar Seq = (function (Collection$$1) {\n  function Seq(value) {\n    return value === null || value === undefined\n      ? emptySequence()\n      : isCollection(value) || isRecord(value)\n          ? value.toSeq()\n          : seqFromValue(value);\n  }\n\n  if ( Collection$$1 ) Seq.__proto__ = Collection$$1;\n  Seq.prototype = Object.create( Collection$$1 && Collection$$1.prototype );\n  Seq.prototype.constructor = Seq;\n\n  Seq.of = function of (/*...values*/) {\n    return Seq(arguments);\n  };\n\n  Seq.prototype.toSeq = function toSeq () {\n    return this;\n  };\n\n  Seq.prototype.toString = function toString () {\n    return this.__toString('Seq {', '}');\n  };\n\n  Seq.prototype.cacheResult = function cacheResult () {\n    if (!this._cache && this.__iterateUncached) {\n      this._cache = this.entrySeq().toArray();\n      this.size = this._cache.length;\n    }\n    return this;\n  };\n\n  // abstract __iterateUncached(fn, reverse)\n\n  Seq.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    var cache = this._cache;\n    if (cache) {\n      var size = cache.length;\n      var i = 0;\n      while (i !== size) {\n        var entry = cache[reverse ? size - ++i : i++];\n        if (fn(entry[1], entry[0], this$1) === false) {\n          break;\n        }\n      }\n      return i;\n    }\n    return this.__iterateUncached(fn, reverse);\n  };\n\n  // abstract __iteratorUncached(type, reverse)\n\n  Seq.prototype.__iterator = function __iterator (type, reverse) {\n    var cache = this._cache;\n    if (cache) {\n      var size = cache.length;\n      var i = 0;\n      return new Iterator(function () {\n        if (i === size) {\n          return iteratorDone();\n        }\n        var entry = cache[reverse ? size - ++i : i++];\n        return iteratorValue(type, entry[0], entry[1]);\n      });\n    }\n    return this.__iteratorUncached(type, reverse);\n  };\n\n  return Seq;\n}(Collection));\n\nvar KeyedSeq = (function (Seq) {\n  function KeyedSeq(value) {\n    return value === null || value === undefined\n      ? emptySequence().toKeyedSeq()\n      : isCollection(value)\n          ? isKeyed(value) ? value.toSeq() : value.fromEntrySeq()\n          : isRecord(value) ? value.toSeq() : keyedSeqFromValue(value);\n  }\n\n  if ( Seq ) KeyedSeq.__proto__ = Seq;\n  KeyedSeq.prototype = Object.create( Seq && Seq.prototype );\n  KeyedSeq.prototype.constructor = KeyedSeq;\n\n  KeyedSeq.prototype.toKeyedSeq = function toKeyedSeq () {\n    return this;\n  };\n\n  return KeyedSeq;\n}(Seq));\n\nvar IndexedSeq = (function (Seq) {\n  function IndexedSeq(value) {\n    return value === null || value === undefined\n      ? emptySequence()\n      : isCollection(value)\n          ? isKeyed(value) ? value.entrySeq() : value.toIndexedSeq()\n          : isRecord(value)\n              ? value.toSeq().entrySeq()\n              : indexedSeqFromValue(value);\n  }\n\n  if ( Seq ) IndexedSeq.__proto__ = Seq;\n  IndexedSeq.prototype = Object.create( Seq && Seq.prototype );\n  IndexedSeq.prototype.constructor = IndexedSeq;\n\n  IndexedSeq.of = function of (/*...values*/) {\n    return IndexedSeq(arguments);\n  };\n\n  IndexedSeq.prototype.toIndexedSeq = function toIndexedSeq () {\n    return this;\n  };\n\n  IndexedSeq.prototype.toString = function toString () {\n    return this.__toString('Seq [', ']');\n  };\n\n  return IndexedSeq;\n}(Seq));\n\nvar SetSeq = (function (Seq) {\n  function SetSeq(value) {\n    return (isCollection(value) && !isAssociative(value)\n      ? value\n      : IndexedSeq(value)).toSetSeq();\n  }\n\n  if ( Seq ) SetSeq.__proto__ = Seq;\n  SetSeq.prototype = Object.create( Seq && Seq.prototype );\n  SetSeq.prototype.constructor = SetSeq;\n\n  SetSeq.of = function of (/*...values*/) {\n    return SetSeq(arguments);\n  };\n\n  SetSeq.prototype.toSetSeq = function toSetSeq () {\n    return this;\n  };\n\n  return SetSeq;\n}(Seq));\n\nSeq.isSeq = isSeq;\nSeq.Keyed = KeyedSeq;\nSeq.Set = SetSeq;\nSeq.Indexed = IndexedSeq;\n\nvar IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\n\nSeq.prototype[IS_SEQ_SENTINEL] = true;\n\n// #pragma Root Sequences\n\nvar ArraySeq = (function (IndexedSeq) {\n  function ArraySeq(array) {\n    this._array = array;\n    this.size = array.length;\n  }\n\n  if ( IndexedSeq ) ArraySeq.__proto__ = IndexedSeq;\n  ArraySeq.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n  ArraySeq.prototype.constructor = ArraySeq;\n\n  ArraySeq.prototype.get = function get (index, notSetValue) {\n    return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n  };\n\n  ArraySeq.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    var array = this._array;\n    var size = array.length;\n    var i = 0;\n    while (i !== size) {\n      var ii = reverse ? size - ++i : i++;\n      if (fn(array[ii], ii, this$1) === false) {\n        break;\n      }\n    }\n    return i;\n  };\n\n  ArraySeq.prototype.__iterator = function __iterator (type, reverse) {\n    var array = this._array;\n    var size = array.length;\n    var i = 0;\n    return new Iterator(function () {\n      if (i === size) {\n        return iteratorDone();\n      }\n      var ii = reverse ? size - ++i : i++;\n      return iteratorValue(type, ii, array[ii]);\n    });\n  };\n\n  return ArraySeq;\n}(IndexedSeq));\n\nvar ObjectSeq = (function (KeyedSeq) {\n  function ObjectSeq(object) {\n    var keys = Object.keys(object);\n    this._object = object;\n    this._keys = keys;\n    this.size = keys.length;\n  }\n\n  if ( KeyedSeq ) ObjectSeq.__proto__ = KeyedSeq;\n  ObjectSeq.prototype = Object.create( KeyedSeq && KeyedSeq.prototype );\n  ObjectSeq.prototype.constructor = ObjectSeq;\n\n  ObjectSeq.prototype.get = function get (key, notSetValue) {\n    if (notSetValue !== undefined && !this.has(key)) {\n      return notSetValue;\n    }\n    return this._object[key];\n  };\n\n  ObjectSeq.prototype.has = function has (key) {\n    return this._object.hasOwnProperty(key);\n  };\n\n  ObjectSeq.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    var object = this._object;\n    var keys = this._keys;\n    var size = keys.length;\n    var i = 0;\n    while (i !== size) {\n      var key = keys[reverse ? size - ++i : i++];\n      if (fn(object[key], key, this$1) === false) {\n        break;\n      }\n    }\n    return i;\n  };\n\n  ObjectSeq.prototype.__iterator = function __iterator (type, reverse) {\n    var object = this._object;\n    var keys = this._keys;\n    var size = keys.length;\n    var i = 0;\n    return new Iterator(function () {\n      if (i === size) {\n        return iteratorDone();\n      }\n      var key = keys[reverse ? size - ++i : i++];\n      return iteratorValue(type, key, object[key]);\n    });\n  };\n\n  return ObjectSeq;\n}(KeyedSeq));\nObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;\n\nvar CollectionSeq = (function (IndexedSeq) {\n  function CollectionSeq(collection) {\n    this._collection = collection;\n    this.size = collection.length || collection.size;\n  }\n\n  if ( IndexedSeq ) CollectionSeq.__proto__ = IndexedSeq;\n  CollectionSeq.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n  CollectionSeq.prototype.constructor = CollectionSeq;\n\n  CollectionSeq.prototype.__iterateUncached = function __iterateUncached (fn, reverse) {\n    var this$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var collection = this._collection;\n    var iterator = getIterator(collection);\n    var iterations = 0;\n    if (isIterator(iterator)) {\n      var step;\n      while (!(step = iterator.next()).done) {\n        if (fn(step.value, iterations++, this$1) === false) {\n          break;\n        }\n      }\n    }\n    return iterations;\n  };\n\n  CollectionSeq.prototype.__iteratorUncached = function __iteratorUncached (type, reverse) {\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var collection = this._collection;\n    var iterator = getIterator(collection);\n    if (!isIterator(iterator)) {\n      return new Iterator(iteratorDone);\n    }\n    var iterations = 0;\n    return new Iterator(function () {\n      var step = iterator.next();\n      return step.done ? step : iteratorValue(type, iterations++, step.value);\n    });\n  };\n\n  return CollectionSeq;\n}(IndexedSeq));\n\nvar IteratorSeq = (function (IndexedSeq) {\n  function IteratorSeq(iterator) {\n    this._iterator = iterator;\n    this._iteratorCache = [];\n  }\n\n  if ( IndexedSeq ) IteratorSeq.__proto__ = IndexedSeq;\n  IteratorSeq.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n  IteratorSeq.prototype.constructor = IteratorSeq;\n\n  IteratorSeq.prototype.__iterateUncached = function __iterateUncached (fn, reverse) {\n    var this$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var iterator = this._iterator;\n    var cache = this._iteratorCache;\n    var iterations = 0;\n    while (iterations < cache.length) {\n      if (fn(cache[iterations], iterations++, this$1) === false) {\n        return iterations;\n      }\n    }\n    var step;\n    while (!(step = iterator.next()).done) {\n      var val = step.value;\n      cache[iterations] = val;\n      if (fn(val, iterations++, this$1) === false) {\n        break;\n      }\n    }\n    return iterations;\n  };\n\n  IteratorSeq.prototype.__iteratorUncached = function __iteratorUncached (type, reverse) {\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var iterator = this._iterator;\n    var cache = this._iteratorCache;\n    var iterations = 0;\n    return new Iterator(function () {\n      if (iterations >= cache.length) {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        cache[iterations] = step.value;\n      }\n      return iteratorValue(type, iterations, cache[iterations++]);\n    });\n  };\n\n  return IteratorSeq;\n}(IndexedSeq));\n\n// # pragma Helper functions\n\nfunction isSeq(maybeSeq) {\n  return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);\n}\n\nvar EMPTY_SEQ;\n\nfunction emptySequence() {\n  return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n}\n\nfunction keyedSeqFromValue(value) {\n  var seq = Array.isArray(value)\n    ? new ArraySeq(value)\n    : isIterator(value)\n        ? new IteratorSeq(value)\n        : hasIterator(value) ? new CollectionSeq(value) : undefined;\n  if (seq) {\n    return seq.fromEntrySeq();\n  }\n  if (typeof value === 'object') {\n    return new ObjectSeq(value);\n  }\n  throw new TypeError(\n    'Expected Array or collection object of [k, v] entries, or keyed object: ' +\n      value\n  );\n}\n\nfunction indexedSeqFromValue(value) {\n  var seq = maybeIndexedSeqFromValue(value);\n  if (seq) {\n    return seq;\n  }\n  throw new TypeError(\n    'Expected Array or collection object of values: ' + value\n  );\n}\n\nfunction seqFromValue(value) {\n  var seq = maybeIndexedSeqFromValue(value);\n  if (seq) {\n    return seq;\n  }\n  if (typeof value === 'object') {\n    return new ObjectSeq(value);\n  }\n  throw new TypeError(\n    'Expected Array or collection object of values, or keyed object: ' + value\n  );\n}\n\nfunction maybeIndexedSeqFromValue(value) {\n  return isArrayLike(value)\n    ? new ArraySeq(value)\n    : isIterator(value)\n        ? new IteratorSeq(value)\n        : hasIterator(value) ? new CollectionSeq(value) : undefined;\n}\n\n/**\n * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n *\n * NaN is considered the same as NaN, however -0 and 0 are considered the same\n * value, which is different from the algorithm described by\n * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n *\n * This is extended further to allow Objects to describe the values they\n * represent, by way of `valueOf` or `equals` (and `hashCode`).\n *\n * Note: because of this extension, the key equality of Immutable.Map and the\n * value equality of Immutable.Set will differ from ES6 Map and Set.\n *\n * ### Defining custom values\n *\n * The easiest way to describe the value an object represents is by implementing\n * `valueOf`. For example, `Date` represents a value by returning a unix\n * timestamp for `valueOf`:\n *\n *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n *     var date2 = new Date(1234567890000);\n *     date1.valueOf(); // 1234567890000\n *     assert( date1 !== date2 );\n *     assert( Immutable.is( date1, date2 ) );\n *\n * Note: overriding `valueOf` may have other implications if you use this object\n * where JavaScript expects a primitive, such as implicit string coercion.\n *\n * For more complex types, especially collections, implementing `valueOf` may\n * not be performant. An alternative is to implement `equals` and `hashCode`.\n *\n * `equals` takes another object, presumably of similar type, and returns true\n * if it is equal. Equality is symmetrical, so the same result should be\n * returned if this and the argument are flipped.\n *\n *     assert( a.equals(b) === b.equals(a) );\n *\n * `hashCode` returns a 32bit integer number representing the object which will\n * be used to determine how to store the value object in a Map or Set. You must\n * provide both or neither methods, one must not exist without the other.\n *\n * Also, an important relationship between these methods must be upheld: if two\n * values are equal, they *must* return the same hashCode. If the values are not\n * equal, they might have the same hashCode; this is called a hash collision,\n * and while undesirable for performance reasons, it is acceptable.\n *\n *     if (a.equals(b)) {\n *       assert( a.hashCode() === b.hashCode() );\n *     }\n *\n * All Immutable collections are Value Objects: they implement `equals()`\n * and `hashCode()`.\n */\nfunction is(valueA, valueB) {\n  if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n    return true;\n  }\n  if (!valueA || !valueB) {\n    return false;\n  }\n  if (\n    typeof valueA.valueOf === 'function' && typeof valueB.valueOf === 'function'\n  ) {\n    valueA = valueA.valueOf();\n    valueB = valueB.valueOf();\n    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n      return true;\n    }\n    if (!valueA || !valueB) {\n      return false;\n    }\n  }\n  return !!(isValueObject(valueA) &&\n    isValueObject(valueB) &&\n    valueA.equals(valueB));\n}\n\nfunction fromJS(value, converter) {\n  return fromJSWith(\n    [],\n    converter || defaultConverter,\n    value,\n    '',\n    converter && converter.length > 2 ? [] : undefined,\n    { '': value }\n  );\n}\n\nfunction fromJSWith(stack, converter, value, key, keyPath, parentValue) {\n  var toSeq = Array.isArray(value)\n    ? IndexedSeq\n    : isPlainObj(value) ? KeyedSeq : null;\n  if (toSeq) {\n    if (~stack.indexOf(value)) {\n      throw new TypeError('Cannot convert circular structure to Immutable');\n    }\n    stack.push(value);\n    keyPath && key !== '' && keyPath.push(key);\n    var converted = converter.call(\n      parentValue,\n      key,\n      toSeq(value).map(function (v, k) { return fromJSWith(stack, converter, v, k, keyPath, value); }),\n      keyPath && keyPath.slice()\n    );\n    stack.pop();\n    keyPath && keyPath.pop();\n    return converted;\n  }\n  return value;\n}\n\nfunction defaultConverter(k, v) {\n  return isKeyed(v) ? v.toMap() : v.toList();\n}\n\nfunction isPlainObj(value) {\n  return value &&\n    (value.constructor === Object || value.constructor === undefined);\n}\n\nvar imul = typeof Math.imul === 'function' &&\n  Math.imul(0xffffffff, 2) === -2\n  ? Math.imul\n  : function imul(a, b) {\n      a |= 0; // int\n      b |= 0; // int\n      var c = a & 0xffff;\n      var d = b & 0xffff;\n      // Shift by 0 fixes the sign on the high part.\n      return c * d + ((a >>> 16) * d + c * (b >>> 16) << 16 >>> 0) | 0; // int\n    };\n\n// v8 has an optimization for storing 31-bit signed numbers.\n// Values which have either 00 or 11 as the high order bits qualify.\n// This function drops the highest order bit in a signed number, maintaining\n// the sign bit.\nfunction smi(i32) {\n  return i32 >>> 1 & 0x40000000 | i32 & 0xbfffffff;\n}\n\nfunction hash(o) {\n  if (o === false || o === null || o === undefined) {\n    return 0;\n  }\n  if (typeof o.valueOf === 'function') {\n    o = o.valueOf();\n    if (o === false || o === null || o === undefined) {\n      return 0;\n    }\n  }\n  if (o === true) {\n    return 1;\n  }\n  var type = typeof o;\n  if (type === 'number') {\n    if (o !== o || o === Infinity) {\n      return 0;\n    }\n    var h = o | 0;\n    if (h !== o) {\n      h ^= o * 0xffffffff;\n    }\n    while (o > 0xffffffff) {\n      o /= 0xffffffff;\n      h ^= o;\n    }\n    return smi(h);\n  }\n  if (type === 'string') {\n    return o.length > STRING_HASH_CACHE_MIN_STRLEN\n      ? cachedHashString(o)\n      : hashString(o);\n  }\n  if (typeof o.hashCode === 'function') {\n    return o.hashCode();\n  }\n  if (type === 'object') {\n    return hashJSObj(o);\n  }\n  if (typeof o.toString === 'function') {\n    return hashString(o.toString());\n  }\n  throw new Error('Value type ' + type + ' cannot be hashed.');\n}\n\nfunction cachedHashString(string) {\n  var hash = stringHashCache[string];\n  if (hash === undefined) {\n    hash = hashString(string);\n    if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n      STRING_HASH_CACHE_SIZE = 0;\n      stringHashCache = {};\n    }\n    STRING_HASH_CACHE_SIZE++;\n    stringHashCache[string] = hash;\n  }\n  return hash;\n}\n\n// http://jsperf.com/hashing-strings\nfunction hashString(string) {\n  // This is the hash from JVM\n  // The hash code for a string is computed as\n  // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n  // where s[i] is the ith character of the string and n is the length of\n  // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n  // (exclusive) by dropping high bits.\n  var hash = 0;\n  for (var ii = 0; ii < string.length; ii++) {\n    hash = 31 * hash + string.charCodeAt(ii) | 0;\n  }\n  return smi(hash);\n}\n\nfunction hashJSObj(obj) {\n  var hash;\n  if (usingWeakMap) {\n    hash = weakMap.get(obj);\n    if (hash !== undefined) {\n      return hash;\n    }\n  }\n\n  hash = obj[UID_HASH_KEY];\n  if (hash !== undefined) {\n    return hash;\n  }\n\n  if (!canDefineProperty) {\n    hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n    if (hash !== undefined) {\n      return hash;\n    }\n\n    hash = getIENodeHash(obj);\n    if (hash !== undefined) {\n      return hash;\n    }\n  }\n\n  hash = ++objHashUID;\n  if (objHashUID & 0x40000000) {\n    objHashUID = 0;\n  }\n\n  if (usingWeakMap) {\n    weakMap.set(obj, hash);\n  } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n    throw new Error('Non-extensible objects are not allowed as keys.');\n  } else if (canDefineProperty) {\n    Object.defineProperty(obj, UID_HASH_KEY, {\n      enumerable: false,\n      configurable: false,\n      writable: false,\n      value: hash\n    });\n  } else if (\n    obj.propertyIsEnumerable !== undefined &&\n    obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable\n  ) {\n    // Since we can't define a non-enumerable property on the object\n    // we'll hijack one of the less-used non-enumerable properties to\n    // save our hash on it. Since this is a function it will not show up in\n    // `JSON.stringify` which is what we want.\n    obj.propertyIsEnumerable = function() {\n      return this.constructor.prototype.propertyIsEnumerable.apply(\n        this,\n        arguments\n      );\n    };\n    obj.propertyIsEnumerable[UID_HASH_KEY] = hash;\n  } else if (obj.nodeType !== undefined) {\n    // At this point we couldn't get the IE `uniqueID` to use as a hash\n    // and we couldn't use a non-enumerable property to exploit the\n    // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n    // itself.\n    obj[UID_HASH_KEY] = hash;\n  } else {\n    throw new Error('Unable to set a non-enumerable property on object.');\n  }\n\n  return hash;\n}\n\n// Get references to ES5 object methods.\nvar isExtensible = Object.isExtensible;\n\n// True if Object.defineProperty works as expected. IE8 fails this test.\nvar canDefineProperty = (function() {\n  try {\n    Object.defineProperty({}, '@', {});\n    return true;\n  } catch (e) {\n    return false;\n  }\n})();\n\n// IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n// and avoid memory leaks from the IE cloneNode bug.\nfunction getIENodeHash(node) {\n  if (node && node.nodeType > 0) {\n    switch (node.nodeType) {\n      case 1: // Element\n        return node.uniqueID;\n      case 9: // Document\n        return node.documentElement && node.documentElement.uniqueID;\n    }\n  }\n}\n\n// If possible, use a WeakMap.\nvar usingWeakMap = typeof WeakMap === 'function';\nvar weakMap;\nif (usingWeakMap) {\n  weakMap = new WeakMap();\n}\n\nvar objHashUID = 0;\n\nvar UID_HASH_KEY = '__immutablehash__';\nif (typeof Symbol === 'function') {\n  UID_HASH_KEY = Symbol(UID_HASH_KEY);\n}\n\nvar STRING_HASH_CACHE_MIN_STRLEN = 16;\nvar STRING_HASH_CACHE_MAX_SIZE = 255;\nvar STRING_HASH_CACHE_SIZE = 0;\nvar stringHashCache = {};\n\nvar ToKeyedSequence = (function (KeyedSeq$$1) {\n  function ToKeyedSequence(indexed, useKeys) {\n    this._iter = indexed;\n    this._useKeys = useKeys;\n    this.size = indexed.size;\n  }\n\n  if ( KeyedSeq$$1 ) ToKeyedSequence.__proto__ = KeyedSeq$$1;\n  ToKeyedSequence.prototype = Object.create( KeyedSeq$$1 && KeyedSeq$$1.prototype );\n  ToKeyedSequence.prototype.constructor = ToKeyedSequence;\n\n  ToKeyedSequence.prototype.get = function get (key, notSetValue) {\n    return this._iter.get(key, notSetValue);\n  };\n\n  ToKeyedSequence.prototype.has = function has (key) {\n    return this._iter.has(key);\n  };\n\n  ToKeyedSequence.prototype.valueSeq = function valueSeq () {\n    return this._iter.valueSeq();\n  };\n\n  ToKeyedSequence.prototype.reverse = function reverse () {\n    var this$1 = this;\n\n    var reversedSequence = reverseFactory(this, true);\n    if (!this._useKeys) {\n      reversedSequence.valueSeq = function () { return this$1._iter.toSeq().reverse(); };\n    }\n    return reversedSequence;\n  };\n\n  ToKeyedSequence.prototype.map = function map (mapper, context) {\n    var this$1 = this;\n\n    var mappedSequence = mapFactory(this, mapper, context);\n    if (!this._useKeys) {\n      mappedSequence.valueSeq = function () { return this$1._iter.toSeq().map(mapper, context); };\n    }\n    return mappedSequence;\n  };\n\n  ToKeyedSequence.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    return this._iter.__iterate(function (v, k) { return fn(v, k, this$1); }, reverse);\n  };\n\n  ToKeyedSequence.prototype.__iterator = function __iterator (type, reverse) {\n    return this._iter.__iterator(type, reverse);\n  };\n\n  return ToKeyedSequence;\n}(KeyedSeq));\nToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;\n\nvar ToIndexedSequence = (function (IndexedSeq$$1) {\n  function ToIndexedSequence(iter) {\n    this._iter = iter;\n    this.size = iter.size;\n  }\n\n  if ( IndexedSeq$$1 ) ToIndexedSequence.__proto__ = IndexedSeq$$1;\n  ToIndexedSequence.prototype = Object.create( IndexedSeq$$1 && IndexedSeq$$1.prototype );\n  ToIndexedSequence.prototype.constructor = ToIndexedSequence;\n\n  ToIndexedSequence.prototype.includes = function includes (value) {\n    return this._iter.includes(value);\n  };\n\n  ToIndexedSequence.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    var i = 0;\n    reverse && ensureSize(this);\n    return this._iter.__iterate(\n      function (v) { return fn(v, reverse ? this$1.size - ++i : i++, this$1); },\n      reverse\n    );\n  };\n\n  ToIndexedSequence.prototype.__iterator = function __iterator (type, reverse) {\n    var this$1 = this;\n\n    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n    var i = 0;\n    reverse && ensureSize(this);\n    return new Iterator(function () {\n      var step = iterator.next();\n      return step.done\n        ? step\n        : iteratorValue(\n            type,\n            reverse ? this$1.size - ++i : i++,\n            step.value,\n            step\n          );\n    });\n  };\n\n  return ToIndexedSequence;\n}(IndexedSeq));\n\nvar ToSetSequence = (function (SetSeq$$1) {\n  function ToSetSequence(iter) {\n    this._iter = iter;\n    this.size = iter.size;\n  }\n\n  if ( SetSeq$$1 ) ToSetSequence.__proto__ = SetSeq$$1;\n  ToSetSequence.prototype = Object.create( SetSeq$$1 && SetSeq$$1.prototype );\n  ToSetSequence.prototype.constructor = ToSetSequence;\n\n  ToSetSequence.prototype.has = function has (key) {\n    return this._iter.includes(key);\n  };\n\n  ToSetSequence.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    return this._iter.__iterate(function (v) { return fn(v, v, this$1); }, reverse);\n  };\n\n  ToSetSequence.prototype.__iterator = function __iterator (type, reverse) {\n    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n    return new Iterator(function () {\n      var step = iterator.next();\n      return step.done\n        ? step\n        : iteratorValue(type, step.value, step.value, step);\n    });\n  };\n\n  return ToSetSequence;\n}(SetSeq));\n\nvar FromEntriesSequence = (function (KeyedSeq$$1) {\n  function FromEntriesSequence(entries) {\n    this._iter = entries;\n    this.size = entries.size;\n  }\n\n  if ( KeyedSeq$$1 ) FromEntriesSequence.__proto__ = KeyedSeq$$1;\n  FromEntriesSequence.prototype = Object.create( KeyedSeq$$1 && KeyedSeq$$1.prototype );\n  FromEntriesSequence.prototype.constructor = FromEntriesSequence;\n\n  FromEntriesSequence.prototype.entrySeq = function entrySeq () {\n    return this._iter.toSeq();\n  };\n\n  FromEntriesSequence.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    return this._iter.__iterate(\n      function (entry) {\n        // Check if entry exists first so array access doesn't throw for holes\n        // in the parent iteration.\n        if (entry) {\n          validateEntry(entry);\n          var indexedCollection = isCollection(entry);\n          return fn(\n            indexedCollection ? entry.get(1) : entry[1],\n            indexedCollection ? entry.get(0) : entry[0],\n            this$1\n          );\n        }\n      },\n      reverse\n    );\n  };\n\n  FromEntriesSequence.prototype.__iterator = function __iterator (type, reverse) {\n    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n    return new Iterator(function () {\n      while (true) {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        // Check if entry exists first so array access doesn't throw for holes\n        // in the parent iteration.\n        if (entry) {\n          validateEntry(entry);\n          var indexedCollection = isCollection(entry);\n          return iteratorValue(\n            type,\n            indexedCollection ? entry.get(0) : entry[0],\n            indexedCollection ? entry.get(1) : entry[1],\n            step\n          );\n        }\n      }\n    });\n  };\n\n  return FromEntriesSequence;\n}(KeyedSeq));\n\nToIndexedSequence.prototype.cacheResult = (ToKeyedSequence.prototype.cacheResult = (ToSetSequence.prototype.cacheResult = (FromEntriesSequence.prototype.cacheResult = cacheResultThrough)));\n\nfunction flipFactory(collection) {\n  var flipSequence = makeSequence(collection);\n  flipSequence._iter = collection;\n  flipSequence.size = collection.size;\n  flipSequence.flip = function () { return collection; };\n  flipSequence.reverse = function() {\n    var reversedSequence = collection.reverse.apply(this); // super.reverse()\n    reversedSequence.flip = function () { return collection.reverse(); };\n    return reversedSequence;\n  };\n  flipSequence.has = function (key) { return collection.includes(key); };\n  flipSequence.includes = function (key) { return collection.has(key); };\n  flipSequence.cacheResult = cacheResultThrough;\n  flipSequence.__iterateUncached = function(fn, reverse) {\n    var this$1 = this;\n\n    return collection.__iterate(function (v, k) { return fn(k, v, this$1) !== false; }, reverse);\n  };\n  flipSequence.__iteratorUncached = function(type, reverse) {\n    if (type === ITERATE_ENTRIES) {\n      var iterator = collection.__iterator(type, reverse);\n      return new Iterator(function () {\n        var step = iterator.next();\n        if (!step.done) {\n          var k = step.value[0];\n          step.value[0] = step.value[1];\n          step.value[1] = k;\n        }\n        return step;\n      });\n    }\n    return collection.__iterator(\n      type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,\n      reverse\n    );\n  };\n  return flipSequence;\n}\n\nfunction mapFactory(collection, mapper, context) {\n  var mappedSequence = makeSequence(collection);\n  mappedSequence.size = collection.size;\n  mappedSequence.has = function (key) { return collection.has(key); };\n  mappedSequence.get = function (key, notSetValue) {\n    var v = collection.get(key, NOT_SET);\n    return v === NOT_SET\n      ? notSetValue\n      : mapper.call(context, v, key, collection);\n  };\n  mappedSequence.__iterateUncached = function(fn, reverse) {\n    var this$1 = this;\n\n    return collection.__iterate(\n      function (v, k, c) { return fn(mapper.call(context, v, k, c), k, this$1) !== false; },\n      reverse\n    );\n  };\n  mappedSequence.__iteratorUncached = function(type, reverse) {\n    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n    return new Iterator(function () {\n      var step = iterator.next();\n      if (step.done) {\n        return step;\n      }\n      var entry = step.value;\n      var key = entry[0];\n      return iteratorValue(\n        type,\n        key,\n        mapper.call(context, entry[1], key, collection),\n        step\n      );\n    });\n  };\n  return mappedSequence;\n}\n\nfunction reverseFactory(collection, useKeys) {\n  var this$1 = this;\n\n  var reversedSequence = makeSequence(collection);\n  reversedSequence._iter = collection;\n  reversedSequence.size = collection.size;\n  reversedSequence.reverse = function () { return collection; };\n  if (collection.flip) {\n    reversedSequence.flip = function() {\n      var flipSequence = flipFactory(collection);\n      flipSequence.reverse = function () { return collection.flip(); };\n      return flipSequence;\n    };\n  }\n  reversedSequence.get = function (key, notSetValue) { return collection.get(useKeys ? key : -1 - key, notSetValue); };\n  reversedSequence.has = function (key) { return collection.has(useKeys ? key : -1 - key); };\n  reversedSequence.includes = function (value) { return collection.includes(value); };\n  reversedSequence.cacheResult = cacheResultThrough;\n  reversedSequence.__iterate = function(fn, reverse) {\n    var this$1 = this;\n\n    var i = 0;\n    reverse && ensureSize(collection);\n    return collection.__iterate(\n      function (v, k) { return fn(v, useKeys ? k : reverse ? this$1.size - ++i : i++, this$1); },\n      !reverse\n    );\n  };\n  reversedSequence.__iterator = function (type, reverse) {\n    var i = 0;\n    reverse && ensureSize(collection);\n    var iterator = collection.__iterator(ITERATE_ENTRIES, !reverse);\n    return new Iterator(function () {\n      var step = iterator.next();\n      if (step.done) {\n        return step;\n      }\n      var entry = step.value;\n      return iteratorValue(\n        type,\n        useKeys ? entry[0] : reverse ? this$1.size - ++i : i++,\n        entry[1],\n        step\n      );\n    });\n  };\n  return reversedSequence;\n}\n\nfunction filterFactory(collection, predicate, context, useKeys) {\n  var filterSequence = makeSequence(collection);\n  if (useKeys) {\n    filterSequence.has = function (key) {\n      var v = collection.get(key, NOT_SET);\n      return v !== NOT_SET && !!predicate.call(context, v, key, collection);\n    };\n    filterSequence.get = function (key, notSetValue) {\n      var v = collection.get(key, NOT_SET);\n      return v !== NOT_SET && predicate.call(context, v, key, collection)\n        ? v\n        : notSetValue;\n    };\n  }\n  filterSequence.__iterateUncached = function(fn, reverse) {\n    var this$1 = this;\n\n    var iterations = 0;\n    collection.__iterate(\n      function (v, k, c) {\n        if (predicate.call(context, v, k, c)) {\n          return fn(v, useKeys ? k : iterations++, this$1);\n        }\n      },\n      reverse\n    );\n    return iterations;\n  };\n  filterSequence.__iteratorUncached = function(type, reverse) {\n    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n    var iterations = 0;\n    return new Iterator(function () {\n      while (true) {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var key = entry[0];\n        var value = entry[1];\n        if (predicate.call(context, value, key, collection)) {\n          return iteratorValue(type, useKeys ? key : iterations++, value, step);\n        }\n      }\n    });\n  };\n  return filterSequence;\n}\n\nfunction countByFactory(collection, grouper, context) {\n  var groups = Map().asMutable();\n  collection.__iterate(function (v, k) {\n    groups.update(grouper.call(context, v, k, collection), 0, function (a) { return a + 1; });\n  });\n  return groups.asImmutable();\n}\n\nfunction groupByFactory(collection, grouper, context) {\n  var isKeyedIter = isKeyed(collection);\n  var groups = (isOrdered(collection) ? OrderedMap() : Map()).asMutable();\n  collection.__iterate(function (v, k) {\n    groups.update(\n      grouper.call(context, v, k, collection),\n      function (a) { return ((a = a || []), a.push(isKeyedIter ? [k, v] : v), a); }\n    );\n  });\n  var coerce = collectionClass(collection);\n  return groups.map(function (arr) { return reify(collection, coerce(arr)); });\n}\n\nfunction sliceFactory(collection, begin, end, useKeys) {\n  var originalSize = collection.size;\n\n  if (wholeSlice(begin, end, originalSize)) {\n    return collection;\n  }\n\n  var resolvedBegin = resolveBegin(begin, originalSize);\n  var resolvedEnd = resolveEnd(end, originalSize);\n\n  // begin or end will be NaN if they were provided as negative numbers and\n  // this collection's size is unknown. In that case, cache first so there is\n  // a known size and these do not resolve to NaN.\n  if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n    return sliceFactory(collection.toSeq().cacheResult(), begin, end, useKeys);\n  }\n\n  // Note: resolvedEnd is undefined when the original sequence's length is\n  // unknown and this slice did not supply an end and should contain all\n  // elements after resolvedBegin.\n  // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n  var resolvedSize = resolvedEnd - resolvedBegin;\n  var sliceSize;\n  if (resolvedSize === resolvedSize) {\n    sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n  }\n\n  var sliceSeq = makeSequence(collection);\n\n  // If collection.size is undefined, the size of the realized sliceSeq is\n  // unknown at this point unless the number of items to slice is 0\n  sliceSeq.size = sliceSize === 0\n    ? sliceSize\n    : (collection.size && sliceSize) || undefined;\n\n  if (!useKeys && isSeq(collection) && sliceSize >= 0) {\n    sliceSeq.get = function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      return index >= 0 && index < sliceSize\n        ? collection.get(index + resolvedBegin, notSetValue)\n        : notSetValue;\n    };\n  }\n\n  sliceSeq.__iterateUncached = function(fn, reverse) {\n    var this$1 = this;\n\n    if (sliceSize === 0) {\n      return 0;\n    }\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var skipped = 0;\n    var isSkipping = true;\n    var iterations = 0;\n    collection.__iterate(function (v, k) {\n      if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n        iterations++;\n        return fn(v, useKeys ? k : iterations - 1, this$1) !== false &&\n          iterations !== sliceSize;\n      }\n    });\n    return iterations;\n  };\n\n  sliceSeq.__iteratorUncached = function(type, reverse) {\n    if (sliceSize !== 0 && reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    // Don't bother instantiating parent iterator if taking 0.\n    var iterator = sliceSize !== 0 && collection.__iterator(type, reverse);\n    var skipped = 0;\n    var iterations = 0;\n    return new Iterator(function () {\n      while (skipped++ < resolvedBegin) {\n        iterator.next();\n      }\n      if (++iterations > sliceSize) {\n        return iteratorDone();\n      }\n      var step = iterator.next();\n      if (useKeys || type === ITERATE_VALUES) {\n        return step;\n      }\n      if (type === ITERATE_KEYS) {\n        return iteratorValue(type, iterations - 1, undefined, step);\n      }\n      return iteratorValue(type, iterations - 1, step.value[1], step);\n    });\n  };\n\n  return sliceSeq;\n}\n\nfunction takeWhileFactory(collection, predicate, context) {\n  var takeSequence = makeSequence(collection);\n  takeSequence.__iterateUncached = function(fn, reverse) {\n    var this$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var iterations = 0;\n    collection.__iterate(\n      function (v, k, c) { return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$1); }\n    );\n    return iterations;\n  };\n  takeSequence.__iteratorUncached = function(type, reverse) {\n    var this$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n    var iterating = true;\n    return new Iterator(function () {\n      if (!iterating) {\n        return iteratorDone();\n      }\n      var step = iterator.next();\n      if (step.done) {\n        return step;\n      }\n      var entry = step.value;\n      var k = entry[0];\n      var v = entry[1];\n      if (!predicate.call(context, v, k, this$1)) {\n        iterating = false;\n        return iteratorDone();\n      }\n      return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);\n    });\n  };\n  return takeSequence;\n}\n\nfunction skipWhileFactory(collection, predicate, context, useKeys) {\n  var skipSequence = makeSequence(collection);\n  skipSequence.__iterateUncached = function(fn, reverse) {\n    var this$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var isSkipping = true;\n    var iterations = 0;\n    collection.__iterate(function (v, k, c) {\n      if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n        iterations++;\n        return fn(v, useKeys ? k : iterations - 1, this$1);\n      }\n    });\n    return iterations;\n  };\n  skipSequence.__iteratorUncached = function(type, reverse) {\n    var this$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n    var skipping = true;\n    var iterations = 0;\n    return new Iterator(function () {\n      var step;\n      var k;\n      var v;\n      do {\n        step = iterator.next();\n        if (step.done) {\n          if (useKeys || type === ITERATE_VALUES) {\n            return step;\n          }\n          if (type === ITERATE_KEYS) {\n            return iteratorValue(type, iterations++, undefined, step);\n          }\n          return iteratorValue(type, iterations++, step.value[1], step);\n        }\n        var entry = step.value;\n        k = entry[0];\n        v = entry[1];\n        skipping && (skipping = predicate.call(context, v, k, this$1));\n      } while (skipping);\n      return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);\n    });\n  };\n  return skipSequence;\n}\n\nfunction concatFactory(collection, values) {\n  var isKeyedCollection = isKeyed(collection);\n  var iters = [collection]\n    .concat(values)\n    .map(function (v) {\n      if (!isCollection(v)) {\n        v = isKeyedCollection\n          ? keyedSeqFromValue(v)\n          : indexedSeqFromValue(Array.isArray(v) ? v : [v]);\n      } else if (isKeyedCollection) {\n        v = KeyedCollection(v);\n      }\n      return v;\n    })\n    .filter(function (v) { return v.size !== 0; });\n\n  if (iters.length === 0) {\n    return collection;\n  }\n\n  if (iters.length === 1) {\n    var singleton = iters[0];\n    if (\n      singleton === collection ||\n      (isKeyedCollection && isKeyed(singleton)) ||\n      (isIndexed(collection) && isIndexed(singleton))\n    ) {\n      return singleton;\n    }\n  }\n\n  var concatSeq = new ArraySeq(iters);\n  if (isKeyedCollection) {\n    concatSeq = concatSeq.toKeyedSeq();\n  } else if (!isIndexed(collection)) {\n    concatSeq = concatSeq.toSetSeq();\n  }\n  concatSeq = concatSeq.flatten(true);\n  concatSeq.size = iters.reduce(\n    function (sum, seq) {\n      if (sum !== undefined) {\n        var size = seq.size;\n        if (size !== undefined) {\n          return sum + size;\n        }\n      }\n    },\n    0\n  );\n  return concatSeq;\n}\n\nfunction flattenFactory(collection, depth, useKeys) {\n  var flatSequence = makeSequence(collection);\n  flatSequence.__iterateUncached = function(fn, reverse) {\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var iterations = 0;\n    var stopped = false;\n    function flatDeep(iter, currentDepth) {\n      iter.__iterate(\n        function (v, k) {\n          if ((!depth || currentDepth < depth) && isCollection(v)) {\n            flatDeep(v, currentDepth + 1);\n          } else if (\n            fn(v, useKeys ? k : iterations++, flatSequence) === false\n          ) {\n            stopped = true;\n          }\n          return !stopped;\n        },\n        reverse\n      );\n    }\n    flatDeep(collection, 0);\n    return iterations;\n  };\n  flatSequence.__iteratorUncached = function(type, reverse) {\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var iterator = collection.__iterator(type, reverse);\n    var stack = [];\n    var iterations = 0;\n    return new Iterator(function () {\n      while (iterator) {\n        var step = iterator.next();\n        if (step.done !== false) {\n          iterator = stack.pop();\n          continue;\n        }\n        var v = step.value;\n        if (type === ITERATE_ENTRIES) {\n          v = v[1];\n        }\n        if ((!depth || stack.length < depth) && isCollection(v)) {\n          stack.push(iterator);\n          iterator = v.__iterator(type, reverse);\n        } else {\n          return useKeys ? step : iteratorValue(type, iterations++, v, step);\n        }\n      }\n      return iteratorDone();\n    });\n  };\n  return flatSequence;\n}\n\nfunction flatMapFactory(collection, mapper, context) {\n  var coerce = collectionClass(collection);\n  return collection\n    .toSeq()\n    .map(function (v, k) { return coerce(mapper.call(context, v, k, collection)); })\n    .flatten(true);\n}\n\nfunction interposeFactory(collection, separator) {\n  var interposedSequence = makeSequence(collection);\n  interposedSequence.size = collection.size && collection.size * 2 - 1;\n  interposedSequence.__iterateUncached = function(fn, reverse) {\n    var this$1 = this;\n\n    var iterations = 0;\n    collection.__iterate(\n      function (v) { return (!iterations || fn(separator, iterations++, this$1) !== false) &&\n        fn(v, iterations++, this$1) !== false; },\n      reverse\n    );\n    return iterations;\n  };\n  interposedSequence.__iteratorUncached = function(type, reverse) {\n    var iterator = collection.__iterator(ITERATE_VALUES, reverse);\n    var iterations = 0;\n    var step;\n    return new Iterator(function () {\n      if (!step || iterations % 2) {\n        step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n      }\n      return iterations % 2\n        ? iteratorValue(type, iterations++, separator)\n        : iteratorValue(type, iterations++, step.value, step);\n    });\n  };\n  return interposedSequence;\n}\n\nfunction sortFactory(collection, comparator, mapper) {\n  if (!comparator) {\n    comparator = defaultComparator;\n  }\n  var isKeyedCollection = isKeyed(collection);\n  var index = 0;\n  var entries = collection\n    .toSeq()\n    .map(function (v, k) { return [k, v, index++, mapper ? mapper(v, k, collection) : v]; })\n    .toArray();\n  entries.sort(function (a, b) { return comparator(a[3], b[3]) || a[2] - b[2]; }).forEach(\n    isKeyedCollection\n      ? function (v, i) {\n          entries[i].length = 2;\n        }\n      : function (v, i) {\n          entries[i] = v[1];\n        }\n  );\n  return isKeyedCollection\n    ? KeyedSeq(entries)\n    : isIndexed(collection) ? IndexedSeq(entries) : SetSeq(entries);\n}\n\nfunction maxFactory(collection, comparator, mapper) {\n  if (!comparator) {\n    comparator = defaultComparator;\n  }\n  if (mapper) {\n    var entry = collection\n      .toSeq()\n      .map(function (v, k) { return [v, mapper(v, k, collection)]; })\n      .reduce(function (a, b) { return maxCompare(comparator, a[1], b[1]) ? b : a; });\n    return entry && entry[0];\n  }\n  return collection.reduce(function (a, b) { return maxCompare(comparator, a, b) ? b : a; });\n}\n\nfunction maxCompare(comparator, a, b) {\n  var comp = comparator(b, a);\n  // b is considered the new max if the comparator declares them equal, but\n  // they are not equal and b is in fact a nullish value.\n  return (comp === 0 &&\n    b !== a &&\n    (b === undefined || b === null || b !== b)) ||\n    comp > 0;\n}\n\nfunction zipWithFactory(keyIter, zipper, iters) {\n  var zipSequence = makeSequence(keyIter);\n  zipSequence.size = new ArraySeq(iters).map(function (i) { return i.size; }).min();\n  // Note: this a generic base implementation of __iterate in terms of\n  // __iterator which may be more generically useful in the future.\n  zipSequence.__iterate = function(fn, reverse) {\n    var this$1 = this;\n\n    /* generic:\n    var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n    var step;\n    var iterations = 0;\n    while (!(step = iterator.next()).done) {\n      iterations++;\n      if (fn(step.value[1], step.value[0], this) === false) {\n        break;\n      }\n    }\n    return iterations;\n    */\n    // indexed:\n    var iterator = this.__iterator(ITERATE_VALUES, reverse);\n    var step;\n    var iterations = 0;\n    while (!(step = iterator.next()).done) {\n      if (fn(step.value, iterations++, this$1) === false) {\n        break;\n      }\n    }\n    return iterations;\n  };\n  zipSequence.__iteratorUncached = function(type, reverse) {\n    var iterators = iters.map(\n      function (i) { return ((i = Collection(i)), getIterator(reverse ? i.reverse() : i)); }\n    );\n    var iterations = 0;\n    var isDone = false;\n    return new Iterator(function () {\n      var steps;\n      if (!isDone) {\n        steps = iterators.map(function (i) { return i.next(); });\n        isDone = steps.some(function (s) { return s.done; });\n      }\n      if (isDone) {\n        return iteratorDone();\n      }\n      return iteratorValue(\n        type,\n        iterations++,\n        zipper.apply(null, steps.map(function (s) { return s.value; }))\n      );\n    });\n  };\n  return zipSequence;\n}\n\n// #pragma Helper Functions\n\nfunction reify(iter, seq) {\n  return iter === seq ? iter : isSeq(iter) ? seq : iter.constructor(seq);\n}\n\nfunction validateEntry(entry) {\n  if (entry !== Object(entry)) {\n    throw new TypeError('Expected [K, V] tuple: ' + entry);\n  }\n}\n\nfunction collectionClass(collection) {\n  return isKeyed(collection)\n    ? KeyedCollection\n    : isIndexed(collection) ? IndexedCollection : SetCollection;\n}\n\nfunction makeSequence(collection) {\n  return Object.create(\n    (isKeyed(collection)\n      ? KeyedSeq\n      : isIndexed(collection) ? IndexedSeq : SetSeq).prototype\n  );\n}\n\nfunction cacheResultThrough() {\n  if (this._iter.cacheResult) {\n    this._iter.cacheResult();\n    this.size = this._iter.size;\n    return this;\n  }\n  return Seq.prototype.cacheResult.call(this);\n}\n\nfunction defaultComparator(a, b) {\n  if (a === undefined && b === undefined) {\n    return 0;\n  }\n\n  if (a === undefined) {\n    return 1;\n  }\n\n  if (b === undefined) {\n    return -1;\n  }\n\n  return a > b ? 1 : a < b ? -1 : 0;\n}\n\nfunction coerceKeyPath(keyPath) {\n  if (isArrayLike(keyPath) && typeof keyPath !== 'string') {\n    return keyPath;\n  }\n  if (isOrdered(keyPath)) {\n    return keyPath.toArray();\n  }\n  throw new TypeError(\n    'Invalid keyPath: expected Ordered Collection or Array: ' + keyPath\n  );\n}\n\nfunction invariant(condition, error) {\n  if (!condition) { throw new Error(error); }\n}\n\nfunction assertNotInfinite(size) {\n  invariant(\n    size !== Infinity,\n    'Cannot perform this action with an infinite size.'\n  );\n}\n\n/**\n * Converts a value to a string, adding quotes if a string was provided.\n */\nfunction quoteString(value) {\n  return typeof value === 'string' ? JSON.stringify(value) : String(value);\n}\n\nvar Map = (function (KeyedCollection$$1) {\n  function Map(value) {\n    return value === null || value === undefined\n      ? emptyMap()\n      : isMap(value) && !isOrdered(value)\n          ? value\n          : emptyMap().withMutations(function (map) {\n              var iter = KeyedCollection$$1(value);\n              assertNotInfinite(iter.size);\n              iter.forEach(function (v, k) { return map.set(k, v); });\n            });\n  }\n\n  if ( KeyedCollection$$1 ) Map.__proto__ = KeyedCollection$$1;\n  Map.prototype = Object.create( KeyedCollection$$1 && KeyedCollection$$1.prototype );\n  Map.prototype.constructor = Map;\n\n  Map.of = function of () {\n    var keyValues = [], len = arguments.length;\n    while ( len-- ) keyValues[ len ] = arguments[ len ];\n\n    return emptyMap().withMutations(function (map) {\n      for (var i = 0; i < keyValues.length; i += 2) {\n        if (i + 1 >= keyValues.length) {\n          throw new Error('Missing value for key: ' + keyValues[i]);\n        }\n        map.set(keyValues[i], keyValues[i + 1]);\n      }\n    });\n  };\n\n  Map.prototype.toString = function toString () {\n    return this.__toString('Map {', '}');\n  };\n\n  // @pragma Access\n\n  Map.prototype.get = function get (k, notSetValue) {\n    return this._root\n      ? this._root.get(0, undefined, k, notSetValue)\n      : notSetValue;\n  };\n\n  // @pragma Modification\n\n  Map.prototype.set = function set (k, v) {\n    return updateMap(this, k, v);\n  };\n\n  Map.prototype.setIn = function setIn (keyPath, v) {\n    return this.updateIn(keyPath, NOT_SET, function () { return v; });\n  };\n\n  Map.prototype.remove = function remove (k) {\n    return updateMap(this, k, NOT_SET);\n  };\n\n  Map.prototype.deleteIn = function deleteIn (keyPath) {\n    keyPath = [].concat( coerceKeyPath(keyPath) );\n    if (keyPath.length) {\n      var lastKey = keyPath.pop();\n      return this.updateIn(keyPath, function (c) { return c && c.remove(lastKey); });\n    }\n  };\n\n  Map.prototype.deleteAll = function deleteAll (keys) {\n    var collection = Collection(keys);\n\n    if (collection.size === 0) {\n      return this;\n    }\n\n    return this.withMutations(function (map) {\n      collection.forEach(function (key) { return map.remove(key); });\n    });\n  };\n\n  Map.prototype.update = function update (k, notSetValue, updater) {\n    return arguments.length === 1\n      ? k(this)\n      : this.updateIn([k], notSetValue, updater);\n  };\n\n  Map.prototype.updateIn = function updateIn (keyPath, notSetValue, updater) {\n    if (!updater) {\n      updater = notSetValue;\n      notSetValue = undefined;\n    }\n    var updatedValue = updateInDeepMap(\n      this,\n      coerceKeyPath(keyPath),\n      0,\n      notSetValue,\n      updater\n    );\n    return updatedValue === NOT_SET ? notSetValue : updatedValue;\n  };\n\n  Map.prototype.clear = function clear () {\n    if (this.size === 0) {\n      return this;\n    }\n    if (this.__ownerID) {\n      this.size = 0;\n      this._root = null;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return emptyMap();\n  };\n\n  // @pragma Composition\n\n  Map.prototype.merge = function merge (/*...iters*/) {\n    return mergeIntoMapWith(this, undefined, arguments);\n  };\n\n  Map.prototype.mergeWith = function mergeWith (merger) {\n    var iters = [], len = arguments.length - 1;\n    while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n    return mergeIntoMapWith(this, merger, iters);\n  };\n\n  Map.prototype.mergeIn = function mergeIn (keyPath) {\n    var iters = [], len = arguments.length - 1;\n    while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n    return this.updateIn(\n      keyPath,\n      emptyMap(),\n      function (m) { return typeof m.merge === 'function'\n          ? m.merge.apply(m, iters)\n          : iters[iters.length - 1]; }\n    );\n  };\n\n  Map.prototype.mergeDeep = function mergeDeep (/*...iters*/) {\n    return mergeIntoMapWith(this, deepMerger, arguments);\n  };\n\n  Map.prototype.mergeDeepWith = function mergeDeepWith (merger) {\n    var iters = [], len = arguments.length - 1;\n    while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n    return mergeIntoMapWith(this, deepMergerWith(merger), iters);\n  };\n\n  Map.prototype.mergeDeepIn = function mergeDeepIn (keyPath) {\n    var iters = [], len = arguments.length - 1;\n    while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n    return this.updateIn(\n      keyPath,\n      emptyMap(),\n      function (m) { return typeof m.mergeDeep === 'function'\n          ? m.mergeDeep.apply(m, iters)\n          : iters[iters.length - 1]; }\n    );\n  };\n\n  Map.prototype.sort = function sort (comparator) {\n    // Late binding\n    return OrderedMap(sortFactory(this, comparator));\n  };\n\n  Map.prototype.sortBy = function sortBy (mapper, comparator) {\n    // Late binding\n    return OrderedMap(sortFactory(this, comparator, mapper));\n  };\n\n  // @pragma Mutability\n\n  Map.prototype.withMutations = function withMutations (fn) {\n    var mutable = this.asMutable();\n    fn(mutable);\n    return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n  };\n\n  Map.prototype.asMutable = function asMutable () {\n    return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n  };\n\n  Map.prototype.asImmutable = function asImmutable () {\n    return this.__ensureOwner();\n  };\n\n  Map.prototype.wasAltered = function wasAltered () {\n    return this.__altered;\n  };\n\n  Map.prototype.__iterator = function __iterator (type, reverse) {\n    return new MapIterator(this, type, reverse);\n  };\n\n  Map.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    var iterations = 0;\n    this._root &&\n      this._root.iterate(\n        function (entry) {\n          iterations++;\n          return fn(entry[1], entry[0], this$1);\n        },\n        reverse\n      );\n    return iterations;\n  };\n\n  Map.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    if (!ownerID) {\n      if (this.size === 0) {\n        return emptyMap();\n      }\n      this.__ownerID = ownerID;\n      this.__altered = false;\n      return this;\n    }\n    return makeMap(this.size, this._root, ownerID, this.__hash);\n  };\n\n  return Map;\n}(KeyedCollection));\n\nfunction isMap(maybeMap) {\n  return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);\n}\n\nMap.isMap = isMap;\n\nvar IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\n\nvar MapPrototype = Map.prototype;\nMapPrototype[IS_MAP_SENTINEL] = true;\nMapPrototype[DELETE] = MapPrototype.remove;\nMapPrototype.removeIn = MapPrototype.deleteIn;\nMapPrototype.removeAll = MapPrototype.deleteAll;\n\n// #pragma Trie Nodes\n\nvar ArrayMapNode = function ArrayMapNode(ownerID, entries) {\n  this.ownerID = ownerID;\n  this.entries = entries;\n};\n\nArrayMapNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  var entries = this.entries;\n  for (var ii = 0, len = entries.length; ii < len; ii++) {\n    if (is(key, entries[ii][0])) {\n      return entries[ii][1];\n    }\n  }\n  return notSetValue;\n};\n\nArrayMapNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  var removed = value === NOT_SET;\n\n  var entries = this.entries;\n  var idx = 0;\n  var len = entries.length;\n  for (; idx < len; idx++) {\n    if (is(key, entries[idx][0])) {\n      break;\n    }\n  }\n  var exists = idx < len;\n\n  if (exists ? entries[idx][1] === value : removed) {\n    return this;\n  }\n\n  SetRef(didAlter);\n  (removed || !exists) && SetRef(didChangeSize);\n\n  if (removed && entries.length === 1) {\n    return; // undefined\n  }\n\n  if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n    return createNodes(ownerID, entries, key, value);\n  }\n\n  var isEditable = ownerID && ownerID === this.ownerID;\n  var newEntries = isEditable ? entries : arrCopy(entries);\n\n  if (exists) {\n    if (removed) {\n      idx === len - 1\n        ? newEntries.pop()\n        : (newEntries[idx] = newEntries.pop());\n    } else {\n      newEntries[idx] = [key, value];\n    }\n  } else {\n    newEntries.push([key, value]);\n  }\n\n  if (isEditable) {\n    this.entries = newEntries;\n    return this;\n  }\n\n  return new ArrayMapNode(ownerID, newEntries);\n};\n\nvar BitmapIndexedNode = function BitmapIndexedNode(ownerID, bitmap, nodes) {\n  this.ownerID = ownerID;\n  this.bitmap = bitmap;\n  this.nodes = nodes;\n};\n\nBitmapIndexedNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n  var bit = 1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK);\n  var bitmap = this.bitmap;\n  return (bitmap & bit) === 0\n    ? notSetValue\n    : this.nodes[popCount(bitmap & bit - 1)].get(\n        shift + SHIFT,\n        keyHash,\n        key,\n        notSetValue\n      );\n};\n\nBitmapIndexedNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n  var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n  var bit = 1 << keyHashFrag;\n  var bitmap = this.bitmap;\n  var exists = (bitmap & bit) !== 0;\n\n  if (!exists && value === NOT_SET) {\n    return this;\n  }\n\n  var idx = popCount(bitmap & bit - 1);\n  var nodes = this.nodes;\n  var node = exists ? nodes[idx] : undefined;\n  var newNode = updateNode(\n    node,\n    ownerID,\n    shift + SHIFT,\n    keyHash,\n    key,\n    value,\n    didChangeSize,\n    didAlter\n  );\n\n  if (newNode === node) {\n    return this;\n  }\n\n  if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n    return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n  }\n\n  if (\n    exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])\n  ) {\n    return nodes[idx ^ 1];\n  }\n\n  if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n    return newNode;\n  }\n\n  var isEditable = ownerID && ownerID === this.ownerID;\n  var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;\n  var newNodes = exists\n    ? newNode\n        ? setIn(nodes, idx, newNode, isEditable)\n        : spliceOut(nodes, idx, isEditable)\n    : spliceIn(nodes, idx, newNode, isEditable);\n\n  if (isEditable) {\n    this.bitmap = newBitmap;\n    this.nodes = newNodes;\n    return this;\n  }\n\n  return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n};\n\nvar HashArrayMapNode = function HashArrayMapNode(ownerID, count, nodes) {\n  this.ownerID = ownerID;\n  this.count = count;\n  this.nodes = nodes;\n};\n\nHashArrayMapNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n  var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n  var node = this.nodes[idx];\n  return node\n    ? node.get(shift + SHIFT, keyHash, key, notSetValue)\n    : notSetValue;\n};\n\nHashArrayMapNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n  var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n  var removed = value === NOT_SET;\n  var nodes = this.nodes;\n  var node = nodes[idx];\n\n  if (removed && !node) {\n    return this;\n  }\n\n  var newNode = updateNode(\n    node,\n    ownerID,\n    shift + SHIFT,\n    keyHash,\n    key,\n    value,\n    didChangeSize,\n    didAlter\n  );\n  if (newNode === node) {\n    return this;\n  }\n\n  var newCount = this.count;\n  if (!node) {\n    newCount++;\n  } else if (!newNode) {\n    newCount--;\n    if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n      return packNodes(ownerID, nodes, newCount, idx);\n    }\n  }\n\n  var isEditable = ownerID && ownerID === this.ownerID;\n  var newNodes = setIn(nodes, idx, newNode, isEditable);\n\n  if (isEditable) {\n    this.count = newCount;\n    this.nodes = newNodes;\n    return this;\n  }\n\n  return new HashArrayMapNode(ownerID, newCount, newNodes);\n};\n\nvar HashCollisionNode = function HashCollisionNode(ownerID, keyHash, entries) {\n  this.ownerID = ownerID;\n  this.keyHash = keyHash;\n  this.entries = entries;\n};\n\nHashCollisionNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  var entries = this.entries;\n  for (var ii = 0, len = entries.length; ii < len; ii++) {\n    if (is(key, entries[ii][0])) {\n      return entries[ii][1];\n    }\n  }\n  return notSetValue;\n};\n\nHashCollisionNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n\n  var removed = value === NOT_SET;\n\n  if (keyHash !== this.keyHash) {\n    if (removed) {\n      return this;\n    }\n    SetRef(didAlter);\n    SetRef(didChangeSize);\n    return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);\n  }\n\n  var entries = this.entries;\n  var idx = 0;\n  var len = entries.length;\n  for (; idx < len; idx++) {\n    if (is(key, entries[idx][0])) {\n      break;\n    }\n  }\n  var exists = idx < len;\n\n  if (exists ? entries[idx][1] === value : removed) {\n    return this;\n  }\n\n  SetRef(didAlter);\n  (removed || !exists) && SetRef(didChangeSize);\n\n  if (removed && len === 2) {\n    return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n  }\n\n  var isEditable = ownerID && ownerID === this.ownerID;\n  var newEntries = isEditable ? entries : arrCopy(entries);\n\n  if (exists) {\n    if (removed) {\n      idx === len - 1\n        ? newEntries.pop()\n        : (newEntries[idx] = newEntries.pop());\n    } else {\n      newEntries[idx] = [key, value];\n    }\n  } else {\n    newEntries.push([key, value]);\n  }\n\n  if (isEditable) {\n    this.entries = newEntries;\n    return this;\n  }\n\n  return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n};\n\nvar ValueNode = function ValueNode(ownerID, keyHash, entry) {\n  this.ownerID = ownerID;\n  this.keyHash = keyHash;\n  this.entry = entry;\n};\n\nValueNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n};\n\nValueNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  var removed = value === NOT_SET;\n  var keyMatch = is(key, this.entry[0]);\n  if (keyMatch ? value === this.entry[1] : removed) {\n    return this;\n  }\n\n  SetRef(didAlter);\n\n  if (removed) {\n    SetRef(didChangeSize);\n    return; // undefined\n  }\n\n  if (keyMatch) {\n    if (ownerID && ownerID === this.ownerID) {\n      this.entry[1] = value;\n      return this;\n    }\n    return new ValueNode(ownerID, this.keyHash, [key, value]);\n  }\n\n  SetRef(didChangeSize);\n  return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);\n};\n\n// #pragma Iterators\n\nArrayMapNode.prototype.iterate = (HashCollisionNode.prototype.iterate = function(\n  fn,\n  reverse\n) {\n  var entries = this.entries;\n  for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {\n    if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n      return false;\n    }\n  }\n});\n\nBitmapIndexedNode.prototype.iterate = (HashArrayMapNode.prototype.iterate = function(\n  fn,\n  reverse\n) {\n  var nodes = this.nodes;\n  for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {\n    var node = nodes[reverse ? maxIndex - ii : ii];\n    if (node && node.iterate(fn, reverse) === false) {\n      return false;\n    }\n  }\n});\n\n// eslint-disable-next-line no-unused-vars\nValueNode.prototype.iterate = function(fn, reverse) {\n  return fn(this.entry);\n};\n\nvar MapIterator = (function (Iterator$$1) {\n  function MapIterator(map, type, reverse) {\n    this._type = type;\n    this._reverse = reverse;\n    this._stack = map._root && mapIteratorFrame(map._root);\n  }\n\n  if ( Iterator$$1 ) MapIterator.__proto__ = Iterator$$1;\n  MapIterator.prototype = Object.create( Iterator$$1 && Iterator$$1.prototype );\n  MapIterator.prototype.constructor = MapIterator;\n\n  MapIterator.prototype.next = function next () {\n    var this$1 = this;\n\n    var type = this._type;\n    var stack = this._stack;\n    while (stack) {\n      var node = stack.node;\n      var index = stack.index++;\n      var maxIndex = (void 0);\n      if (node.entry) {\n        if (index === 0) {\n          return mapIteratorValue(type, node.entry);\n        }\n      } else if (node.entries) {\n        maxIndex = node.entries.length - 1;\n        if (index <= maxIndex) {\n          return mapIteratorValue(\n            type,\n            node.entries[this$1._reverse ? maxIndex - index : index]\n          );\n        }\n      } else {\n        maxIndex = node.nodes.length - 1;\n        if (index <= maxIndex) {\n          var subNode = node.nodes[this$1._reverse ? maxIndex - index : index];\n          if (subNode) {\n            if (subNode.entry) {\n              return mapIteratorValue(type, subNode.entry);\n            }\n            stack = (this$1._stack = mapIteratorFrame(subNode, stack));\n          }\n          continue;\n        }\n      }\n      stack = (this$1._stack = this$1._stack.__prev);\n    }\n    return iteratorDone();\n  };\n\n  return MapIterator;\n}(Iterator));\n\nfunction mapIteratorValue(type, entry) {\n  return iteratorValue(type, entry[0], entry[1]);\n}\n\nfunction mapIteratorFrame(node, prev) {\n  return {\n    node: node,\n    index: 0,\n    __prev: prev\n  };\n}\n\nfunction makeMap(size, root, ownerID, hash$$1) {\n  var map = Object.create(MapPrototype);\n  map.size = size;\n  map._root = root;\n  map.__ownerID = ownerID;\n  map.__hash = hash$$1;\n  map.__altered = false;\n  return map;\n}\n\nvar EMPTY_MAP;\nfunction emptyMap() {\n  return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n}\n\nfunction updateMap(map, k, v) {\n  var newRoot;\n  var newSize;\n  if (!map._root) {\n    if (v === NOT_SET) {\n      return map;\n    }\n    newSize = 1;\n    newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);\n  } else {\n    var didChangeSize = MakeRef(CHANGE_LENGTH);\n    var didAlter = MakeRef(DID_ALTER);\n    newRoot = updateNode(\n      map._root,\n      map.__ownerID,\n      0,\n      undefined,\n      k,\n      v,\n      didChangeSize,\n      didAlter\n    );\n    if (!didAlter.value) {\n      return map;\n    }\n    newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);\n  }\n  if (map.__ownerID) {\n    map.size = newSize;\n    map._root = newRoot;\n    map.__hash = undefined;\n    map.__altered = true;\n    return map;\n  }\n  return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n}\n\nfunction updateNode(\n  node,\n  ownerID,\n  shift,\n  keyHash,\n  key,\n  value,\n  didChangeSize,\n  didAlter\n) {\n  if (!node) {\n    if (value === NOT_SET) {\n      return node;\n    }\n    SetRef(didAlter);\n    SetRef(didChangeSize);\n    return new ValueNode(ownerID, keyHash, [key, value]);\n  }\n  return node.update(\n    ownerID,\n    shift,\n    keyHash,\n    key,\n    value,\n    didChangeSize,\n    didAlter\n  );\n}\n\nfunction isLeafNode(node) {\n  return node.constructor === ValueNode ||\n    node.constructor === HashCollisionNode;\n}\n\nfunction mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n  if (node.keyHash === keyHash) {\n    return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);\n  }\n\n  var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n  var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\n  var newNode;\n  var nodes = idx1 === idx2\n    ? [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)]\n    : ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2\n        ? [node, newNode]\n        : [newNode, node]);\n\n  return new BitmapIndexedNode(ownerID, 1 << idx1 | 1 << idx2, nodes);\n}\n\nfunction createNodes(ownerID, entries, key, value) {\n  if (!ownerID) {\n    ownerID = new OwnerID();\n  }\n  var node = new ValueNode(ownerID, hash(key), [key, value]);\n  for (var ii = 0; ii < entries.length; ii++) {\n    var entry = entries[ii];\n    node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n  }\n  return node;\n}\n\nfunction packNodes(ownerID, nodes, count, excluding) {\n  var bitmap = 0;\n  var packedII = 0;\n  var packedNodes = new Array(count);\n  for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, (bit <<= 1)) {\n    var node = nodes[ii];\n    if (node !== undefined && ii !== excluding) {\n      bitmap |= bit;\n      packedNodes[packedII++] = node;\n    }\n  }\n  return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n}\n\nfunction expandNodes(ownerID, nodes, bitmap, including, node) {\n  var count = 0;\n  var expandedNodes = new Array(SIZE);\n  for (var ii = 0; bitmap !== 0; ii++, (bitmap >>>= 1)) {\n    expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n  }\n  expandedNodes[including] = node;\n  return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n}\n\nfunction mergeIntoMapWith(map, merger, collections) {\n  var iters = [];\n  for (var ii = 0; ii < collections.length; ii++) {\n    var value = collections[ii];\n    var iter = KeyedCollection(value);\n    if (!isCollection(value)) {\n      iter = iter.map(function (v) { return fromJS(v); });\n    }\n    iters.push(iter);\n  }\n  return mergeIntoCollectionWith(map, merger, iters);\n}\n\nfunction deepMerger(oldVal, newVal) {\n  return oldVal && oldVal.mergeDeep && isCollection(newVal)\n    ? oldVal.mergeDeep(newVal)\n    : is(oldVal, newVal) ? oldVal : newVal;\n}\n\nfunction deepMergerWith(merger) {\n  return function (oldVal, newVal, key) {\n    if (oldVal && oldVal.mergeDeepWith && isCollection(newVal)) {\n      return oldVal.mergeDeepWith(merger, newVal);\n    }\n    var nextValue = merger(oldVal, newVal, key);\n    return is(oldVal, nextValue) ? oldVal : nextValue;\n  };\n}\n\nfunction mergeIntoCollectionWith(collection, merger, iters) {\n  iters = iters.filter(function (x) { return x.size !== 0; });\n  if (iters.length === 0) {\n    return collection;\n  }\n  if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {\n    return collection.constructor(iters[0]);\n  }\n  return collection.withMutations(function (collection) {\n    var mergeIntoMap = merger\n      ? function (value, key) {\n          collection.update(\n            key,\n            NOT_SET,\n            function (oldVal) { return oldVal === NOT_SET ? value : merger(oldVal, value, key); }\n          );\n        }\n      : function (value, key) {\n          collection.set(key, value);\n        };\n    for (var ii = 0; ii < iters.length; ii++) {\n      iters[ii].forEach(mergeIntoMap);\n    }\n  });\n}\n\nfunction updateInDeepMap(existing, keyPath, i, notSetValue, updater) {\n  var isNotSet = existing === NOT_SET;\n  if (i === keyPath.length) {\n    var existingValue = isNotSet ? notSetValue : existing;\n    var newValue = updater(existingValue);\n    return newValue === existingValue ? existing : newValue;\n  }\n  if (!(isNotSet || (existing && existing.set))) {\n    throw new TypeError(\n      'Invalid keyPath: Value at [' +\n        keyPath.slice(0, i).map(quoteString) +\n        '] does not have a .set() method and cannot be updated: ' +\n        existing\n    );\n  }\n  var key = keyPath[i];\n  var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);\n  var nextUpdated = updateInDeepMap(\n    nextExisting,\n    keyPath,\n    i + 1,\n    notSetValue,\n    updater\n  );\n  return nextUpdated === nextExisting\n    ? existing\n    : nextUpdated === NOT_SET\n        ? existing.remove(key)\n        : (isNotSet ? emptyMap() : existing).set(key, nextUpdated);\n}\n\nfunction popCount(x) {\n  x -= x >> 1 & 0x55555555;\n  x = (x & 0x33333333) + (x >> 2 & 0x33333333);\n  x = x + (x >> 4) & 0x0f0f0f0f;\n  x += x >> 8;\n  x += x >> 16;\n  return x & 0x7f;\n}\n\nfunction setIn(array, idx, val, canEdit) {\n  var newArray = canEdit ? array : arrCopy(array);\n  newArray[idx] = val;\n  return newArray;\n}\n\nfunction spliceIn(array, idx, val, canEdit) {\n  var newLen = array.length + 1;\n  if (canEdit && idx + 1 === newLen) {\n    array[idx] = val;\n    return array;\n  }\n  var newArray = new Array(newLen);\n  var after = 0;\n  for (var ii = 0; ii < newLen; ii++) {\n    if (ii === idx) {\n      newArray[ii] = val;\n      after = -1;\n    } else {\n      newArray[ii] = array[ii + after];\n    }\n  }\n  return newArray;\n}\n\nfunction spliceOut(array, idx, canEdit) {\n  var newLen = array.length - 1;\n  if (canEdit && idx === newLen) {\n    array.pop();\n    return array;\n  }\n  var newArray = new Array(newLen);\n  var after = 0;\n  for (var ii = 0; ii < newLen; ii++) {\n    if (ii === idx) {\n      after = 1;\n    }\n    newArray[ii] = array[ii + after];\n  }\n  return newArray;\n}\n\nvar MAX_ARRAY_MAP_SIZE = SIZE / 4;\nvar MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\nvar MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n\nvar List = (function (IndexedCollection$$1) {\n  function List(value) {\n    var empty = emptyList();\n    if (value === null || value === undefined) {\n      return empty;\n    }\n    if (isList(value)) {\n      return value;\n    }\n    var iter = IndexedCollection$$1(value);\n    var size = iter.size;\n    if (size === 0) {\n      return empty;\n    }\n    assertNotInfinite(size);\n    if (size > 0 && size < SIZE) {\n      return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n    }\n    return empty.withMutations(function (list) {\n      list.setSize(size);\n      iter.forEach(function (v, i) { return list.set(i, v); });\n    });\n  }\n\n  if ( IndexedCollection$$1 ) List.__proto__ = IndexedCollection$$1;\n  List.prototype = Object.create( IndexedCollection$$1 && IndexedCollection$$1.prototype );\n  List.prototype.constructor = List;\n\n  List.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  List.prototype.toString = function toString () {\n    return this.__toString('List [', ']');\n  };\n\n  // @pragma Access\n\n  List.prototype.get = function get (index, notSetValue) {\n    index = wrapIndex(this, index);\n    if (index >= 0 && index < this.size) {\n      index += this._origin;\n      var node = listNodeFor(this, index);\n      return node && node.array[index & MASK];\n    }\n    return notSetValue;\n  };\n\n  // @pragma Modification\n\n  List.prototype.set = function set (index, value) {\n    return updateList(this, index, value);\n  };\n\n  List.prototype.remove = function remove (index) {\n    return !this.has(index)\n      ? this\n      : index === 0\n          ? this.shift()\n          : index === this.size - 1 ? this.pop() : this.splice(index, 1);\n  };\n\n  List.prototype.insert = function insert (index, value) {\n    return this.splice(index, 0, value);\n  };\n\n  List.prototype.clear = function clear () {\n    if (this.size === 0) {\n      return this;\n    }\n    if (this.__ownerID) {\n      this.size = (this._origin = (this._capacity = 0));\n      this._level = SHIFT;\n      this._root = (this._tail = null);\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return emptyList();\n  };\n\n  List.prototype.push = function push (/*...values*/) {\n    var values = arguments;\n    var oldSize = this.size;\n    return this.withMutations(function (list) {\n      setListBounds(list, 0, oldSize + values.length);\n      for (var ii = 0; ii < values.length; ii++) {\n        list.set(oldSize + ii, values[ii]);\n      }\n    });\n  };\n\n  List.prototype.pop = function pop () {\n    return setListBounds(this, 0, -1);\n  };\n\n  List.prototype.unshift = function unshift (/*...values*/) {\n    var values = arguments;\n    return this.withMutations(function (list) {\n      setListBounds(list, -values.length);\n      for (var ii = 0; ii < values.length; ii++) {\n        list.set(ii, values[ii]);\n      }\n    });\n  };\n\n  List.prototype.shift = function shift () {\n    return setListBounds(this, 1);\n  };\n\n  // @pragma Composition\n\n  List.prototype.merge = function merge (/*...iters*/) {\n    return mergeIntoListWith(this, undefined, arguments);\n  };\n\n  List.prototype.mergeWith = function mergeWith (merger) {\n    var iters = [], len = arguments.length - 1;\n    while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n    return mergeIntoListWith(this, merger, iters);\n  };\n\n  List.prototype.mergeDeep = function mergeDeep (/*...iters*/) {\n    return mergeIntoListWith(this, deepMerger, arguments);\n  };\n\n  List.prototype.mergeDeepWith = function mergeDeepWith (merger) {\n    var iters = [], len = arguments.length - 1;\n    while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n    return mergeIntoListWith(this, deepMergerWith(merger), iters);\n  };\n\n  List.prototype.setSize = function setSize (size) {\n    return setListBounds(this, 0, size);\n  };\n\n  // @pragma Iteration\n\n  List.prototype.slice = function slice (begin, end) {\n    var size = this.size;\n    if (wholeSlice(begin, end, size)) {\n      return this;\n    }\n    return setListBounds(\n      this,\n      resolveBegin(begin, size),\n      resolveEnd(end, size)\n    );\n  };\n\n  List.prototype.__iterator = function __iterator (type, reverse) {\n    var index = reverse ? this.size : 0;\n    var values = iterateList(this, reverse);\n    return new Iterator(function () {\n      var value = values();\n      return value === DONE\n        ? iteratorDone()\n        : iteratorValue(type, reverse ? --index : index++, value);\n    });\n  };\n\n  List.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    var index = reverse ? this.size : 0;\n    var values = iterateList(this, reverse);\n    var value;\n    while ((value = values()) !== DONE) {\n      if (fn(value, reverse ? --index : index++, this$1) === false) {\n        break;\n      }\n    }\n    return index;\n  };\n\n  List.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    if (!ownerID) {\n      if (this.size === 0) {\n        return emptyList();\n      }\n      this.__ownerID = ownerID;\n      return this;\n    }\n    return makeList(\n      this._origin,\n      this._capacity,\n      this._level,\n      this._root,\n      this._tail,\n      ownerID,\n      this.__hash\n    );\n  };\n\n  return List;\n}(IndexedCollection));\n\nfunction isList(maybeList) {\n  return !!(maybeList && maybeList[IS_LIST_SENTINEL]);\n}\n\nList.isList = isList;\n\nvar IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\n\nvar ListPrototype = List.prototype;\nListPrototype[IS_LIST_SENTINEL] = true;\nListPrototype[DELETE] = ListPrototype.remove;\nListPrototype.setIn = MapPrototype.setIn;\nListPrototype.deleteIn = (ListPrototype.removeIn = MapPrototype.removeIn);\nListPrototype.update = MapPrototype.update;\nListPrototype.updateIn = MapPrototype.updateIn;\nListPrototype.mergeIn = MapPrototype.mergeIn;\nListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\nListPrototype.withMutations = MapPrototype.withMutations;\nListPrototype.asMutable = MapPrototype.asMutable;\nListPrototype.asImmutable = MapPrototype.asImmutable;\nListPrototype.wasAltered = MapPrototype.wasAltered;\n\nvar VNode = function VNode(array, ownerID) {\n  this.array = array;\n  this.ownerID = ownerID;\n};\n\n// TODO: seems like these methods are very similar\n\nVNode.prototype.removeBefore = function removeBefore (ownerID, level, index) {\n  if (index === level ? 1 << level : 0 || this.array.length === 0) {\n    return this;\n  }\n  var originIndex = index >>> level & MASK;\n  if (originIndex >= this.array.length) {\n    return new VNode([], ownerID);\n  }\n  var removingFirst = originIndex === 0;\n  var newChild;\n  if (level > 0) {\n    var oldChild = this.array[originIndex];\n    newChild = oldChild &&\n      oldChild.removeBefore(ownerID, level - SHIFT, index);\n    if (newChild === oldChild && removingFirst) {\n      return this;\n    }\n  }\n  if (removingFirst && !newChild) {\n    return this;\n  }\n  var editable = editableVNode(this, ownerID);\n  if (!removingFirst) {\n    for (var ii = 0; ii < originIndex; ii++) {\n      editable.array[ii] = undefined;\n    }\n  }\n  if (newChild) {\n    editable.array[originIndex] = newChild;\n  }\n  return editable;\n};\n\nVNode.prototype.removeAfter = function removeAfter (ownerID, level, index) {\n  if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n    return this;\n  }\n  var sizeIndex = index - 1 >>> level & MASK;\n  if (sizeIndex >= this.array.length) {\n    return this;\n  }\n\n  var newChild;\n  if (level > 0) {\n    var oldChild = this.array[sizeIndex];\n    newChild = oldChild &&\n      oldChild.removeAfter(ownerID, level - SHIFT, index);\n    if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n      return this;\n    }\n  }\n\n  var editable = editableVNode(this, ownerID);\n  editable.array.splice(sizeIndex + 1);\n  if (newChild) {\n    editable.array[sizeIndex] = newChild;\n  }\n  return editable;\n};\n\nvar DONE = {};\n\nfunction iterateList(list, reverse) {\n  var left = list._origin;\n  var right = list._capacity;\n  var tailPos = getTailOffset(right);\n  var tail = list._tail;\n\n  return iterateNodeOrLeaf(list._root, list._level, 0);\n\n  function iterateNodeOrLeaf(node, level, offset) {\n    return level === 0\n      ? iterateLeaf(node, offset)\n      : iterateNode(node, level, offset);\n  }\n\n  function iterateLeaf(node, offset) {\n    var array = offset === tailPos ? tail && tail.array : node && node.array;\n    var from = offset > left ? 0 : left - offset;\n    var to = right - offset;\n    if (to > SIZE) {\n      to = SIZE;\n    }\n    return function () {\n      if (from === to) {\n        return DONE;\n      }\n      var idx = reverse ? --to : from++;\n      return array && array[idx];\n    };\n  }\n\n  function iterateNode(node, level, offset) {\n    var values;\n    var array = node && node.array;\n    var from = offset > left ? 0 : left - offset >> level;\n    var to = (right - offset >> level) + 1;\n    if (to > SIZE) {\n      to = SIZE;\n    }\n    return function () {\n      while (true) {\n        if (values) {\n          var value = values();\n          if (value !== DONE) {\n            return value;\n          }\n          values = null;\n        }\n        if (from === to) {\n          return DONE;\n        }\n        var idx = reverse ? --to : from++;\n        values = iterateNodeOrLeaf(\n          array && array[idx],\n          level - SHIFT,\n          offset + (idx << level)\n        );\n      }\n    };\n  }\n}\n\nfunction makeList(origin, capacity, level, root, tail, ownerID, hash) {\n  var list = Object.create(ListPrototype);\n  list.size = capacity - origin;\n  list._origin = origin;\n  list._capacity = capacity;\n  list._level = level;\n  list._root = root;\n  list._tail = tail;\n  list.__ownerID = ownerID;\n  list.__hash = hash;\n  list.__altered = false;\n  return list;\n}\n\nvar EMPTY_LIST;\nfunction emptyList() {\n  return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n}\n\nfunction updateList(list, index, value) {\n  index = wrapIndex(list, index);\n\n  if (index !== index) {\n    return list;\n  }\n\n  if (index >= list.size || index < 0) {\n    return list.withMutations(function (list) {\n      index < 0\n        ? setListBounds(list, index).set(0, value)\n        : setListBounds(list, 0, index + 1).set(index, value);\n    });\n  }\n\n  index += list._origin;\n\n  var newTail = list._tail;\n  var newRoot = list._root;\n  var didAlter = MakeRef(DID_ALTER);\n  if (index >= getTailOffset(list._capacity)) {\n    newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n  } else {\n    newRoot = updateVNode(\n      newRoot,\n      list.__ownerID,\n      list._level,\n      index,\n      value,\n      didAlter\n    );\n  }\n\n  if (!didAlter.value) {\n    return list;\n  }\n\n  if (list.__ownerID) {\n    list._root = newRoot;\n    list._tail = newTail;\n    list.__hash = undefined;\n    list.__altered = true;\n    return list;\n  }\n  return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n}\n\nfunction updateVNode(node, ownerID, level, index, value, didAlter) {\n  var idx = index >>> level & MASK;\n  var nodeHas = node && idx < node.array.length;\n  if (!nodeHas && value === undefined) {\n    return node;\n  }\n\n  var newNode;\n\n  if (level > 0) {\n    var lowerNode = node && node.array[idx];\n    var newLowerNode = updateVNode(\n      lowerNode,\n      ownerID,\n      level - SHIFT,\n      index,\n      value,\n      didAlter\n    );\n    if (newLowerNode === lowerNode) {\n      return node;\n    }\n    newNode = editableVNode(node, ownerID);\n    newNode.array[idx] = newLowerNode;\n    return newNode;\n  }\n\n  if (nodeHas && node.array[idx] === value) {\n    return node;\n  }\n\n  SetRef(didAlter);\n\n  newNode = editableVNode(node, ownerID);\n  if (value === undefined && idx === newNode.array.length - 1) {\n    newNode.array.pop();\n  } else {\n    newNode.array[idx] = value;\n  }\n  return newNode;\n}\n\nfunction editableVNode(node, ownerID) {\n  if (ownerID && node && ownerID === node.ownerID) {\n    return node;\n  }\n  return new VNode(node ? node.array.slice() : [], ownerID);\n}\n\nfunction listNodeFor(list, rawIndex) {\n  if (rawIndex >= getTailOffset(list._capacity)) {\n    return list._tail;\n  }\n  if (rawIndex < 1 << list._level + SHIFT) {\n    var node = list._root;\n    var level = list._level;\n    while (node && level > 0) {\n      node = node.array[rawIndex >>> level & MASK];\n      level -= SHIFT;\n    }\n    return node;\n  }\n}\n\nfunction setListBounds(list, begin, end) {\n  // Sanitize begin & end using this shorthand for ToInt32(argument)\n  // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n  if (begin !== undefined) {\n    begin |= 0;\n  }\n  if (end !== undefined) {\n    end |= 0;\n  }\n  var owner = list.__ownerID || new OwnerID();\n  var oldOrigin = list._origin;\n  var oldCapacity = list._capacity;\n  var newOrigin = oldOrigin + begin;\n  var newCapacity = end === undefined\n    ? oldCapacity\n    : end < 0 ? oldCapacity + end : oldOrigin + end;\n  if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n    return list;\n  }\n\n  // If it's going to end after it starts, it's empty.\n  if (newOrigin >= newCapacity) {\n    return list.clear();\n  }\n\n  var newLevel = list._level;\n  var newRoot = list._root;\n\n  // New origin might need creating a higher root.\n  var offsetShift = 0;\n  while (newOrigin + offsetShift < 0) {\n    newRoot = new VNode(\n      newRoot && newRoot.array.length ? [undefined, newRoot] : [],\n      owner\n    );\n    newLevel += SHIFT;\n    offsetShift += 1 << newLevel;\n  }\n  if (offsetShift) {\n    newOrigin += offsetShift;\n    oldOrigin += offsetShift;\n    newCapacity += offsetShift;\n    oldCapacity += offsetShift;\n  }\n\n  var oldTailOffset = getTailOffset(oldCapacity);\n  var newTailOffset = getTailOffset(newCapacity);\n\n  // New size might need creating a higher root.\n  while (newTailOffset >= 1 << newLevel + SHIFT) {\n    newRoot = new VNode(\n      newRoot && newRoot.array.length ? [newRoot] : [],\n      owner\n    );\n    newLevel += SHIFT;\n  }\n\n  // Locate or create the new tail.\n  var oldTail = list._tail;\n  var newTail = newTailOffset < oldTailOffset\n    ? listNodeFor(list, newCapacity - 1)\n    : newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;\n\n  // Merge Tail into tree.\n  if (\n    oldTail &&\n    newTailOffset > oldTailOffset &&\n    newOrigin < oldCapacity &&\n    oldTail.array.length\n  ) {\n    newRoot = editableVNode(newRoot, owner);\n    var node = newRoot;\n    for (var level = newLevel; level > SHIFT; level -= SHIFT) {\n      var idx = oldTailOffset >>> level & MASK;\n      node = (node.array[idx] = editableVNode(node.array[idx], owner));\n    }\n    node.array[oldTailOffset >>> SHIFT & MASK] = oldTail;\n  }\n\n  // If the size has been reduced, there's a chance the tail needs to be trimmed.\n  if (newCapacity < oldCapacity) {\n    newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n  }\n\n  // If the new origin is within the tail, then we do not need a root.\n  if (newOrigin >= newTailOffset) {\n    newOrigin -= newTailOffset;\n    newCapacity -= newTailOffset;\n    newLevel = SHIFT;\n    newRoot = null;\n    newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n\n    // Otherwise, if the root has been trimmed, garbage collect.\n  } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n    offsetShift = 0;\n\n    // Identify the new top root node of the subtree of the old root.\n    while (newRoot) {\n      var beginIndex = newOrigin >>> newLevel & MASK;\n      if (beginIndex !== newTailOffset >>> newLevel & MASK) {\n        break;\n      }\n      if (beginIndex) {\n        offsetShift += (1 << newLevel) * beginIndex;\n      }\n      newLevel -= SHIFT;\n      newRoot = newRoot.array[beginIndex];\n    }\n\n    // Trim the new sides of the new root.\n    if (newRoot && newOrigin > oldOrigin) {\n      newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n    }\n    if (newRoot && newTailOffset < oldTailOffset) {\n      newRoot = newRoot.removeAfter(\n        owner,\n        newLevel,\n        newTailOffset - offsetShift\n      );\n    }\n    if (offsetShift) {\n      newOrigin -= offsetShift;\n      newCapacity -= offsetShift;\n    }\n  }\n\n  if (list.__ownerID) {\n    list.size = newCapacity - newOrigin;\n    list._origin = newOrigin;\n    list._capacity = newCapacity;\n    list._level = newLevel;\n    list._root = newRoot;\n    list._tail = newTail;\n    list.__hash = undefined;\n    list.__altered = true;\n    return list;\n  }\n  return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n}\n\nfunction mergeIntoListWith(list, merger, collections) {\n  var iters = [];\n  var maxSize = 0;\n  for (var ii = 0; ii < collections.length; ii++) {\n    var value = collections[ii];\n    var iter = IndexedCollection(value);\n    if (iter.size > maxSize) {\n      maxSize = iter.size;\n    }\n    if (!isCollection(value)) {\n      iter = iter.map(function (v) { return fromJS(v); });\n    }\n    iters.push(iter);\n  }\n  if (maxSize > list.size) {\n    list = list.setSize(maxSize);\n  }\n  return mergeIntoCollectionWith(list, merger, iters);\n}\n\nfunction getTailOffset(size) {\n  return size < SIZE ? 0 : size - 1 >>> SHIFT << SHIFT;\n}\n\nvar OrderedMap = (function (Map$$1) {\n  function OrderedMap(value) {\n    return value === null || value === undefined\n      ? emptyOrderedMap()\n      : isOrderedMap(value)\n          ? value\n          : emptyOrderedMap().withMutations(function (map) {\n              var iter = KeyedCollection(value);\n              assertNotInfinite(iter.size);\n              iter.forEach(function (v, k) { return map.set(k, v); });\n            });\n  }\n\n  if ( Map$$1 ) OrderedMap.__proto__ = Map$$1;\n  OrderedMap.prototype = Object.create( Map$$1 && Map$$1.prototype );\n  OrderedMap.prototype.constructor = OrderedMap;\n\n  OrderedMap.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  OrderedMap.prototype.toString = function toString () {\n    return this.__toString('OrderedMap {', '}');\n  };\n\n  // @pragma Access\n\n  OrderedMap.prototype.get = function get (k, notSetValue) {\n    var index = this._map.get(k);\n    return index !== undefined ? this._list.get(index)[1] : notSetValue;\n  };\n\n  // @pragma Modification\n\n  OrderedMap.prototype.clear = function clear () {\n    if (this.size === 0) {\n      return this;\n    }\n    if (this.__ownerID) {\n      this.size = 0;\n      this._map.clear();\n      this._list.clear();\n      return this;\n    }\n    return emptyOrderedMap();\n  };\n\n  OrderedMap.prototype.set = function set (k, v) {\n    return updateOrderedMap(this, k, v);\n  };\n\n  OrderedMap.prototype.remove = function remove (k) {\n    return updateOrderedMap(this, k, NOT_SET);\n  };\n\n  OrderedMap.prototype.wasAltered = function wasAltered () {\n    return this._map.wasAltered() || this._list.wasAltered();\n  };\n\n  OrderedMap.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    return this._list.__iterate(\n      function (entry) { return entry && fn(entry[1], entry[0], this$1); },\n      reverse\n    );\n  };\n\n  OrderedMap.prototype.__iterator = function __iterator (type, reverse) {\n    return this._list.fromEntrySeq().__iterator(type, reverse);\n  };\n\n  OrderedMap.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    var newMap = this._map.__ensureOwner(ownerID);\n    var newList = this._list.__ensureOwner(ownerID);\n    if (!ownerID) {\n      if (this.size === 0) {\n        return emptyOrderedMap();\n      }\n      this.__ownerID = ownerID;\n      this._map = newMap;\n      this._list = newList;\n      return this;\n    }\n    return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n  };\n\n  return OrderedMap;\n}(Map));\n\nfunction isOrderedMap(maybeOrderedMap) {\n  return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n}\n\nOrderedMap.isOrderedMap = isOrderedMap;\n\nOrderedMap.prototype[IS_ORDERED_SENTINEL] = true;\nOrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n\nfunction makeOrderedMap(map, list, ownerID, hash) {\n  var omap = Object.create(OrderedMap.prototype);\n  omap.size = map ? map.size : 0;\n  omap._map = map;\n  omap._list = list;\n  omap.__ownerID = ownerID;\n  omap.__hash = hash;\n  return omap;\n}\n\nvar EMPTY_ORDERED_MAP;\nfunction emptyOrderedMap() {\n  return EMPTY_ORDERED_MAP ||\n    (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));\n}\n\nfunction updateOrderedMap(omap, k, v) {\n  var map = omap._map;\n  var list = omap._list;\n  var i = map.get(k);\n  var has = i !== undefined;\n  var newMap;\n  var newList;\n  if (v === NOT_SET) {\n    // removed\n    if (!has) {\n      return omap;\n    }\n    if (list.size >= SIZE && list.size >= map.size * 2) {\n      newList = list.filter(function (entry, idx) { return entry !== undefined && i !== idx; });\n      newMap = newList.toKeyedSeq().map(function (entry) { return entry[0]; }).flip().toMap();\n      if (omap.__ownerID) {\n        newMap.__ownerID = (newList.__ownerID = omap.__ownerID);\n      }\n    } else {\n      newMap = map.remove(k);\n      newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n    }\n  } else if (has) {\n    if (v === list.get(i)[1]) {\n      return omap;\n    }\n    newMap = map;\n    newList = list.set(i, [k, v]);\n  } else {\n    newMap = map.set(k, list.size);\n    newList = list.set(list.size, [k, v]);\n  }\n  if (omap.__ownerID) {\n    omap.size = newMap.size;\n    omap._map = newMap;\n    omap._list = newList;\n    omap.__hash = undefined;\n    return omap;\n  }\n  return makeOrderedMap(newMap, newList);\n}\n\nvar Stack = (function (IndexedCollection$$1) {\n  function Stack(value) {\n    return value === null || value === undefined\n      ? emptyStack()\n      : isStack(value) ? value : emptyStack().pushAll(value);\n  }\n\n  if ( IndexedCollection$$1 ) Stack.__proto__ = IndexedCollection$$1;\n  Stack.prototype = Object.create( IndexedCollection$$1 && IndexedCollection$$1.prototype );\n  Stack.prototype.constructor = Stack;\n\n  Stack.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  Stack.prototype.toString = function toString () {\n    return this.__toString('Stack [', ']');\n  };\n\n  // @pragma Access\n\n  Stack.prototype.get = function get (index, notSetValue) {\n    var head = this._head;\n    index = wrapIndex(this, index);\n    while (head && index--) {\n      head = head.next;\n    }\n    return head ? head.value : notSetValue;\n  };\n\n  Stack.prototype.peek = function peek () {\n    return this._head && this._head.value;\n  };\n\n  // @pragma Modification\n\n  Stack.prototype.push = function push (/*...values*/) {\n    var arguments$1 = arguments;\n\n    if (arguments.length === 0) {\n      return this;\n    }\n    var newSize = this.size + arguments.length;\n    var head = this._head;\n    for (var ii = arguments.length - 1; ii >= 0; ii--) {\n      head = {\n        value: arguments$1[ii],\n        next: head\n      };\n    }\n    if (this.__ownerID) {\n      this.size = newSize;\n      this._head = head;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return makeStack(newSize, head);\n  };\n\n  Stack.prototype.pushAll = function pushAll (iter) {\n    iter = IndexedCollection$$1(iter);\n    if (iter.size === 0) {\n      return this;\n    }\n    if (this.size === 0 && isStack(iter)) {\n      return iter;\n    }\n    assertNotInfinite(iter.size);\n    var newSize = this.size;\n    var head = this._head;\n    iter.__iterate(\n      function (value) {\n        newSize++;\n        head = {\n          value: value,\n          next: head\n        };\n      },\n      /* reverse */ true\n    );\n    if (this.__ownerID) {\n      this.size = newSize;\n      this._head = head;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return makeStack(newSize, head);\n  };\n\n  Stack.prototype.pop = function pop () {\n    return this.slice(1);\n  };\n\n  Stack.prototype.clear = function clear () {\n    if (this.size === 0) {\n      return this;\n    }\n    if (this.__ownerID) {\n      this.size = 0;\n      this._head = undefined;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return emptyStack();\n  };\n\n  Stack.prototype.slice = function slice (begin, end) {\n    if (wholeSlice(begin, end, this.size)) {\n      return this;\n    }\n    var resolvedBegin = resolveBegin(begin, this.size);\n    var resolvedEnd = resolveEnd(end, this.size);\n    if (resolvedEnd !== this.size) {\n      // super.slice(begin, end);\n      return IndexedCollection$$1.prototype.slice.call(this, begin, end);\n    }\n    var newSize = this.size - resolvedBegin;\n    var head = this._head;\n    while (resolvedBegin--) {\n      head = head.next;\n    }\n    if (this.__ownerID) {\n      this.size = newSize;\n      this._head = head;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return makeStack(newSize, head);\n  };\n\n  // @pragma Mutability\n\n  Stack.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    if (!ownerID) {\n      if (this.size === 0) {\n        return emptyStack();\n      }\n      this.__ownerID = ownerID;\n      this.__altered = false;\n      return this;\n    }\n    return makeStack(this.size, this._head, ownerID, this.__hash);\n  };\n\n  // @pragma Iteration\n\n  Stack.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    if (reverse) {\n      return new ArraySeq(this.toArray()).__iterate(\n        function (v, k) { return fn(v, k, this$1); },\n        reverse\n      );\n    }\n    var iterations = 0;\n    var node = this._head;\n    while (node) {\n      if (fn(node.value, iterations++, this$1) === false) {\n        break;\n      }\n      node = node.next;\n    }\n    return iterations;\n  };\n\n  Stack.prototype.__iterator = function __iterator (type, reverse) {\n    if (reverse) {\n      return new ArraySeq(this.toArray()).__iterator(type, reverse);\n    }\n    var iterations = 0;\n    var node = this._head;\n    return new Iterator(function () {\n      if (node) {\n        var value = node.value;\n        node = node.next;\n        return iteratorValue(type, iterations++, value);\n      }\n      return iteratorDone();\n    });\n  };\n\n  return Stack;\n}(IndexedCollection));\n\nfunction isStack(maybeStack) {\n  return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);\n}\n\nStack.isStack = isStack;\n\nvar IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\nvar StackPrototype = Stack.prototype;\nStackPrototype[IS_STACK_SENTINEL] = true;\nStackPrototype.withMutations = MapPrototype.withMutations;\nStackPrototype.asMutable = MapPrototype.asMutable;\nStackPrototype.asImmutable = MapPrototype.asImmutable;\nStackPrototype.wasAltered = MapPrototype.wasAltered;\nStackPrototype.shift = StackPrototype.pop;\nStackPrototype.unshift = StackPrototype.push;\nStackPrototype.unshiftAll = StackPrototype.pushAll;\n\nfunction makeStack(size, head, ownerID, hash) {\n  var map = Object.create(StackPrototype);\n  map.size = size;\n  map._head = head;\n  map.__ownerID = ownerID;\n  map.__hash = hash;\n  map.__altered = false;\n  return map;\n}\n\nvar EMPTY_STACK;\nfunction emptyStack() {\n  return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n}\n\nfunction deepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (\n    !isCollection(b) ||\n    (a.size !== undefined && b.size !== undefined && a.size !== b.size) ||\n    (a.__hash !== undefined &&\n      b.__hash !== undefined &&\n      a.__hash !== b.__hash) ||\n    isKeyed(a) !== isKeyed(b) ||\n    isIndexed(a) !== isIndexed(b) ||\n    isOrdered(a) !== isOrdered(b)\n  ) {\n    return false;\n  }\n\n  if (a.size === 0 && b.size === 0) {\n    return true;\n  }\n\n  var notAssociative = !isAssociative(a);\n\n  if (isOrdered(a)) {\n    var entries = a.entries();\n    return b.every(function (v, k) {\n      var entry = entries.next().value;\n      return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n    }) && entries.next().done;\n  }\n\n  var flipped = false;\n\n  if (a.size === undefined) {\n    if (b.size === undefined) {\n      if (typeof a.cacheResult === 'function') {\n        a.cacheResult();\n      }\n    } else {\n      flipped = true;\n      var _ = a;\n      a = b;\n      b = _;\n    }\n  }\n\n  var allEqual = true;\n  var bSize = b.__iterate(function (v, k) {\n    if (\n      notAssociative\n        ? !a.has(v)\n        : flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)\n    ) {\n      allEqual = false;\n      return false;\n    }\n  });\n\n  return allEqual && a.size === bSize;\n}\n\n/**\n * Contributes additional methods to a constructor\n */\nfunction mixin(ctor, methods) {\n  var keyCopier = function (key) {\n    ctor.prototype[key] = methods[key];\n  };\n  Object.keys(methods).forEach(keyCopier);\n  Object.getOwnPropertySymbols &&\n    Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n  return ctor;\n}\n\nvar Set = (function (SetCollection$$1) {\n  function Set(value) {\n    return value === null || value === undefined\n      ? emptySet()\n      : isSet(value) && !isOrdered(value)\n          ? value\n          : emptySet().withMutations(function (set) {\n              var iter = SetCollection$$1(value);\n              assertNotInfinite(iter.size);\n              iter.forEach(function (v) { return set.add(v); });\n            });\n  }\n\n  if ( SetCollection$$1 ) Set.__proto__ = SetCollection$$1;\n  Set.prototype = Object.create( SetCollection$$1 && SetCollection$$1.prototype );\n  Set.prototype.constructor = Set;\n\n  Set.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  Set.fromKeys = function fromKeys (value) {\n    return this(KeyedCollection(value).keySeq());\n  };\n\n  Set.intersect = function intersect (sets) {\n    sets = Collection(sets).toArray();\n    return sets.length\n      ? SetPrototype.intersect.apply(Set(sets.pop()), sets)\n      : emptySet();\n  };\n\n  Set.union = function union (sets) {\n    sets = Collection(sets).toArray();\n    return sets.length\n      ? SetPrototype.union.apply(Set(sets.pop()), sets)\n      : emptySet();\n  };\n\n  Set.prototype.toString = function toString () {\n    return this.__toString('Set {', '}');\n  };\n\n  // @pragma Access\n\n  Set.prototype.has = function has (value) {\n    return this._map.has(value);\n  };\n\n  // @pragma Modification\n\n  Set.prototype.add = function add (value) {\n    return updateSet(this, this._map.set(value, true));\n  };\n\n  Set.prototype.remove = function remove (value) {\n    return updateSet(this, this._map.remove(value));\n  };\n\n  Set.prototype.clear = function clear () {\n    return updateSet(this, this._map.clear());\n  };\n\n  // @pragma Composition\n\n  Set.prototype.union = function union () {\n    var iters = [], len = arguments.length;\n    while ( len-- ) iters[ len ] = arguments[ len ];\n\n    iters = iters.filter(function (x) { return x.size !== 0; });\n    if (iters.length === 0) {\n      return this;\n    }\n    if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n      return this.constructor(iters[0]);\n    }\n    return this.withMutations(function (set) {\n      for (var ii = 0; ii < iters.length; ii++) {\n        SetCollection$$1(iters[ii]).forEach(function (value) { return set.add(value); });\n      }\n    });\n  };\n\n  Set.prototype.intersect = function intersect () {\n    var iters = [], len = arguments.length;\n    while ( len-- ) iters[ len ] = arguments[ len ];\n\n    if (iters.length === 0) {\n      return this;\n    }\n    iters = iters.map(function (iter) { return SetCollection$$1(iter); });\n    var toRemove = [];\n    this.forEach(function (value) {\n      if (!iters.every(function (iter) { return iter.includes(value); })) {\n        toRemove.push(value);\n      }\n    });\n    return this.withMutations(function (set) {\n      toRemove.forEach(function (value) {\n        set.remove(value);\n      });\n    });\n  };\n\n  Set.prototype.subtract = function subtract () {\n    var iters = [], len = arguments.length;\n    while ( len-- ) iters[ len ] = arguments[ len ];\n\n    if (iters.length === 0) {\n      return this;\n    }\n    var toRemove = [];\n    this.forEach(function (value) {\n      if (iters.some(function (iter) { return iter.includes(value); })) {\n        toRemove.push(value);\n      }\n    });\n    return this.withMutations(function (set) {\n      toRemove.forEach(function (value) {\n        set.remove(value);\n      });\n    });\n  };\n\n  Set.prototype.merge = function merge () {\n    return this.union.apply(this, arguments);\n  };\n\n  Set.prototype.mergeWith = function mergeWith (merger) {\n    var iters = [], len = arguments.length - 1;\n    while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n    return this.union.apply(this, iters);\n  };\n\n  Set.prototype.sort = function sort (comparator) {\n    // Late binding\n    return OrderedSet(sortFactory(this, comparator));\n  };\n\n  Set.prototype.sortBy = function sortBy (mapper, comparator) {\n    // Late binding\n    return OrderedSet(sortFactory(this, comparator, mapper));\n  };\n\n  Set.prototype.wasAltered = function wasAltered () {\n    return this._map.wasAltered();\n  };\n\n  Set.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    return this._map.__iterate(function (_, k) { return fn(k, k, this$1); }, reverse);\n  };\n\n  Set.prototype.__iterator = function __iterator (type, reverse) {\n    return this._map.map(function (_, k) { return k; }).__iterator(type, reverse);\n  };\n\n  Set.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    var newMap = this._map.__ensureOwner(ownerID);\n    if (!ownerID) {\n      if (this.size === 0) {\n        return emptySet();\n      }\n      this.__ownerID = ownerID;\n      this._map = newMap;\n      return this;\n    }\n    return this.__make(newMap, ownerID);\n  };\n\n  return Set;\n}(SetCollection));\n\nfunction isSet(maybeSet) {\n  return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);\n}\n\nSet.isSet = isSet;\n\nvar IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\n\nvar SetPrototype = Set.prototype;\nSetPrototype[IS_SET_SENTINEL] = true;\nSetPrototype[DELETE] = SetPrototype.remove;\nSetPrototype.mergeDeep = SetPrototype.merge;\nSetPrototype.mergeDeepWith = SetPrototype.mergeWith;\nSetPrototype.withMutations = MapPrototype.withMutations;\nSetPrototype.asMutable = MapPrototype.asMutable;\nSetPrototype.asImmutable = MapPrototype.asImmutable;\n\nSetPrototype.__empty = emptySet;\nSetPrototype.__make = makeSet;\n\nfunction updateSet(set, newMap) {\n  if (set.__ownerID) {\n    set.size = newMap.size;\n    set._map = newMap;\n    return set;\n  }\n  return newMap === set._map\n    ? set\n    : newMap.size === 0 ? set.__empty() : set.__make(newMap);\n}\n\nfunction makeSet(map, ownerID) {\n  var set = Object.create(SetPrototype);\n  set.size = map ? map.size : 0;\n  set._map = map;\n  set.__ownerID = ownerID;\n  return set;\n}\n\nvar EMPTY_SET;\nfunction emptySet() {\n  return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n}\n\n/**\n * Returns a lazy seq of nums from start (inclusive) to end\n * (exclusive), by step, where start defaults to 0, step to 1, and end to\n * infinity. When start is equal to end, returns empty list.\n */\nvar Range = (function (IndexedSeq$$1) {\n  function Range(start, end, step) {\n    if (!(this instanceof Range)) {\n      return new Range(start, end, step);\n    }\n    invariant(step !== 0, 'Cannot step a Range by 0');\n    start = start || 0;\n    if (end === undefined) {\n      end = Infinity;\n    }\n    step = step === undefined ? 1 : Math.abs(step);\n    if (end < start) {\n      step = -step;\n    }\n    this._start = start;\n    this._end = end;\n    this._step = step;\n    this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n    if (this.size === 0) {\n      if (EMPTY_RANGE) {\n        return EMPTY_RANGE;\n      }\n      EMPTY_RANGE = this;\n    }\n  }\n\n  if ( IndexedSeq$$1 ) Range.__proto__ = IndexedSeq$$1;\n  Range.prototype = Object.create( IndexedSeq$$1 && IndexedSeq$$1.prototype );\n  Range.prototype.constructor = Range;\n\n  Range.prototype.toString = function toString () {\n    if (this.size === 0) {\n      return 'Range []';\n    }\n    return 'Range [ ' +\n      this._start +\n      '...' +\n      this._end +\n      (this._step !== 1 ? ' by ' + this._step : '') +\n      ' ]';\n  };\n\n  Range.prototype.get = function get (index, notSetValue) {\n    return this.has(index)\n      ? this._start + wrapIndex(this, index) * this._step\n      : notSetValue;\n  };\n\n  Range.prototype.includes = function includes (searchValue) {\n    var possibleIndex = (searchValue - this._start) / this._step;\n    return possibleIndex >= 0 &&\n      possibleIndex < this.size &&\n      possibleIndex === Math.floor(possibleIndex);\n  };\n\n  Range.prototype.slice = function slice (begin, end) {\n    if (wholeSlice(begin, end, this.size)) {\n      return this;\n    }\n    begin = resolveBegin(begin, this.size);\n    end = resolveEnd(end, this.size);\n    if (end <= begin) {\n      return new Range(0, 0);\n    }\n    return new Range(\n      this.get(begin, this._end),\n      this.get(end, this._end),\n      this._step\n    );\n  };\n\n  Range.prototype.indexOf = function indexOf (searchValue) {\n    var offsetValue = searchValue - this._start;\n    if (offsetValue % this._step === 0) {\n      var index = offsetValue / this._step;\n      if (index >= 0 && index < this.size) {\n        return index;\n      }\n    }\n    return -1;\n  };\n\n  Range.prototype.lastIndexOf = function lastIndexOf (searchValue) {\n    return this.indexOf(searchValue);\n  };\n\n  Range.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    var size = this.size;\n    var step = this._step;\n    var value = reverse ? this._start + (size - 1) * step : this._start;\n    var i = 0;\n    while (i !== size) {\n      if (fn(value, reverse ? size - ++i : i++, this$1) === false) {\n        break;\n      }\n      value += reverse ? -step : step;\n    }\n    return i;\n  };\n\n  Range.prototype.__iterator = function __iterator (type, reverse) {\n    var size = this.size;\n    var step = this._step;\n    var value = reverse ? this._start + (size - 1) * step : this._start;\n    var i = 0;\n    return new Iterator(function () {\n      if (i === size) {\n        return iteratorDone();\n      }\n      var v = value;\n      value += reverse ? -step : step;\n      return iteratorValue(type, reverse ? size - ++i : i++, v);\n    });\n  };\n\n  Range.prototype.equals = function equals (other) {\n    return other instanceof Range\n      ? this._start === other._start &&\n          this._end === other._end &&\n          this._step === other._step\n      : deepEqual(this, other);\n  };\n\n  return Range;\n}(IndexedSeq));\n\nvar EMPTY_RANGE;\n\n// Note: all of these methods are deprecated.\nCollection.isIterable = isCollection;\nCollection.isKeyed = isKeyed;\nCollection.isIndexed = isIndexed;\nCollection.isAssociative = isAssociative;\nCollection.isOrdered = isOrdered;\n\nCollection.Iterator = Iterator;\n\nmixin(Collection, {\n  // ### Conversion to other types\n\n  toArray: function toArray() {\n    assertNotInfinite(this.size);\n    var array = new Array(this.size || 0);\n    this.valueSeq().__iterate(function (v, i) {\n      array[i] = v;\n    });\n    return array;\n  },\n\n  toIndexedSeq: function toIndexedSeq() {\n    return new ToIndexedSequence(this);\n  },\n\n  toJS: function toJS$1() {\n    return this.toSeq().map(toJS).toJSON();\n  },\n\n  toKeyedSeq: function toKeyedSeq() {\n    return new ToKeyedSequence(this, true);\n  },\n\n  toMap: function toMap() {\n    // Use Late Binding here to solve the circular dependency.\n    return Map(this.toKeyedSeq());\n  },\n\n  toObject: function toObject() {\n    assertNotInfinite(this.size);\n    var object = {};\n    this.__iterate(function (v, k) {\n      object[k] = v;\n    });\n    return object;\n  },\n\n  toOrderedMap: function toOrderedMap() {\n    // Use Late Binding here to solve the circular dependency.\n    return OrderedMap(this.toKeyedSeq());\n  },\n\n  toOrderedSet: function toOrderedSet() {\n    // Use Late Binding here to solve the circular dependency.\n    return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n  },\n\n  toSet: function toSet() {\n    // Use Late Binding here to solve the circular dependency.\n    return Set(isKeyed(this) ? this.valueSeq() : this);\n  },\n\n  toSetSeq: function toSetSeq() {\n    return new ToSetSequence(this);\n  },\n\n  toSeq: function toSeq() {\n    return isIndexed(this)\n      ? this.toIndexedSeq()\n      : isKeyed(this) ? this.toKeyedSeq() : this.toSetSeq();\n  },\n\n  toStack: function toStack() {\n    // Use Late Binding here to solve the circular dependency.\n    return Stack(isKeyed(this) ? this.valueSeq() : this);\n  },\n\n  toList: function toList() {\n    // Use Late Binding here to solve the circular dependency.\n    return List(isKeyed(this) ? this.valueSeq() : this);\n  },\n\n  // ### Common JavaScript methods and properties\n\n  toString: function toString() {\n    return '[Collection]';\n  },\n\n  __toString: function __toString(head, tail) {\n    if (this.size === 0) {\n      return head + tail;\n    }\n    return head +\n      ' ' +\n      this.toSeq().map(this.__toStringMapper).join(', ') +\n      ' ' +\n      tail;\n  },\n\n  // ### ES6 Collection methods (ES6 Array and Map)\n\n  concat: function concat() {\n    var values = [], len = arguments.length;\n    while ( len-- ) values[ len ] = arguments[ len ];\n\n    return reify(this, concatFactory(this, values));\n  },\n\n  includes: function includes(searchValue) {\n    return this.some(function (value) { return is(value, searchValue); });\n  },\n\n  entries: function entries() {\n    return this.__iterator(ITERATE_ENTRIES);\n  },\n\n  every: function every(predicate, context) {\n    assertNotInfinite(this.size);\n    var returnValue = true;\n    this.__iterate(function (v, k, c) {\n      if (!predicate.call(context, v, k, c)) {\n        returnValue = false;\n        return false;\n      }\n    });\n    return returnValue;\n  },\n\n  filter: function filter(predicate, context) {\n    return reify(this, filterFactory(this, predicate, context, true));\n  },\n\n  find: function find(predicate, context, notSetValue) {\n    var entry = this.findEntry(predicate, context);\n    return entry ? entry[1] : notSetValue;\n  },\n\n  forEach: function forEach(sideEffect, context) {\n    assertNotInfinite(this.size);\n    return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n  },\n\n  join: function join(separator) {\n    assertNotInfinite(this.size);\n    separator = separator !== undefined ? '' + separator : ',';\n    var joined = '';\n    var isFirst = true;\n    this.__iterate(function (v) {\n      isFirst ? (isFirst = false) : (joined += separator);\n      joined += v !== null && v !== undefined ? v.toString() : '';\n    });\n    return joined;\n  },\n\n  keys: function keys() {\n    return this.__iterator(ITERATE_KEYS);\n  },\n\n  map: function map(mapper, context) {\n    return reify(this, mapFactory(this, mapper, context));\n  },\n\n  reduce: function reduce$1(reducer, initialReduction, context) {\n    return reduce(\n      this,\n      reducer,\n      initialReduction,\n      context,\n      arguments.length < 2,\n      false\n    );\n  },\n\n  reduceRight: function reduceRight(reducer, initialReduction, context) {\n    return reduce(\n      this,\n      reducer,\n      initialReduction,\n      context,\n      arguments.length < 2,\n      true\n    );\n  },\n\n  reverse: function reverse() {\n    return reify(this, reverseFactory(this, true));\n  },\n\n  slice: function slice(begin, end) {\n    return reify(this, sliceFactory(this, begin, end, true));\n  },\n\n  some: function some(predicate, context) {\n    return !this.every(not(predicate), context);\n  },\n\n  sort: function sort(comparator) {\n    return reify(this, sortFactory(this, comparator));\n  },\n\n  values: function values() {\n    return this.__iterator(ITERATE_VALUES);\n  },\n\n  // ### More sequential methods\n\n  butLast: function butLast() {\n    return this.slice(0, -1);\n  },\n\n  isEmpty: function isEmpty() {\n    return this.size !== undefined ? this.size === 0 : !this.some(function () { return true; });\n  },\n\n  count: function count(predicate, context) {\n    return ensureSize(\n      predicate ? this.toSeq().filter(predicate, context) : this\n    );\n  },\n\n  countBy: function countBy(grouper, context) {\n    return countByFactory(this, grouper, context);\n  },\n\n  equals: function equals(other) {\n    return deepEqual(this, other);\n  },\n\n  entrySeq: function entrySeq() {\n    var collection = this;\n    if (collection._cache) {\n      // We cache as an entries array, so we can just return the cache!\n      return new ArraySeq(collection._cache);\n    }\n    var entriesSequence = collection.toSeq().map(entryMapper).toIndexedSeq();\n    entriesSequence.fromEntrySeq = function () { return collection.toSeq(); };\n\n    // Entries are plain Array, which do not define toJS, so it must\n    // manually converts keys and values before conversion.\n    entriesSequence.toJS = function() {\n      return this.map(function (entry) { return [toJS(entry[0]), toJS(entry[1])]; }).toJSON();\n    };\n\n    return entriesSequence;\n  },\n\n  filterNot: function filterNot(predicate, context) {\n    return this.filter(not(predicate), context);\n  },\n\n  findEntry: function findEntry(predicate, context, notSetValue) {\n    var found = notSetValue;\n    this.__iterate(function (v, k, c) {\n      if (predicate.call(context, v, k, c)) {\n        found = [k, v];\n        return false;\n      }\n    });\n    return found;\n  },\n\n  findKey: function findKey(predicate, context) {\n    var entry = this.findEntry(predicate, context);\n    return entry && entry[0];\n  },\n\n  findLast: function findLast(predicate, context, notSetValue) {\n    return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n  },\n\n  findLastEntry: function findLastEntry(predicate, context, notSetValue) {\n    return this.toKeyedSeq()\n      .reverse()\n      .findEntry(predicate, context, notSetValue);\n  },\n\n  findLastKey: function findLastKey(predicate, context) {\n    return this.toKeyedSeq().reverse().findKey(predicate, context);\n  },\n\n  first: function first() {\n    return this.find(returnTrue);\n  },\n\n  flatMap: function flatMap(mapper, context) {\n    return reify(this, flatMapFactory(this, mapper, context));\n  },\n\n  flatten: function flatten(depth) {\n    return reify(this, flattenFactory(this, depth, true));\n  },\n\n  fromEntrySeq: function fromEntrySeq() {\n    return new FromEntriesSequence(this);\n  },\n\n  get: function get(searchKey, notSetValue) {\n    return this.find(function (_, key) { return is(key, searchKey); }, undefined, notSetValue);\n  },\n\n  getIn: function getIn(searchKeyPath, notSetValue) {\n    var nested = this;\n    var keyPath = coerceKeyPath(searchKeyPath);\n    var i = 0;\n    while (i !== keyPath.length) {\n      if (!nested || !nested.get) {\n        throw new TypeError(\n          'Invalid keyPath: Value at [' +\n            keyPath.slice(0, i).map(quoteString) +\n            '] does not have a .get() method: ' +\n            nested\n        );\n      }\n      nested = nested.get(keyPath[i++], NOT_SET);\n      if (nested === NOT_SET) {\n        return notSetValue;\n      }\n    }\n    return nested;\n    // var step;\n    // while (!(step = iter.next()).done) {\n    //   var key = step.value;\n    //   nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;\n    //   if (nested === NOT_SET) {\n    //     return notSetValue;\n    //   }\n    // }\n    // return nested;\n  },\n\n  groupBy: function groupBy(grouper, context) {\n    return groupByFactory(this, grouper, context);\n  },\n\n  has: function has(searchKey) {\n    return this.get(searchKey, NOT_SET) !== NOT_SET;\n  },\n\n  hasIn: function hasIn(searchKeyPath) {\n    return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;\n  },\n\n  isSubset: function isSubset(iter) {\n    iter = typeof iter.includes === 'function' ? iter : Collection(iter);\n    return this.every(function (value) { return iter.includes(value); });\n  },\n\n  isSuperset: function isSuperset(iter) {\n    iter = typeof iter.isSubset === 'function' ? iter : Collection(iter);\n    return iter.isSubset(this);\n  },\n\n  keyOf: function keyOf(searchValue) {\n    return this.findKey(function (value) { return is(value, searchValue); });\n  },\n\n  keySeq: function keySeq() {\n    return this.toSeq().map(keyMapper).toIndexedSeq();\n  },\n\n  last: function last() {\n    return this.toSeq().reverse().first();\n  },\n\n  lastKeyOf: function lastKeyOf(searchValue) {\n    return this.toKeyedSeq().reverse().keyOf(searchValue);\n  },\n\n  max: function max(comparator) {\n    return maxFactory(this, comparator);\n  },\n\n  maxBy: function maxBy(mapper, comparator) {\n    return maxFactory(this, comparator, mapper);\n  },\n\n  min: function min(comparator) {\n    return maxFactory(\n      this,\n      comparator ? neg(comparator) : defaultNegComparator\n    );\n  },\n\n  minBy: function minBy(mapper, comparator) {\n    return maxFactory(\n      this,\n      comparator ? neg(comparator) : defaultNegComparator,\n      mapper\n    );\n  },\n\n  rest: function rest() {\n    return this.slice(1);\n  },\n\n  skip: function skip(amount) {\n    return amount === 0 ? this : this.slice(Math.max(0, amount));\n  },\n\n  skipLast: function skipLast(amount) {\n    return amount === 0 ? this : this.slice(0, -Math.max(0, amount));\n  },\n\n  skipWhile: function skipWhile(predicate, context) {\n    return reify(this, skipWhileFactory(this, predicate, context, true));\n  },\n\n  skipUntil: function skipUntil(predicate, context) {\n    return this.skipWhile(not(predicate), context);\n  },\n\n  sortBy: function sortBy(mapper, comparator) {\n    return reify(this, sortFactory(this, comparator, mapper));\n  },\n\n  take: function take(amount) {\n    return this.slice(0, Math.max(0, amount));\n  },\n\n  takeLast: function takeLast(amount) {\n    return this.slice(-Math.max(0, amount));\n  },\n\n  takeWhile: function takeWhile(predicate, context) {\n    return reify(this, takeWhileFactory(this, predicate, context));\n  },\n\n  takeUntil: function takeUntil(predicate, context) {\n    return this.takeWhile(not(predicate), context);\n  },\n\n  update: function update(fn) {\n    return fn(this);\n  },\n\n  valueSeq: function valueSeq() {\n    return this.toIndexedSeq();\n  },\n\n  // ### Hashable Object\n\n  hashCode: function hashCode() {\n    return this.__hash || (this.__hash = hashCollection(this));\n  }\n\n  // ### Internal\n\n  // abstract __iterate(fn, reverse)\n\n  // abstract __iterator(type, reverse)\n});\n\nvar CollectionPrototype = Collection.prototype;\nCollectionPrototype[IS_ITERABLE_SENTINEL] = true;\nCollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.values;\nCollectionPrototype.toJSON = CollectionPrototype.toArray;\nCollectionPrototype.__toStringMapper = quoteString;\nCollectionPrototype.inspect = (CollectionPrototype.toSource = function() {\n  return this.toString();\n});\nCollectionPrototype.chain = CollectionPrototype.flatMap;\nCollectionPrototype.contains = CollectionPrototype.includes;\n\nmixin(KeyedCollection, {\n  // ### More sequential methods\n\n  flip: function flip() {\n    return reify(this, flipFactory(this));\n  },\n\n  mapEntries: function mapEntries(mapper, context) {\n    var this$1 = this;\n\n    var iterations = 0;\n    return reify(\n      this,\n      this.toSeq()\n        .map(function (v, k) { return mapper.call(context, [k, v], iterations++, this$1); })\n        .fromEntrySeq()\n    );\n  },\n\n  mapKeys: function mapKeys(mapper, context) {\n    var this$1 = this;\n\n    return reify(\n      this,\n      this.toSeq().flip().map(function (k, v) { return mapper.call(context, k, v, this$1); }).flip()\n    );\n  }\n});\n\nvar KeyedCollectionPrototype = KeyedCollection.prototype;\nKeyedCollectionPrototype[IS_KEYED_SENTINEL] = true;\nKeyedCollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.entries;\nKeyedCollectionPrototype.toJSON = CollectionPrototype.toObject;\nKeyedCollectionPrototype.__toStringMapper = function (v, k) { return quoteString(k) + ': ' + quoteString(v); };\n\nmixin(IndexedCollection, {\n  // ### Conversion to other types\n\n  toKeyedSeq: function toKeyedSeq() {\n    return new ToKeyedSequence(this, false);\n  },\n\n  // ### ES6 Collection methods (ES6 Array and Map)\n\n  filter: function filter(predicate, context) {\n    return reify(this, filterFactory(this, predicate, context, false));\n  },\n\n  findIndex: function findIndex(predicate, context) {\n    var entry = this.findEntry(predicate, context);\n    return entry ? entry[0] : -1;\n  },\n\n  indexOf: function indexOf(searchValue) {\n    var key = this.keyOf(searchValue);\n    return key === undefined ? -1 : key;\n  },\n\n  lastIndexOf: function lastIndexOf(searchValue) {\n    var key = this.lastKeyOf(searchValue);\n    return key === undefined ? -1 : key;\n  },\n\n  reverse: function reverse() {\n    return reify(this, reverseFactory(this, false));\n  },\n\n  slice: function slice(begin, end) {\n    return reify(this, sliceFactory(this, begin, end, false));\n  },\n\n  splice: function splice(index, removeNum /*, ...values*/) {\n    var numArgs = arguments.length;\n    removeNum = Math.max(removeNum || 0, 0);\n    if (numArgs === 0 || (numArgs === 2 && !removeNum)) {\n      return this;\n    }\n    // If index is negative, it should resolve relative to the size of the\n    // collection. However size may be expensive to compute if not cached, so\n    // only call count() if the number is in fact negative.\n    index = resolveBegin(index, index < 0 ? this.count() : this.size);\n    var spliced = this.slice(0, index);\n    return reify(\n      this,\n      numArgs === 1\n        ? spliced\n        : spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))\n    );\n  },\n\n  // ### More collection methods\n\n  findLastIndex: function findLastIndex(predicate, context) {\n    var entry = this.findLastEntry(predicate, context);\n    return entry ? entry[0] : -1;\n  },\n\n  first: function first() {\n    return this.get(0);\n  },\n\n  flatten: function flatten(depth) {\n    return reify(this, flattenFactory(this, depth, false));\n  },\n\n  get: function get(index, notSetValue) {\n    index = wrapIndex(this, index);\n    return index < 0 ||\n      (this.size === Infinity || (this.size !== undefined && index > this.size))\n      ? notSetValue\n      : this.find(function (_, key) { return key === index; }, undefined, notSetValue);\n  },\n\n  has: function has(index) {\n    index = wrapIndex(this, index);\n    return index >= 0 &&\n      (this.size !== undefined\n        ? this.size === Infinity || index < this.size\n        : this.indexOf(index) !== -1);\n  },\n\n  interpose: function interpose(separator) {\n    return reify(this, interposeFactory(this, separator));\n  },\n\n  interleave: function interleave(/*...collections*/) {\n    var collections = [this].concat(arrCopy(arguments));\n    var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, collections);\n    var interleaved = zipped.flatten(true);\n    if (zipped.size) {\n      interleaved.size = zipped.size * collections.length;\n    }\n    return reify(this, interleaved);\n  },\n\n  keySeq: function keySeq() {\n    return Range(0, this.size);\n  },\n\n  last: function last() {\n    return this.get(-1);\n  },\n\n  skipWhile: function skipWhile(predicate, context) {\n    return reify(this, skipWhileFactory(this, predicate, context, false));\n  },\n\n  zip: function zip(/*, ...collections */) {\n    var collections = [this].concat(arrCopy(arguments));\n    return reify(this, zipWithFactory(this, defaultZipper, collections));\n  },\n\n  zipWith: function zipWith(zipper /*, ...collections */) {\n    var collections = arrCopy(arguments);\n    collections[0] = this;\n    return reify(this, zipWithFactory(this, zipper, collections));\n  }\n});\n\nvar IndexedCollectionPrototype = IndexedCollection.prototype;\nIndexedCollectionPrototype[IS_INDEXED_SENTINEL] = true;\nIndexedCollectionPrototype[IS_ORDERED_SENTINEL] = true;\n\nmixin(SetCollection, {\n  // ### ES6 Collection methods (ES6 Array and Map)\n\n  get: function get(value, notSetValue) {\n    return this.has(value) ? value : notSetValue;\n  },\n\n  includes: function includes(value) {\n    return this.has(value);\n  },\n\n  // ### More sequential methods\n\n  keySeq: function keySeq() {\n    return this.valueSeq();\n  }\n});\n\nSetCollection.prototype.has = CollectionPrototype.includes;\nSetCollection.prototype.contains = SetCollection.prototype.includes;\n\n// Mixin subclasses\n\nmixin(KeyedSeq, KeyedCollection.prototype);\nmixin(IndexedSeq, IndexedCollection.prototype);\nmixin(SetSeq, SetCollection.prototype);\n\n// #pragma Helper functions\n\nfunction reduce(collection, reducer, reduction, context, useFirst, reverse) {\n  assertNotInfinite(collection.size);\n  collection.__iterate(\n    function (v, k, c) {\n      if (useFirst) {\n        useFirst = false;\n        reduction = v;\n      } else {\n        reduction = reducer.call(context, reduction, v, k, c);\n      }\n    },\n    reverse\n  );\n  return reduction;\n}\n\nfunction keyMapper(v, k) {\n  return k;\n}\n\nfunction entryMapper(v, k) {\n  return [k, v];\n}\n\nfunction toJS(value) {\n  return value && typeof value.toJS === 'function' ? value.toJS() : value;\n}\n\nfunction not(predicate) {\n  return function() {\n    return !predicate.apply(this, arguments);\n  };\n}\n\nfunction neg(predicate) {\n  return function() {\n    return -predicate.apply(this, arguments);\n  };\n}\n\nfunction defaultZipper() {\n  return arrCopy(arguments);\n}\n\nfunction defaultNegComparator(a, b) {\n  return a < b ? 1 : a > b ? -1 : 0;\n}\n\nfunction hashCollection(collection) {\n  if (collection.size === Infinity) {\n    return 0;\n  }\n  var ordered = isOrdered(collection);\n  var keyed = isKeyed(collection);\n  var h = ordered ? 1 : 0;\n  var size = collection.__iterate(\n    keyed\n      ? ordered\n          ? function (v, k) {\n              h = 31 * h + hashMerge(hash(v), hash(k)) | 0;\n            }\n          : function (v, k) {\n              h = h + hashMerge(hash(v), hash(k)) | 0;\n            }\n      : ordered\n          ? function (v) {\n              h = 31 * h + hash(v) | 0;\n            }\n          : function (v) {\n              h = h + hash(v) | 0;\n            }\n  );\n  return murmurHashOfSize(size, h);\n}\n\nfunction murmurHashOfSize(size, h) {\n  h = imul(h, 0xcc9e2d51);\n  h = imul(h << 15 | h >>> -15, 0x1b873593);\n  h = imul(h << 13 | h >>> -13, 5);\n  h = (h + 0xe6546b64 | 0) ^ size;\n  h = imul(h ^ h >>> 16, 0x85ebca6b);\n  h = imul(h ^ h >>> 13, 0xc2b2ae35);\n  h = smi(h ^ h >>> 16);\n  return h;\n}\n\nfunction hashMerge(a, b) {\n  return a ^ b + 0x9e3779b9 + (a << 6) + (a >> 2) | 0; // int\n}\n\nvar OrderedSet = (function (Set$$1) {\n  function OrderedSet(value) {\n    return value === null || value === undefined\n      ? emptyOrderedSet()\n      : isOrderedSet(value)\n          ? value\n          : emptyOrderedSet().withMutations(function (set) {\n              var iter = SetCollection(value);\n              assertNotInfinite(iter.size);\n              iter.forEach(function (v) { return set.add(v); });\n            });\n  }\n\n  if ( Set$$1 ) OrderedSet.__proto__ = Set$$1;\n  OrderedSet.prototype = Object.create( Set$$1 && Set$$1.prototype );\n  OrderedSet.prototype.constructor = OrderedSet;\n\n  OrderedSet.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  OrderedSet.fromKeys = function fromKeys (value) {\n    return this(KeyedCollection(value).keySeq());\n  };\n\n  OrderedSet.prototype.toString = function toString () {\n    return this.__toString('OrderedSet {', '}');\n  };\n\n  return OrderedSet;\n}(Set));\n\nfunction isOrderedSet(maybeOrderedSet) {\n  return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n}\n\nOrderedSet.isOrderedSet = isOrderedSet;\n\nvar OrderedSetPrototype = OrderedSet.prototype;\nOrderedSetPrototype[IS_ORDERED_SENTINEL] = true;\nOrderedSetPrototype.zip = IndexedCollectionPrototype.zip;\nOrderedSetPrototype.zipWith = IndexedCollectionPrototype.zipWith;\n\nOrderedSetPrototype.__empty = emptyOrderedSet;\nOrderedSetPrototype.__make = makeOrderedSet;\n\nfunction makeOrderedSet(map, ownerID) {\n  var set = Object.create(OrderedSetPrototype);\n  set.size = map ? map.size : 0;\n  set._map = map;\n  set.__ownerID = ownerID;\n  return set;\n}\n\nvar EMPTY_ORDERED_SET;\nfunction emptyOrderedSet() {\n  return EMPTY_ORDERED_SET ||\n    (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));\n}\n\nvar Record = function Record(defaultValues, name) {\n  var hasInitialized;\n\n  var RecordType = function Record(values) {\n    var this$1 = this;\n\n    if (values instanceof RecordType) {\n      return values;\n    }\n    if (!(this instanceof RecordType)) {\n      return new RecordType(values);\n    }\n    if (!hasInitialized) {\n      hasInitialized = true;\n      var keys = Object.keys(defaultValues);\n      var indices = (RecordTypePrototype._indices = {});\n      RecordTypePrototype._name = name;\n      RecordTypePrototype._keys = keys;\n      RecordTypePrototype._defaultValues = defaultValues;\n      for (var i = 0; i < keys.length; i++) {\n        var propName = keys[i];\n        indices[propName] = i;\n        if (RecordTypePrototype[propName]) {\n          /* eslint-disable no-console */\n          typeof console === 'object' &&\n            console.warn &&\n            console.warn(\n              'Cannot define ' +\n                recordName(this$1) +\n                ' with property \"' +\n                propName +\n                '\" since that property name is part of the Record API.'\n            );\n          /* eslint-enable no-console */\n        } else {\n          setProp(RecordTypePrototype, propName);\n        }\n      }\n    }\n    this.__ownerID = undefined;\n    this._values = List().withMutations(function (l) {\n      l.setSize(this$1._keys.length);\n      KeyedCollection(values).forEach(function (v, k) {\n        l.set(this$1._indices[k], v === this$1._defaultValues[k] ? undefined : v);\n      });\n    });\n  };\n\n  var RecordTypePrototype = (RecordType.prototype = Object.create(\n    RecordPrototype\n  ));\n  RecordTypePrototype.constructor = RecordType;\n\n  return RecordType;\n};\n\nRecord.prototype.toString = function toString () {\n    var this$1 = this;\n\n  var str = recordName(this) + ' { ';\n  var keys = this._keys;\n  var k;\n  for (var i = 0, l = keys.length; i !== l; i++) {\n    k = keys[i];\n    str += (i ? ', ' : '') + k + ': ' + quoteString(this$1.get(k));\n  }\n  return str + ' }';\n};\n\nRecord.prototype.equals = function equals (other) {\n  return this === other ||\n    (this._keys === other._keys && recordSeq(this).equals(recordSeq(other)));\n};\n\nRecord.prototype.hashCode = function hashCode () {\n  return recordSeq(this).hashCode();\n};\n\n// @pragma Access\n\nRecord.prototype.has = function has (k) {\n  return this._indices.hasOwnProperty(k);\n};\n\nRecord.prototype.get = function get (k, notSetValue) {\n  if (!this.has(k)) {\n    return notSetValue;\n  }\n  var index = this._indices[k];\n  var value = this._values.get(index);\n  return value === undefined ? this._defaultValues[k] : value;\n};\n\n// @pragma Modification\n\nRecord.prototype.set = function set (k, v) {\n  if (this.has(k)) {\n    var newValues = this._values.set(\n      this._indices[k],\n      v === this._defaultValues[k] ? undefined : v\n    );\n    if (newValues !== this._values && !this.__ownerID) {\n      return makeRecord(this, newValues);\n    }\n  }\n  return this;\n};\n\nRecord.prototype.remove = function remove (k) {\n  return this.set(k);\n};\n\nRecord.prototype.clear = function clear () {\n  var newValues = this._values.clear().setSize(this._keys.length);\n  return this.__ownerID ? this : makeRecord(this, newValues);\n};\n\nRecord.prototype.wasAltered = function wasAltered () {\n  return this._values.wasAltered();\n};\n\nRecord.prototype.toSeq = function toSeq () {\n  return recordSeq(this);\n};\n\nRecord.prototype.toJS = function toJS () {\n  return recordSeq(this).toJS();\n};\n\nRecord.prototype.__iterator = function __iterator (type, reverse) {\n  return recordSeq(this).__iterator(type, reverse);\n};\n\nRecord.prototype.__iterate = function __iterate (fn, reverse) {\n  return recordSeq(this).__iterate(fn, reverse);\n};\n\nRecord.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n  if (ownerID === this.__ownerID) {\n    return this;\n  }\n  var newValues = this._values.__ensureOwner(ownerID);\n  if (!ownerID) {\n    this.__ownerID = ownerID;\n    this._values = newValues;\n    return this;\n  }\n  return makeRecord(this, newValues, ownerID);\n};\n\nRecord.isRecord = isRecord;\nRecord.getDescriptiveName = recordName;\nvar RecordPrototype = Record.prototype;\nRecordPrototype[IS_RECORD_SENTINEL] = true;\nRecordPrototype[DELETE] = RecordPrototype.remove;\nRecordPrototype.getIn = CollectionPrototype.getIn;\nRecordPrototype.hasIn = CollectionPrototype.hasIn;\nRecordPrototype.merge = MapPrototype.merge;\nRecordPrototype.mergeWith = MapPrototype.mergeWith;\nRecordPrototype.mergeIn = MapPrototype.mergeIn;\nRecordPrototype.mergeDeep = MapPrototype.mergeDeep;\nRecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;\nRecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\nRecordPrototype.setIn = MapPrototype.setIn;\nRecordPrototype.update = MapPrototype.update;\nRecordPrototype.updateIn = MapPrototype.updateIn;\nRecordPrototype.withMutations = MapPrototype.withMutations;\nRecordPrototype.asMutable = MapPrototype.asMutable;\nRecordPrototype.asImmutable = MapPrototype.asImmutable;\nRecordPrototype[ITERATOR_SYMBOL] = CollectionPrototype.entries;\nRecordPrototype.toJSON = (RecordPrototype.toObject = CollectionPrototype.toObject);\nRecordPrototype.inspect = (RecordPrototype.toSource = CollectionPrototype.toSource);\n\nfunction makeRecord(likeRecord, values, ownerID) {\n  var record = Object.create(Object.getPrototypeOf(likeRecord));\n  record._values = values;\n  record.__ownerID = ownerID;\n  return record;\n}\n\nfunction recordName(record) {\n  return record._name || record.constructor.name || 'Record';\n}\n\nfunction recordSeq(record) {\n  return keyedSeqFromValue(record._keys.map(function (k) { return [k, record.get(k)]; }));\n}\n\nfunction setProp(prototype, name) {\n  try {\n    Object.defineProperty(prototype, name, {\n      get: function() {\n        return this.get(name);\n      },\n      set: function(value) {\n        invariant(this.__ownerID, 'Cannot set on an immutable record.');\n        this.set(name, value);\n      }\n    });\n  } catch (error) {\n    // Object.defineProperty failed. Probably IE8.\n  }\n}\n\n/**\n * Returns a lazy Seq of `value` repeated `times` times. When `times` is\n * undefined, returns an infinite sequence of `value`.\n */\nvar Repeat = (function (IndexedSeq$$1) {\n  function Repeat(value, times) {\n    if (!(this instanceof Repeat)) {\n      return new Repeat(value, times);\n    }\n    this._value = value;\n    this.size = times === undefined ? Infinity : Math.max(0, times);\n    if (this.size === 0) {\n      if (EMPTY_REPEAT) {\n        return EMPTY_REPEAT;\n      }\n      EMPTY_REPEAT = this;\n    }\n  }\n\n  if ( IndexedSeq$$1 ) Repeat.__proto__ = IndexedSeq$$1;\n  Repeat.prototype = Object.create( IndexedSeq$$1 && IndexedSeq$$1.prototype );\n  Repeat.prototype.constructor = Repeat;\n\n  Repeat.prototype.toString = function toString () {\n    if (this.size === 0) {\n      return 'Repeat []';\n    }\n    return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';\n  };\n\n  Repeat.prototype.get = function get (index, notSetValue) {\n    return this.has(index) ? this._value : notSetValue;\n  };\n\n  Repeat.prototype.includes = function includes (searchValue) {\n    return is(this._value, searchValue);\n  };\n\n  Repeat.prototype.slice = function slice (begin, end) {\n    var size = this.size;\n    return wholeSlice(begin, end, size)\n      ? this\n      : new Repeat(\n          this._value,\n          resolveEnd(end, size) - resolveBegin(begin, size)\n        );\n  };\n\n  Repeat.prototype.reverse = function reverse () {\n    return this;\n  };\n\n  Repeat.prototype.indexOf = function indexOf (searchValue) {\n    if (is(this._value, searchValue)) {\n      return 0;\n    }\n    return -1;\n  };\n\n  Repeat.prototype.lastIndexOf = function lastIndexOf (searchValue) {\n    if (is(this._value, searchValue)) {\n      return this.size;\n    }\n    return -1;\n  };\n\n  Repeat.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1 = this;\n\n    var size = this.size;\n    var i = 0;\n    while (i !== size) {\n      if (fn(this$1._value, reverse ? size - ++i : i++, this$1) === false) {\n        break;\n      }\n    }\n    return i;\n  };\n\n  Repeat.prototype.__iterator = function __iterator (type, reverse) {\n    var this$1 = this;\n\n    var size = this.size;\n    var i = 0;\n    return new Iterator(\n      function () { return i === size\n          ? iteratorDone()\n          : iteratorValue(type, reverse ? size - ++i : i++, this$1._value); }\n    );\n  };\n\n  Repeat.prototype.equals = function equals (other) {\n    return other instanceof Repeat\n      ? is(this._value, other._value)\n      : deepEqual(other);\n  };\n\n  return Repeat;\n}(IndexedSeq));\n\nvar EMPTY_REPEAT;\n\nvar Immutable = {\n  Collection: Collection,\n  // Note: Iterable is deprecated\n  Iterable: Collection,\n\n  Seq: Seq,\n  Map: Map,\n  OrderedMap: OrderedMap,\n  List: List,\n  Stack: Stack,\n  Set: Set,\n  OrderedSet: OrderedSet,\n\n  Record: Record,\n  Range: Range,\n  Repeat: Repeat,\n\n  is: is,\n  fromJS: fromJS,\n  hash: hash,\n\n  isImmutable: isImmutable,\n  isCollection: isCollection,\n  isKeyed: isKeyed,\n  isIndexed: isIndexed,\n  isAssociative: isAssociative,\n  isOrdered: isOrdered,\n  isValueObject: isValueObject\n};\n\n// Note: Iterable is deprecated\nvar Iterable = Collection;\n\nexports['default'] = Immutable;\nexports.Collection = Collection;\nexports.Iterable = Iterable;\nexports.Seq = Seq;\nexports.Map = Map;\nexports.OrderedMap = OrderedMap;\nexports.List = List;\nexports.Stack = Stack;\nexports.Set = Set;\nexports.OrderedSet = OrderedSet;\nexports.Record = Record;\nexports.Range = Range;\nexports.Repeat = Repeat;\nexports.is = is;\nexports.fromJS = fromJS;\nexports.hash = hash;\nexports.isImmutable = isImmutable;\nexports.isCollection = isCollection;\nexports.isKeyed = isKeyed;\nexports.isIndexed = isIndexed;\nexports.isAssociative = isAssociative;\nexports.isOrdered = isOrdered;\nexports.isValueObject = isValueObject;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","/**@license\n *       __ _____                     ________                              __\n *      / // _  /__ __ _____ ___ __ _/__  ___/__ ___ ______ __ __  __ ___  / /\n *  __ / // // // // // _  // _// // / / // _  // _//     // //  \\/ // _ \\/ /\n * /  / // // // // // ___// / / // / / // ___// / / / / // // /\\  // // / /__\n * \\___//____ \\\\___//____//_/ _\\_  / /_//____//_/ /_/ /_//_//_/ /_/ \\__\\_\\___/\n *           \\/              /____/                              version 1.4.0\n *\n * This file is part of jQuery Terminal. http://terminal.jcubic.pl\n *\n * Copyright (c) 2010-2017 Jakub Jankiewicz <http://jcubic.pl/me>\n * Released under the MIT license\n *\n * Contains:\n *\n * Storage plugin Distributed under the MIT License\n * Copyright (c) 2010 Dave Schindler\n *\n * jQuery Timers licenced with the WTFPL\n * <http://jquery.offput.ca/timers/>\n *\n * Cross-Browser Split 1.1.1\n * Copyright 2007-2012 Steven Levithan <stevenlevithan.com>\n * Available under the MIT License\n *\n * jQuery Caret\n * Copyright (c) 2009, Gideon Sireling\n * 3 clause BSD License\n *\n * sprintf.js\n * Copyright (c) 2007-2013 Alexandru Marasteanu <hello at alexei dot ro>\n * licensed under 3 clause BSD license\n *\n * Date: Wed, 10 May 2017 07:23:33 +0000\n */\n\n/* TODO:\n *\n * Debug interpreters names in LocalStorage\n * onPositionChange event add to terminal ???\n * different command line history for each login users (add login if present to\n * localStorage key)\n *\n * TEST: login + promises/exec\n *       json-rpc/object + promises\n *\n * NOTE: json-rpc don't need promises and delegate resume/pause because only\n *       exec can call it and exec call interpreter that work with resume/pause\n */\n/* global location jQuery setTimeout window global localStorage sprintf\n          setImmediate IntersectionObserver MutationObserver*/\n/* eslint-disable */\n(function(ctx) {\n    var sprintf = function() {\n        if (!sprintf.cache.hasOwnProperty(arguments[0])) {\n            sprintf.cache[arguments[0]] = sprintf.parse(arguments[0]);\n        }\n        return sprintf.format.call(null, sprintf.cache[arguments[0]], arguments);\n    };\n\n    sprintf.format = function(parse_tree, argv) {\n        var cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length;\n        for (i = 0; i < tree_length; i++) {\n            node_type = get_type(parse_tree[i]);\n            if (node_type === 'string') {\n                output.push(parse_tree[i]);\n            }\n            else if (node_type === 'array') {\n                match = parse_tree[i]; // convenience purposes only\n                if (match[2]) { // keyword argument\n                    arg = argv[cursor];\n                    for (k = 0; k < match[2].length; k++) {\n                        if (!arg.hasOwnProperty(match[2][k])) {\n                            throw(sprintf('[sprintf] property \"%s\" does not exist', match[2][k]));\n                        }\n                        arg = arg[match[2][k]];\n                    }\n                }\n                else if (match[1]) { // positional argument (explicit)\n                    arg = argv[match[1]];\n                }\n                else { // positional argument (implicit)\n                    arg = argv[cursor++];\n                }\n\n                if (/[^s]/.test(match[8]) && (get_type(arg) !== 'number')) {\n                    throw(sprintf('[sprintf] expecting number but found %s', get_type(arg)));\n                }\n                switch (match[8]) {\n                    case 'b': arg = arg.toString(2); break;\n                    case 'c': arg = String.fromCharCode(arg); break;\n                    case 'd': arg = parseInt(arg, 10); break;\n                    case 'e': arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential(); break;\n                    case 'f': arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg); break;\n                    case 'o': arg = arg.toString(8); break;\n                    case 's': arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg); break;\n                    case 'u': arg = arg >>> 0; break;\n                    case 'x': arg = arg.toString(16); break;\n                    case 'X': arg = arg.toString(16).toUpperCase(); break;\n                }\n                arg = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? ' +' + arg : arg);\n                pad_character = match[4] ? match[4] === '0' ? '0' : match[4].charAt(1) : ' ';\n                pad_length = match[6] - String(arg).length;\n                pad = match[6] ? str_repeat(pad_character, pad_length) : '';\n                output.push(match[5] ? arg + pad : pad + arg);\n            }\n        }\n        return output.join('');\n    };\n\n    sprintf.cache = {};\n\n    sprintf.parse = function(fmt) {\n        var _fmt = fmt, match = [], parse_tree = [], arg_names = 0;\n        while (_fmt) {\n            if ((match = /^[^\\x25]+/.exec(_fmt)) !== null) {\n                parse_tree.push(match[0]);\n            }\n            else if ((match = /^\\x25{2}/.exec(_fmt)) !== null) {\n                parse_tree.push('%');\n            }\n            else if ((match = /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {\n                if (match[2]) {\n                    arg_names |= 1;\n                    var field_list = [], replacement_field = match[2], field_match = [];\n                    if ((field_match = /^([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {\n                        field_list.push(field_match[1]);\n                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\n                            if ((field_match = /^\\.([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1]);\n                            }\n                            else if ((field_match = /^\\[(\\d+)\\]/.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1]);\n                            }\n                            else {\n                                throw('[sprintf] huh?');\n                            }\n                        }\n                    }\n                    else {\n                        throw('[sprintf] huh?');\n                    }\n                    match[2] = field_list;\n                }\n                else {\n                    arg_names |= 2;\n                }\n                if (arg_names === 3) {\n                    throw('[sprintf] mixing positional and named placeholders is not (yet) supported');\n                }\n                parse_tree.push(match);\n            }\n            else {\n                throw('[sprintf] huh?');\n            }\n            _fmt = _fmt.substring(match[0].length);\n        }\n        return parse_tree;\n    };\n\n    var vsprintf = function(fmt, argv, _argv) {\n        _argv = argv.slice(0);\n        _argv.splice(0, 0, fmt);\n        return sprintf.apply(null, _argv);\n    };\n\n    /**\n     * helpers\n     */\n    function get_type(variable) {\n        return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase();\n    }\n\n    function str_repeat(input, multiplier) {\n        for (var output = []; multiplier > 0; output[--multiplier] = input) {/* do nothing */}\n        return output.join('');\n    }\n\n    /**\n     * export to either browser or node.js\n     */\n    ctx.sprintf = sprintf;\n    ctx.vsprintf = vsprintf;\n})(typeof global !== \"undefined\" ? global : window);\n/* eslint-enable */\n(function($, undefined) {\n    'use strict';\n    // -----------------------------------------------------------------------\n    // :: Replacemenet for jQuery 2 deferred objects\n    // -----------------------------------------------------------------------\n    function DelayQueue() {\n        var callbacks = $.Callbacks();\n        var resolved = false;\n        this.resolve = function() {\n            callbacks.fire();\n            resolved = true;\n        };\n        this.add = function(fn) {\n            if (resolved) {\n                fn();\n            } else {\n                callbacks.add(fn);\n            }\n        };\n    }\n    // -----------------------------------------------------------------------\n    // :: map object to object\n    // -----------------------------------------------------------------------\n    $.omap = function(o, fn) {\n        var result = {};\n        $.each(o, function(k, v) {\n            result[k] = fn.call(o, k, v);\n        });\n        return result;\n    };\n    // -----------------------------------------------------------------------\n    // :: Deep clone of objects and arrays\n    // -----------------------------------------------------------------------\n    var Clone = {\n        clone_object: function(object) {\n            var tmp = {};\n            if (typeof object === 'object') {\n                if ($.isArray(object)) {\n                    return this.clone_array(object);\n                } else if (object === null) {\n                    return object;\n                } else {\n                    for (var key in object) {\n                        if ($.isArray(object[key])) {\n                            tmp[key] = this.clone_array(object[key]);\n                        } else if (typeof object[key] === 'object') {\n                            tmp[key] = this.clone_object(object[key]);\n                        } else {\n                            tmp[key] = object[key];\n                        }\n                    }\n                }\n            }\n            return tmp;\n        },\n        clone_array: function(array) {\n            if (!$.isFunction(Array.prototype.map)) {\n                throw new Error(\"Your browser don't support ES5 array map \" +\n                                'use es5-shim');\n            }\n            return array.slice(0).map(function(item) {\n                if (typeof item === 'object') {\n                    return this.clone_object(item);\n                } else {\n                    return item;\n                }\n            }.bind(this));\n        }\n    };\n    var clone = function(object) {\n        return Clone.clone_object(object);\n    };\n\n    /* eslint-disable */\n    var hasLS = function() {\n      var testKey = 'test', storage = window.localStorage;\n      try {\n        storage.setItem(testKey, '1');\n        storage.removeItem(testKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    };\n\n    // -----------------------------------------------------------------------\n    // :: Storage plugin\n    // -----------------------------------------------------------------------\n    // Private data\n    var isLS = hasLS();\n    // Private functions\n    function wls(n, v) {\n        var c;\n        if (typeof n === 'string' && typeof v === 'string') {\n            localStorage[n] = v;\n            return true;\n        } else if (typeof n === 'object' && typeof v === 'undefined') {\n            for (c in n) {\n                if (n.hasOwnProperty(c)) {\n                    localStorage[c] = n[c];\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    function wc(n, v) {\n        var dt, e, c;\n        dt = new Date();\n        dt.setTime(dt.getTime() + 31536000000);\n        e = '; expires=' + dt.toGMTString();\n        if (typeof n === 'string' && typeof v === 'string') {\n            document.cookie = n + '=' + v + e + '; path=/';\n            return true;\n        } else if (typeof n === 'object' && typeof v === 'undefined') {\n            for (c in n) {\n                if (n.hasOwnProperty(c)) {\n                    document.cookie = c + '=' + n[c] + e + '; path=/';\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    function rls(n) {\n        return localStorage[n];\n    }\n    function rc(n) {\n        var nn, ca, i, c;\n        nn = n + '=';\n        ca = document.cookie.split(';');\n        for (i = 0; i < ca.length; i++) {\n            c = ca[i];\n            while (c.charAt(0) === ' ') {\n                c = c.substring(1, c.length);\n            }\n            if (c.indexOf(nn) === 0) {\n                return c.substring(nn.length, c.length);\n            }\n        }\n        return null;\n    }\n    function dls(n) {\n        return delete localStorage[n];\n    }\n    function dc(n) {\n        return wc(n, '', -1);\n    }\n    /**\n    * Public API\n    * $.Storage.set(\"name\", \"value\")\n    * $.Storage.set({\"name1\":\"value1\", \"name2\":\"value2\", etc})\n    * $.Storage.get(\"name\")\n    * $.Storage.remove(\"name\")\n    */\n    $.extend({\n        Storage: {\n            set: isLS ? wls : wc,\n            get: isLS ? rls : rc,\n            remove: isLS ? dls : dc\n        }\n    });\n    // -----------------------------------------------------------------------\n    // :: jQuery Timers\n    // -----------------------------------------------------------------------\n    var jQuery = $;\n    jQuery.fn.extend({\n        everyTime: function(interval, label, fn, times, belay) {\n            return this.each(function() {\n                jQuery.timer.add(this, interval, label, fn, times, belay);\n            });\n        },\n        oneTime: function(interval, label, fn) {\n            return this.each(function() {\n                jQuery.timer.add(this, interval, label, fn, 1);\n            });\n        },\n        stopTime: function(label, fn) {\n            return this.each(function() {\n                jQuery.timer.remove(this, label, fn);\n            });\n        }\n    });\n\n    jQuery.extend({\n        timer: {\n            guid: 1,\n            global: {},\n            regex: /^([0-9]+)\\s*(.*s)?$/,\n            powers: {\n                // Yeah this is major overkill...\n                'ms': 1,\n                'cs': 10,\n                'ds': 100,\n                's': 1000,\n                'das': 10000,\n                'hs': 100000,\n                'ks': 1000000\n            },\n            timeParse: function(value) {\n                if (value === undefined || value === null) {\n                    return null;\n                }\n                var result = this.regex.exec(jQuery.trim(value.toString()));\n                if (result[2]) {\n                    var num = parseInt(result[1], 10);\n                    var mult = this.powers[result[2]] || 1;\n                    return num * mult;\n                } else {\n                    return value;\n                }\n            },\n            add: function(element, interval, label, fn, times, belay) {\n                var counter = 0;\n\n                if (jQuery.isFunction(label)) {\n                    if (!times) {\n                        times = fn;\n                    }\n                    fn = label;\n                    label = interval;\n                }\n\n                interval = jQuery.timer.timeParse(interval);\n\n                if (typeof interval !== 'number' ||\n                    isNaN(interval) ||\n                    interval <= 0) {\n                    return;\n                }\n                if (times && times.constructor !== Number) {\n                    belay = !!times;\n                    times = 0;\n                }\n\n                times = times || 0;\n                belay = belay || false;\n\n                if (!element.$timers) {\n                    element.$timers = {};\n                }\n                if (!element.$timers[label]) {\n                    element.$timers[label] = {};\n                }\n                fn.$timerID = fn.$timerID || this.guid++;\n\n                var handler = function() {\n                    if (belay && handler.inProgress) {\n                        return;\n                    }\n                    handler.inProgress = true;\n                    if ((++counter > times && times !== 0) ||\n                        fn.call(element, counter) === false) {\n                        jQuery.timer.remove(element, label, fn);\n                    }\n                    handler.inProgress = false;\n                };\n\n                handler.$timerID = fn.$timerID;\n\n                if (!element.$timers[label][fn.$timerID]) {\n                    element.$timers[label][fn.$timerID] = window.setInterval(handler, interval);\n                }\n\n                if (!this.global[label]) {\n                    this.global[label] = [];\n                }\n                this.global[label].push(element);\n\n            },\n            remove: function(element, label, fn) {\n                var timers = element.$timers, ret;\n\n                if (timers) {\n\n                    if (!label) {\n                        for (var lab in timers) {\n                            if (timers.hasOwnProperty(lab)) {\n                                this.remove(element, lab, fn);\n                            }\n                        }\n                    } else if (timers[label]) {\n                        if (fn) {\n                            if (fn.$timerID) {\n                                window.clearInterval(timers[label][fn.$timerID]);\n                                delete timers[label][fn.$timerID];\n                            }\n                        } else {\n                            for (var _fn in timers[label]) {\n                                if (timers[label].hasOwnProperty(_fn)) {\n                                    window.clearInterval(timers[label][_fn]);\n                                    delete timers[label][_fn];\n                                }\n                            }\n                        }\n\n                        for (ret in timers[label]) {\n                            if (timers[label].hasOwnProperty(ret)) {\n                                break;\n                            }\n                        }\n                        if (!ret) {\n                            ret = null;\n                            delete timers[label];\n                        }\n                    }\n\n                    for (ret in timers) {\n                        if (timers.hasOwnProperty(ret)) {\n                            break;\n                        }\n                    }\n                    if (!ret) {\n                        element.$timers = null;\n                    }\n                }\n            }\n        }\n    });\n\n    if (/(msie) ([\\w.]+)/.exec(navigator.userAgent.toLowerCase())) {\n        jQuery(window).one('unload', function() {\n            var global = jQuery.timer.global;\n            for (var label in global) {\n                if (global.hasOwnProperty(label)) {\n                    var els = global[label], i = els.length;\n                    while (--i) {\n                        jQuery.timer.remove(els[i], label);\n                    }\n                }\n            }\n        });\n    }\n    // -----------------------------------------------------------------------\n    // :: CROSS BROWSER SPLIT\n    // -----------------------------------------------------------------------\n    (function(undef) {\n\n        // prevent double include\n\n        if (!String.prototype.split.toString().match(/\\[native/)) {\n            return;\n        }\n\n        var nativeSplit = String.prototype.split,\n        compliantExecNpcg = /()??/.exec(\"\")[1] === undef, // NPCG: nonparticipating capturing group\n        self;\n\n        self = function(str, separator, limit) {\n            // If `separator` is not a regex, use `nativeSplit`\n            if (Object.prototype.toString.call(separator) !== \"[object RegExp]\") {\n                return nativeSplit.call(str, separator, limit);\n            }\n            var output = [],\n            flags = (separator.ignoreCase ? \"i\" : \"\") +\n                (separator.multiline  ? \"m\" : \"\") +\n                (separator.extended   ? \"x\" : \"\") + // Proposed for ES6\n                (separator.sticky     ? \"y\" : \"\"), // Firefox 3+\n                lastLastIndex = 0,\n            // Make `global` and avoid `lastIndex` issues by working with a copy\n            separator2, match, lastIndex, lastLength;\n            separator = new RegExp(separator.source, flags + \"g\");\n            str += \"\"; // Type-convert\n            if (!compliantExecNpcg) {\n                // Doesn't need flags gy, but they don't hurt\n                separator2 = new RegExp(\"^\" + separator.source + \"$(?!\\\\s)\", flags);\n            }\n            /* Values for `limit`, per the spec:\n             * If undefined: 4294967295 // Math.pow(2, 32) - 1\n             * If 0, Infinity, or NaN: 0\n             * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;\n             * If negative number: 4294967296 - Math.floor(Math.abs(limit))\n             * If other: Type-convert, then use the above rules\n             */\n            // ? Math.pow(2, 32) - 1 : ToUint32(limit)\n            limit = limit === undef ? -1 >>> 0 : limit >>> 0;\n            while (match = separator.exec(str)) {\n                    // `separator.lastIndex` is not reliable cross-browser\n                    lastIndex = match.index + match[0].length;\n                    if (lastIndex > lastLastIndex) {\n                        output.push(str.slice(lastLastIndex, match.index));\n                        // Fix browsers whose `exec` methods don't consistently return `undefined` for\n                        // nonparticipating capturing groups\n                        if (!compliantExecNpcg && match.length > 1) {\n                            match[0].replace(separator2, function() {\n                                for (var i = 1; i < arguments.length - 2; i++) {\n                                    if (arguments[i] === undef) {\n                                        match[i] = undef;\n                                    }\n                                }\n                            });\n                        }\n                        if (match.length > 1 && match.index < str.length) {\n                            Array.prototype.push.apply(output, match.slice(1));\n                        }\n                        lastLength = match[0].length;\n                        lastLastIndex = lastIndex;\n                        if (output.length >= limit) {\n                            break;\n                        }\n                    }\n                    if (separator.lastIndex === match.index) {\n                        separator.lastIndex++; // Avoid an infinite loop\n                    }\n                }\n            if (lastLastIndex === str.length) {\n                if (lastLength || !separator.test(\"\")) {\n                    output.push(\"\");\n                }\n            } else {\n                output.push(str.slice(lastLastIndex));\n            }\n            return output.length > limit ? output.slice(0, limit) : output;\n        };\n\n        // For convenience\n        String.prototype.split = function(separator, limit) {\n            return self(this, separator, limit);\n        };\n\n        return self;\n\n    })();\n    // -----------------------------------------------------------------------\n    // :: jQuery Caret\n    // -----------------------------------------------------------------------\n    $.fn.caret = function(pos) {\n        var target = this[0];\n        var isContentEditable = target.contentEditable === 'true';\n        //get\n        if (arguments.length === 0) {\n            //HTML5\n            if (window.getSelection) {\n                //contenteditable\n                if (isContentEditable) {\n                    target.focus();\n                    var range1 = window.getSelection().getRangeAt(0),\n                    range2 = range1.cloneRange();\n                    range2.selectNodeContents(target);\n                    range2.setEnd(range1.endContainer, range1.endOffset);\n                    return range2.toString().length;\n                }\n                //textarea\n                return target.selectionStart;\n            }\n            //IE<9\n            if (document.selection) {\n                target.focus();\n                //contenteditable\n                if (isContentEditable) {\n                    var range1 = document.selection.createRange(),\n                    range2 = document.body.createTextRange();\n                    range2.moveToElementText(target);\n                    range2.setEndPoint('EndToEnd', range1);\n                    return range2.text.length;\n                }\n                //textarea\n                var pos = 0,\n                range = target.createTextRange(),\n                range2 = document.selection.createRange().duplicate(),\n                bookmark = range2.getBookmark();\n                range.moveToBookmark(bookmark);\n                while (range.moveStart('character', -1) !== 0) pos++;\n                return pos;\n            }\n            //not supported\n            return 0;\n        }\n        //set\n        if (pos === -1)\n            pos = this[isContentEditable? 'text' : 'val']().length;\n        //HTML5\n        if (window.getSelection) {\n            //contenteditable\n            if (isContentEditable) {\n                target.focus();\n                window.getSelection().collapse(target.firstChild, pos);\n            }\n            //textarea\n            else\n                target.setSelectionRange(pos, pos);\n        }\n        //IE<9\n        else if (document.body.createTextRange) {\n            var range = document.body.createTextRange();\n            range.moveToElementText(target);\n            range.moveStart('character', pos);\n            range.collapse(true);\n            range.select();\n        }\n        if (!isContentEditable)\n            target.focus();\n        return pos;\n    };\n    /* eslint-enable */\n    var requestAnimationFrame =\n        window.requestAnimationFrame ||\n        window.mozRequestAnimationFrame ||\n        window.webkitRequestAnimationFrame ||\n        function(fn) {\n            return window.setTimeout(fn, 20);\n        };\n    // -----------------------------------------------------------------------\n    // :: Cross-browser resize element plugin\n    // :: Taken from ResizeSensor.js file from marcj/css-element-queries (MIT license)\n    // :: not all jQuerifided\n    // -----------------------------------------------------------------------\n    $.fn.resizer = function(callback) {\n        var unbind = arguments[0] === \"unbind\";\n        if (!unbind && !$.isFunction(callback)) {\n            throw new Error(\n                'Invalid argument, it need to a function of string \"unbind\".'\n            );\n        }\n        return this.each(function() {\n            var $this = $(this);\n            if (unbind) {\n                $(this).removeData('callbacks').find('.resizer').remove();\n            } else if ($this.data('callbacks')) {\n                $(this).data('callbacks').push(callback);\n            } else {\n                $this.data('callbacks', [callback]);\n                var self = this;\n                var resizer = $('<div/>').addClass('resizer').appendTo(this)[0];\n                var style =\n                    'position: absolute; left: 0; top: 0; right: 0; bottom: 0; ' +\n                    'overflow: hidden; z-index: -1; visibility: hidden;';\n                var styleChild = 'position: absolute; left: 0; top: 0; transition: 0s;';\n                resizer.style.cssText = style;\n                resizer.innerHTML =\n                    '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' +\n                    '<div style=\"' + styleChild + '\"></div>' + \"</div>\" +\n                    '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' +\n                    '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' +\n                    \"</div>\";\n\n                var expand = resizer.childNodes[0];\n                var expandChild = expand.childNodes[0];\n                var shrink = resizer.childNodes[1];\n                var dirty, rafId, newWidth, newHeight;\n                var lastWidth = self.offsetWidth;\n                var lastHeight = self.offsetHeight;\n\n                var reset = function() {\n                    expandChild.style.width = '100000px';\n                    expandChild.style.height = '100000px';\n\n                    expand.scrollLeft = 100000;\n                    expand.scrollTop = 100000;\n\n                    shrink.scrollLeft = 100000;\n                    shrink.scrollTop = 100000;\n                };\n\n                reset();\n\n                var onResized = function() {\n                    rafId = 0;\n\n                    if (!dirty) {\n                        return;\n                    }\n\n                    lastWidth = newWidth;\n                    lastHeight = newHeight;\n                    var callbacks = $this.data('callbacks');\n                    if (callbacks && callbacks.length) {\n                        callbacks.forEach(function(fn) {\n                            fn();\n                        });\n                    }\n                };\n\n                var onScroll = function() {\n                    newWidth = self.offsetWidth;\n                    newHeight = self.offsetHeight;\n                    dirty = newWidth !== lastWidth || newHeight !== lastHeight;\n\n                    if (dirty && !rafId) {\n                        rafId = requestAnimationFrame(onResized);\n                    }\n\n                    reset();\n                };\n                $(expand).on(\"scroll\", onScroll);\n                $(shrink).on(\"scroll\", onScroll);\n            }\n        });\n    };\n    // -----------------------------------------------------------------------\n    // :: hide elements from screen readers\n    // -----------------------------------------------------------------------\n    function a11y_hide(element) {\n        element.attr({\n            role: 'presentation',\n            'aria-hidden': 'true'\n        });\n    }\n    // -----------------------------------------------------------------------\n    // :: Split string to array of strings with the same length\n    // -----------------------------------------------------------------------\n    function str_parts(str, length) {\n        var result = [];\n        var len = str.length;\n        if (len < length) {\n            return [str];\n        } else if (length < 0) {\n            throw new Error(\"str_parts: length can't be negative\");\n        }\n        for (var i = 0; i < len; i += length) {\n            result.push(str.substring(i, i + length));\n        }\n        return result;\n    }\n    // -----------------------------------------------------------------------\n    // :: CYCLE DATA STRUCTURE\n    // -----------------------------------------------------------------------\n    function Cycle(init) {\n        var data = init ? [init] : [];\n        var pos = 0;\n        $.extend(this, {\n            get: function() {\n                return data;\n            },\n            rotate: function() {\n                if (!data.filter(Boolean).length) {\n                    return;\n                }\n                if (data.length === 1) {\n                    return data[0];\n                } else {\n                    if (pos === data.length - 1) {\n                        pos = 0;\n                    } else {\n                        ++pos;\n                    }\n                    if (data[pos]) {\n                        return data[pos];\n                    } else {\n                        return this.rotate();\n                    }\n                }\n            },\n            length: function() {\n                return data.length;\n            },\n            remove: function(index) {\n                delete data[index];\n            },\n            set: function(item) {\n                for (var i = data.length; i--;) {\n                    if (data[i] === item) {\n                        pos = i;\n                        return;\n                    }\n                }\n                this.append(item);\n            },\n            front: function() {\n                if (data.length) {\n                    var index = pos;\n                    var restart = false;\n                    while (!data[index]) {\n                        index++;\n                        if (index > data.length) {\n                            if (restart) {\n                                break;\n                            }\n                            index = 0;\n                            restart = true;\n                        }\n                    }\n                    return data[index];\n                }\n            },\n            map: function(fn) {\n                return data.filter(Boolean).map(fn);\n            },\n            forEach: function(fn) {\n                data.filter(Boolean).forEach(fn);\n            },\n            append: function(item) {\n                data.push(item);\n            }\n        });\n    }\n    // -----------------------------------------------------------------------\n    // :: STACK DATA STRUCTURE\n    // -----------------------------------------------------------------------\n    function Stack(init) {\n        var data = init instanceof Array ? init : init ? [init] : [];\n        $.extend(this, {\n            data: function() {\n                return data;\n            },\n            map: function(fn) {\n                return $.map(data, fn);\n            },\n            size: function() {\n                return data.length;\n            },\n            pop: function() {\n                if (data.length === 0) {\n                    return null;\n                } else {\n                    var value = data[data.length - 1];\n                    data = data.slice(0, data.length - 1);\n                    return value;\n                }\n            },\n            push: function(value) {\n                data = data.concat([value]);\n                return value;\n            },\n            top: function() {\n                return data.length > 0 ? data[data.length - 1] : null;\n            },\n            clone: function() {\n                return new Stack(data.slice(0));\n            }\n        });\n    }\n    // -------------------------------------------------------------------------\n    // :: HISTORY CLASS\n    // -------------------------------------------------------------------------\n    function History(name, size, memory) {\n        var enabled = true;\n        var storage_key = '';\n        if (typeof name === 'string' && name !== '') {\n            storage_key = name + '_';\n        }\n        storage_key += 'commands';\n        var data;\n        if (memory) {\n            data = [];\n        } else {\n            data = $.Storage.get(storage_key);\n            data = data ? JSON.parse(data) : [];\n        }\n        var pos = data.length - 1;\n        $.extend(this, {\n            append: function(item) {\n                if (enabled) {\n                    if (data[data.length - 1] !== item) {\n                        data.push(item);\n                        if (size && data.length > size) {\n                            data = data.slice(-size);\n                        }\n                        pos = data.length - 1;\n                        if (!memory) {\n                            $.Storage.set(storage_key, JSON.stringify(data));\n                        }\n                    }\n                }\n            },\n            set: function(new_data) {\n                if (new_data instanceof Array) {\n                    data = new_data;\n                    if (!memory) {\n                        $.Storage.set(storage_key, JSON.stringify(data));\n                    }\n                }\n            },\n            data: function() {\n                return data;\n            },\n            reset: function() {\n                pos = data.length - 1;\n            },\n            last: function() {\n                return data[data.length - 1];\n            },\n            end: function() {\n                return pos === data.length - 1;\n            },\n            position: function() {\n                return pos;\n            },\n            current: function() {\n                return data[pos];\n            },\n            next: function() {\n                if (pos < data.length - 1) {\n                    ++pos;\n                }\n                if (pos !== -1) {\n                    return data[pos];\n                }\n            },\n            previous: function() {\n                var old = pos;\n                if (pos > 0) {\n                    --pos;\n                }\n                if (old !== -1) {\n                    return data[pos];\n                }\n            },\n            clear: function() {\n                data = [];\n                this.purge();\n            },\n            enabled: function() {\n                return enabled;\n            },\n            enable: function() {\n                enabled = true;\n            },\n            purge: function() {\n                if (!memory) {\n                    $.Storage.remove(storage_key);\n                }\n            },\n            disable: function() {\n                enabled = false;\n            }\n        });\n    }\n    // -------------------------------------------------------------------------\n    // :: COMMAND LINE PLUGIN\n    // -------------------------------------------------------------------------\n    var cmd_index = 0;\n    $.fn.cmd = function(options) {\n        var self = this;\n        var maybe_data = self.data('cmd');\n        if (maybe_data) {\n            return maybe_data;\n        }\n        var id = cmd_index++;\n        self.addClass('cmd');\n        self.append('<span class=\"prompt\"></span><span></span>' +\n                    '<span class=\"cursor\">&nbsp;</span><span></span>');\n        // a11y: don't read command it's in textarea that's in focus\n        a11y_hide(self.find('span').not(':eq(0)'));\n        // on mobile the only way to hide textarea on desktop it's needed because\n        // textarea show up after focus\n        //self.append('<span class=\"mask\"></mask>');\n        var clip = $('<textarea>').attr({\n            autocapitalize: 'off',\n            spellcheck: 'false',\n            tabindex: 1\n        }).addClass('clipboard').appendTo(self);\n        // we don't need this but leave it as a comment just in case\n        //var contentEditable = $('<div contentEditable></div>')\n        //$(document.body).append(contentEditable);\n        if (options.width) {\n            self.width(options.width);\n        }\n        var num_chars; // calculated by draw_prompt\n        var prompt_len;\n        var prompt_node = self.find('.prompt');\n        var reverse_search = false;\n        var rev_search_str = '';\n        var reverse_search_position = null;\n        var backup_prompt;\n        var mask = options.mask || false;\n        var command = '';\n        var last_command;\n        // text from selection using CTRL+SHIFT+C (as in Xterm)\n        var kill_text = ''; // text from command that kill part of the command\n        var position = 0;\n        var prompt;\n        var enabled;\n        var historySize = options.historySize || 60;\n        var name, history;\n        var cursor = self.find('.cursor');\n        var animation;\n        var paste_count = 0;\n        function get_char_size() {\n            var span = $('<span>&nbsp;</span>').appendTo(self);\n            var rect = span[0].getBoundingClientRect();\n            span.remove();\n            return rect;\n        }\n        function get_char_pos(point) {\n            var prompt_len = self.find('.prompt').text().length;\n            var size = get_char_size();\n            var width = size.width;\n            var height = size.height;\n            var offset = self.offset();\n            var col = Math.floor((point.x - offset.left) / width);\n            var row = Math.floor((point.y - offset.top) / height);\n            var lines = get_splited_command_line(command);\n            var try_pos;\n            if (row > 0 && lines.length > 1) {\n                try_pos = col + lines.slice(0, row).reduce(function(sum, line) {\n                    return sum + line.length;\n                }, 0);\n            } else {\n                try_pos = col - prompt_len;\n            }\n            // tabs are 4 spaces and newline don't show up in results\n            var text = command.replace(/\\t/g, '\\x00\\x00\\x00\\x00').replace(/\\n/, '');\n            var before = text.slice(0, try_pos);\n            var len = before.replace(/\\x00{4}/g, '\\t').replace(/\\x00+/, '').length;\n            return len > command.length ? command.length : len;\n        }\n        function get_key(e) {\n            if (e.key) {\n                var key = e.key.toUpperCase();\n                if (key === 'CONTROL') {\n                    return 'CTRL';\n                } else {\n                    var combo = [];\n                    if (e.ctrlKey) {\n                        combo.push('CTRL');\n                    }\n                    if (e.metaKey && key !== 'META') {\n                        combo.push('META');\n                    }\n                    if (e.shiftKey && key !== 'SHIFT') {\n                        combo.push('SHIFT');\n                    }\n                    if (e.altKey && key !== 'ALT') {\n                        combo.push('ALT');\n                    }\n                    if (e.key) {\n                        if (key === 'DEL') { // IE11\n                            combo.push('DELETE');\n                        } else {\n                            combo.push(key);\n                        }\n                    }\n                    return combo.join('+');\n                }\n            }\n        }\n        var keymap;\n        var default_keymap = {\n            'ALT+D': function() {\n                self.set(command.slice(0, position) +\n                         command.slice(position).\n                         replace(/ *[^ ]+ *(?= )|[^ ]+$/, ''), true);\n                // chrome jump to address bar\n                return false;\n            },\n            'ENTER': function() {\n                if (history && command && !mask &&\n                    ($.isFunction(options.historyFilter) &&\n                     options.historyFilter(command)) ||\n                    (options.historyFilter instanceof RegExp &&\n                     command.match(options.historyFilter)) ||\n                    !options.historyFilter) {\n                    history.append(command);\n                }\n                var tmp = command;\n                history.reset();\n                self.set('');\n                if (options.commands) {\n                    options.commands(tmp);\n                }\n                if ($.isFunction(prompt)) {\n                    draw_prompt();\n                }\n                $('.clipboard').val('');\n                return true;\n            },\n            'SHIFT+ENTER': function() {\n                self.insert('\\n');\n                return false;\n            },\n            'BACKSPACE': function() {\n                if (reverse_search) {\n                    rev_search_str = rev_search_str.slice(0, -1);\n                    draw_reverse_prompt();\n                } else if (command !== '' && position > 0) {\n                    self['delete'](-1);\n                }\n                return false;\n                //return is_touch;\n            },\n            'TAB': function() {\n                self.insert('\\t');\n            },\n            'CTRL+D': function() {\n                self['delete'](1);\n                return false;\n            },\n            'DELETE': function() {\n                self['delete'](1);\n                return true;\n            },\n            'ARROWUP': prev_history,\n            'UP': prev_history, // IE\n            'CTRL+P': prev_history,\n            'ARROWDOWN': next_history,\n            'DOWN': next_history, // IE\n            'CTRL+N': next_history,\n            'ARROWLEFT': left,\n            'LEFT': left, // IE\n            'CTRL+B': left,\n            'CTRL+ARROWLEFT': function() {\n                // jump to one character after last space before prevoius word\n                var len = position - 1;\n                var pos = 0;\n                if (command[len] === ' ') {\n                    --len;\n                }\n                for (var i = len; i > 0; --i) {\n                    if (command[i] === ' ' && command[i + 1] !== ' ') {\n                        pos = i + 1;\n                        break;\n                    } else if (command[i] === '\\n' &&\n                               command[i + 1] !== '\\n') {\n                        pos = i;\n                        break;\n                    }\n                }\n                self.position(pos);\n            },\n            'CTRL+R': function() {\n                if (reverse_search) {\n                    reverse_history_search(true);\n                } else {\n                    backup_prompt = prompt;\n                    draw_reverse_prompt();\n                    last_command = command;\n                    self.set('');\n                    redraw();\n                    reverse_search = true;\n                }\n                return false;\n            },\n            'CTRL+G': function() {\n                if (reverse_search) {\n                    prompt = backup_prompt;\n                    draw_prompt();\n                    self.set(last_command);\n                    redraw();\n                    reverse_search = false;\n                    rev_search_str = '';\n                    return false;\n                }\n            },\n            'ARROWRIGHT': right,\n            'CTRL+F': right,\n            'RIGHT': right, // IE\n            'CTRL+ARROWRIGHT': function() {\n                // jump to beginning or end of the word\n                if (command[position] === ' ') {\n                    ++position;\n                }\n                var re = /\\S[\\n\\s]{2,}|[\\n\\s]+\\S?/;\n                var match = command.slice(position).match(re);\n                if (!match || match[0].match(/^\\s+$/)) {\n                    self.position(command.length);\n                } else if (match[0][0] !== ' ') {\n                    position += match.index + 1;\n                } else {\n                    position += match.index + match[0].length - 1;\n                    if (match[0][match[0].length - 1] !== ' ') {\n                        --position;\n                    }\n                }\n                redraw();\n            },\n            'F12': return_true, // Allow Firebug\n            'END': end,\n            'CTRL+E': end,\n            'HOME': home,\n            'CTRL+A': home,\n            'SHIFT+INSERT': paste_event,\n            'CTRL+SHIFT+T': return_true, // open closed tab\n            'CTRL+W': function() {\n                // don't work in Chromium (can't prevent close tab)\n                if (command !== '' && position !== 0) {\n                    var m = command.slice(0, position).match(/([^ ]+ *$)/);\n                    if (m[0].length) {\n                        kill_text = self['delete'](-m[0].length);\n                        text_to_clipboard(self, kill_text);\n                    }\n                }\n                return false;\n            },\n            'CTRL+H': function() {\n                if (command !== '' && position > 0) {\n                    self['delete'](-1);\n                }\n                return false;\n            },\n            'CTRL+X': return_true,\n            'CTRL+C': return_true,\n            'CTRL+T': return_true,\n            'CTRL+Y': function() {\n                if (kill_text !== '') {\n                    self.insert(kill_text);\n                }\n            },\n            'CTRL+V': paste_event,\n            'META+V': paste_event,\n            'CTRL+K': function() {\n                if (command.length - position) {\n                    kill_text = self['delete'](command.length - position);\n                    text_to_clipboard(self, kill_text);\n                }\n                return false;\n            },\n            'CTRL+U': function() {\n                if (command !== '' && position !== 0) {\n                    kill_text = self['delete'](-position);\n                    text_to_clipboard(self, kill_text);\n                }\n                return false;\n            },\n            'CTRL+TAB': function() {\n                return false;\n            },\n            'META+`': return_true, // CMD+` switch browser window on Mac\n            'META+R': return_true, // CMD+R page reload in Chrome Mac\n            'META+L': return_true  // CLD+L jump into Ominbox on Chrome Mac\n        };\n        function return_true() {\n            return true;\n        }\n        function paste_event() {\n            clip.val('');\n            paste_count = 0;\n            clip.focus();\n            clip.on('input', function input(e) {\n                paste(e);\n                clip.off('input', input);\n            });\n            return true;\n        }\n        function prev_history() {\n            if (first_up_history) {\n                last_command = command;\n                self.set(history.current());\n            } else {\n                self.set(history.previous());\n            }\n            first_up_history = false;\n            return false;\n        }\n        function next_history() {\n            self.set(history.end() ? last_command : history.next());\n            return false;\n        }\n        function left() {\n            if (position > 0) {\n                self.position(-1, true);\n                redraw();\n            }\n        }\n        function right() {\n            if (position < command.length) {\n                self.position(1, true);\n            }\n            return false;\n        }\n        function home() {\n            self.position(0);\n        }\n        function end() {\n            self.position(command.length);\n        }\n        function mobile_focus() {\n            //if (is_touch) {\n            var focus = clip.is(':focus');\n            if (enabled) {\n                if (!focus) {\n                    clip.trigger('focus', [true]);\n                    self.oneTime(10, function() {\n                        clip.trigger('focus', [true]);\n                    });\n                }\n            } else if (focus) {\n                clip.blur();\n            }\n        }\n        // on mobile you can't delete character if input is empty (event\n        // will not fire) so we fake text entry, we could just put dummy\n        // data but we put real command and position\n        function fix_textarea() {\n            // delay worked while experimenting\n            self.oneTime(10, function() {\n                clip.val(command);\n                if (enabled) {\n                    self.oneTime(10, function() {\n                        try {\n                            clip.caret(position);\n                        } catch (e) {\n                            // firefox throw NS_ERROR_FAILURE ignore\n                        }\n                    });\n                }\n            });\n        }\n        // terminal animation don't work on andorid because they animate\n        // 2 properties\n        if (support_animations && !is_android) {\n            animation = function(toggle) {\n                if (toggle) {\n                    cursor.addClass('blink');\n                } else {\n                    cursor.removeClass('blink');\n                }\n            };\n        } else {\n            var animating = false;\n            animation = function(toggle) {\n                if (toggle && !animating) {\n                    animating = true;\n                    cursor.addClass('inverted blink');\n                    self.everyTime(500, 'blink', blink);\n                } else if (animating && !toggle) {\n                    animating = false;\n                    self.stopTime('blink', blink);\n                    cursor.removeClass('inverted blink');\n                }\n            };\n        }\n        // ---------------------------------------------------------------------\n        // :: Blinking cursor function\n        // ---------------------------------------------------------------------\n        function blink() {\n            cursor.toggleClass('inverted');\n        }\n        // ---------------------------------------------------------------------\n        // :: Set prompt for reverse search\n        // ---------------------------------------------------------------------\n        function draw_reverse_prompt() {\n            prompt = '(reverse-i-search)`' + rev_search_str + \"': \";\n            draw_prompt();\n        }\n        // ---------------------------------------------------------------------\n        // :: Disable reverse search\n        // ---------------------------------------------------------------------\n        function clear_reverse_state() {\n            prompt = backup_prompt;\n            reverse_search = false;\n            reverse_search_position = null;\n            rev_search_str = '';\n        }\n        // ---------------------------------------------------------------------\n        // :: Search through command line history. If next is not defined or\n        // :: false it searches for the first item from the end. If true it\n        // :: search for the next item\n        // ---------------------------------------------------------------------\n        function reverse_history_search(next) {\n            var history_data = history.data();\n            var regex, save_string;\n            var len = history_data.length;\n            if (next && reverse_search_position > 0) {\n                len -= reverse_search_position;\n            }\n            if (rev_search_str.length > 0) {\n                for (var j = rev_search_str.length; j > 0; j--) {\n                    save_string = $.terminal.escape_regex(rev_search_str.substring(0, j));\n                    regex = new RegExp(save_string);\n                    for (var i = len; i--;) {\n                        if (regex.test(history_data[i])) {\n                            reverse_search_position = history_data.length - i;\n                            self.position(history_data[i].indexOf(save_string));\n                            self.set(history_data[i], true);\n                            redraw();\n                            if (rev_search_str.length !== j) {\n                                rev_search_str = rev_search_str.substring(0, j);\n                                draw_reverse_prompt();\n                            }\n                            return;\n                        }\n                    }\n                }\n            }\n            rev_search_str = ''; // clear if not found any\n        }\n        // ---------------------------------------------------------------------\n        // :: Recalculate number of characters in command line\n        // ---------------------------------------------------------------------\n        function change_num_chars() {\n            var $prompt = self.find('.prompt').text('&nbsp;');\n            var W = self.width();\n            var w = $prompt[0].getBoundingClientRect().width;\n            num_chars = Math.floor(W / w);\n            draw_prompt();\n        }\n        // ---------------------------------------------------------------------\n        // :: Split String that fit into command line where first line need to\n        // :: fit next to prompt (need to have less characters)\n        // ---------------------------------------------------------------------\n        function get_splited_command_line(string) {\n            var array;\n            // command contains new line characters\n            if (string.match(/\\n/)) {\n                var tmp = string.split('\\n');\n                var first_len = num_chars - prompt_len - 1;\n                // empty character after each line\n                for (var i = 0; i < tmp.length - 1; ++i) {\n                    tmp[i] += ' ';\n                }\n                // split first line\n                if (tmp[0].length > first_len) {\n                    array = [tmp[0].substring(0, first_len)];\n                    var str = tmp[0].substring(first_len);\n                    array = array.concat(str_parts(str, num_chars));\n                } else {\n                    array = [tmp[0]];\n                }\n                // process rest of the lines\n                for (i = 1; i < tmp.length; ++i) {\n                    if (tmp[i].length > num_chars) {\n                        array = array.concat(str_parts(tmp[i], num_chars));\n                    } else {\n                        array.push(tmp[i]);\n                    }\n                }\n            } else {\n                var first = string.substring(0, num_chars - prompt_len);\n                var rest = string.substring(num_chars - prompt_len);\n                array = [first].concat(str_parts(rest, num_chars));\n            }\n            return array;\n        }\n        // ---------------------------------------------------------------------\n        // :: format end encode the string\n        // ---------------------------------------------------------------------\n        function format(string) {\n            // we don't want to format command when user type formatting in\n            string = $.terminal.escape_formatting(string);\n            var formatters = $.terminal.defaults.formatters;\n            for (var i = 0; i < formatters.length; ++i) {\n                try {\n                    if (typeof formatters[i] === 'function') {\n                        var ret = formatters[i](string);\n                        if (typeof ret === 'string') {\n                            string = ret;\n                        }\n                    }\n                } catch (e) {\n                    alert('formatting error at formatters[' + i + ']\\n' +\n                          (e.stack ? e.stack : e));\n                }\n            }\n            return $.terminal.format($.terminal.encode(string));\n        }\n        // ---------------------------------------------------------------------\n        // :: Function that displays the command line. Split long lines and\n        // :: place cursor in the right place\n        // ---------------------------------------------------------------------\n        var redraw = (function() {\n            var before = cursor.prev();\n            var after = cursor.next();\n            // -----------------------------------------------------------------\n            // :: Draw line with the cursor\n            // -----------------------------------------------------------------\n            function draw_cursor_line(string, position) {\n                var len = string.length;\n                if (position === len) {\n                    before.html(format(string));\n                    cursor.html('&nbsp;');\n                    after.html('');\n                } else if (position === 0) {\n                    before.html('');\n                    //fix for tilda in IE\n                    cursor.html(format(string.slice(0, 1)));\n                    //cursor.html(format(string[0]));\n                    after.html(format(string.slice(1)));\n                } else {\n                    var before_str = string.slice(0, position);\n                    before.html(format(before_str));\n                    //fix for tilda in IE\n                    var c = string.slice(position, position + 1);\n                    //cursor.html(string[position]);\n                    cursor.html(format(c));\n                    if (position === string.length - 1) {\n                        after.html('');\n                    } else {\n                        after.html(format(string.slice(position + 1)));\n                    }\n                }\n            }\n            function div(string) {\n                return '<div>' + format(string) + '</div>';\n            }\n            // -----------------------------------------------------------------\n            // :: Display lines after the cursor\n            // -----------------------------------------------------------------\n            function lines_after(lines) {\n                var last_ins = after;\n                $.each(lines, function(i, line) {\n                    last_ins = $(div(line)).insertAfter(last_ins);\n                });\n            }\n            // -----------------------------------------------------------------\n            // :: Display lines before the cursor\n            // -----------------------------------------------------------------\n            function lines_before(lines) {\n                $.each(lines, function(i, line) {\n                    before.before(div(line));\n                });\n            }\n            // -----------------------------------------------------------------\n            // :: Redraw function\n            // -----------------------------------------------------------------\n            return function() {\n                var string;\n                switch (typeof mask) {\n                    case 'boolean':\n                        string = mask ? command.replace(/./g, '*') : command;\n                        break;\n                    case 'string':\n                        string = command.replace(/./g, mask);\n                        break;\n                }\n                var i;\n                self.find('div').remove();\n                before.html('');\n                // long line\n                if (string.length > num_chars - prompt_len - 1 ||\n                    string.match(/\\n/)) {\n                    var tabs = string.match(/\\t/g);\n                    var tabs_rm = tabs ? tabs.length * 3 : 0;\n                    //quick tabulation hack\n                    if (tabs) {\n                        string = string.replace(/\\t/g, '\\x00\\x00\\x00\\x00');\n                    }\n                    var array = get_splited_command_line(string);\n                    if (tabs) {\n                        array = $.map(array, function(line) {\n                            return line.replace(/\\x00\\x00\\x00\\x00/g, '\\t');\n                        });\n                    }\n                    var first_len = array[0].length;\n                    //cursor in first line\n                    if (first_len === 0 && array.length === 1) {\n                        // skip empty line\n                    } else if (position < first_len) {\n                        draw_cursor_line(array[0], position);\n                        lines_after(array.slice(1));\n                    } else if (position === first_len) {\n                        before.before(div(array[0]));\n                        draw_cursor_line(array[1] || '', 0);\n                        if (array.length > 1) {\n                            lines_after(array.slice(2));\n                        }\n                    } else {\n                        var num_lines = array.length;\n                        if (position < first_len) {\n                            draw_cursor_line(array[0], position);\n                            lines_after(array.slice(1));\n                        } else if (position === first_len) {\n                            before.before(div(array[0]));\n                            draw_cursor_line(array[1], 0);\n                            lines_after(array.slice(2));\n                        } else {\n                            var last = array.slice(-1)[0];\n                            var from_last = string.length - position - tabs_rm;\n                            var last_len = last.length;\n                            var pos = 0;\n                            if (from_last <= last_len) { // in last line\n                                lines_before(array.slice(0, -1));\n                                if (last_len === from_last) {\n                                    pos = 0;\n                                } else {\n                                    pos = last_len - from_last;\n                                }\n                                draw_cursor_line(last, pos);\n                            } else if (num_lines === 3) { // in the middle\n                                var str = format(array[0]);\n                                before.before('<div>' + str + '</div>');\n                                draw_cursor_line(array[1], position - first_len - 1);\n                                str = format(array[2]);\n                                after.after('<div>' + str + '</div>');\n                            } else {\n                                // more lines, cursor in the middle\n                                var line_index;\n                                var current;\n                                pos = position;\n                                for (i = 0; i < array.length; ++i) {\n                                    var current_len = array[i].length;\n                                    if (pos > current_len) {\n                                        pos -= current_len;\n                                    } else {\n                                        break;\n                                    }\n                                }\n                                current = array[i];\n                                line_index = i;\n                                // cursor on first character in line\n                                if (pos === current.length) {\n                                    pos = 0;\n                                    current = array[++line_index];\n                                    if (current === undefined) {\n                                        //should never happen\n                                        var msg = $.terminal.defaults.strings.redrawError;\n                                        throw new Error(msg);\n                                    }\n                                }\n                                draw_cursor_line(current, pos);\n                                lines_before(array.slice(0, line_index));\n                                lines_after(array.slice(line_index + 1));\n                            }\n                        }\n                    }\n                } else if (string === '') {\n                    before.html('');\n                    cursor.html('&nbsp;');\n                    after.html('');\n                } else {\n                    draw_cursor_line(string, position);\n                }\n            };\n        })();\n        // ---------------------------------------------------------------------\n        // :: Draw prompt that can be a function or a string\n        // ---------------------------------------------------------------------\n        var draw_prompt = (function() {\n            function set(prompt) {\n                prompt_node.html($.terminal.format($.terminal.encode(prompt)));\n                prompt_len = prompt_node.text().length;\n            }\n            return function() {\n                switch (typeof prompt) {\n                    case 'string':\n                        set(prompt);\n                        break;\n                    case 'function':\n                        prompt(set);\n                        break;\n                }\n            };\n        })();\n        // ---------------------------------------------------------------------\n        // :: Paste content to terminal using hidden textarea\n        // ---------------------------------------------------------------------\n        function paste() {\n            if (paste_count++ > 0) {\n                return;\n            }\n            if (self.isenabled()) {\n                var clip = self.find('textarea');\n                if (!clip.is(':focus')) {\n                    clip.focus();\n                }\n                //wait until Browser insert text to textarea\n                self.oneTime(100, function() {\n                    self.insert(clip.val());\n                    clip.val('');\n                    fix_textarea();\n                });\n            }\n        }\n        function fire_change_command() {\n            if ($.isFunction(options.onCommandChange)) {\n                options.onCommandChange(command);\n            }\n        }\n        // ---------------------------------------------------------------------\n        // :: Command Line Methods\n        // ---------------------------------------------------------------------\n        $.extend(self, {\n            name: function(string) {\n                if (string !== undefined) {\n                    name = string;\n                    var enabled = history && history.enabled() || !history;\n                    history = new History(\n                        string,\n                        historySize,\n                        options.history === 'memory'\n                    );\n                    // disable new history if old was disabled\n                    if (!enabled) {\n                        history.disable();\n                    }\n                    return self;\n                } else {\n                    return name;\n                }\n            },\n            purge: function() {\n                history.clear();\n                return self;\n            },\n            history: function() {\n                return history;\n            },\n            'delete': function(n, stay) {\n                var removed;\n                if (n === 0) {\n                    return self;\n                } else if (n < 0) {\n                    if (position > 0) {\n                        // this may look weird but if n is negative we need\n                        // to use +\n                        removed = command.slice(0, position).slice(n);\n                        command = command.slice(0, position + n) +\n                            command.slice(position, command.length);\n                        if (!stay) {\n                            self.position(position + n);\n                        }\n                        fire_change_command();\n                    }\n                } else if (command !== '' && position < command.length) {\n                    removed = command.slice(position).slice(0, n);\n                    command = command.slice(0, position) +\n                        command.slice(position + n, command.length);\n                    fire_change_command();\n                }\n                redraw();\n                fix_textarea();\n                return removed;\n            },\n            set: function(string, stay) {\n                if (string !== undefined) {\n                    command = string;\n                    if (!stay) {\n                        self.position(command.length);\n                    }\n                    redraw();\n                    fix_textarea();\n                    fire_change_command();\n                }\n                return self;\n            },\n            keymap: function(new_keymap) {\n                if (typeof new_keymap === 'undefined') {\n                    return keymap;\n                } else {\n                    keymap = $.extend(\n                        {},\n                        default_keymap,\n                        $.omap(new_keymap || {}, function(key, fn) {\n                            return function(e) {\n                                // new keymap function will get default as 2nd argument\n                                return fn(e, default_keymap[key]);\n                            };\n                        })\n                    );\n                    return self;\n                }\n            },\n            insert: function(string, stay) {\n                if (position === command.length) {\n                    command += string;\n                } else if (position === 0) {\n                    command = string + command;\n                } else {\n                    command = command.slice(0, position) +\n                        string + command.slice(position);\n                }\n                if (!stay) {\n                    self.position(string.length, true);\n                } else {\n                    fix_textarea();\n                }\n                redraw();\n                fire_change_command();\n                return self;\n            },\n            get: function() {\n                return command;\n            },\n            commands: function(commands) {\n                if (commands) {\n                    options.commands = commands;\n                    return self;\n                } else {\n                    return commands;\n                }\n            },\n            destroy: function() {\n                doc.unbind('keypress.cmd', keypress_event);\n                doc.unbind('keydown.cmd', keydown_event);\n                doc.unbind('input.cmd', input);\n                self.stopTime('blink', blink);\n                self.find('.cursor').next().remove().end().prev().remove().\n                    end().remove();\n                self.find('.prompt, .clipboard').remove();\n                self.removeClass('cmd').removeData('cmd').off('.cmd');\n                return self;\n            },\n            prompt: function(user_prompt) {\n                if (user_prompt === undefined) {\n                    return prompt;\n                } else {\n                    if (typeof user_prompt === 'string' ||\n                        typeof user_prompt === 'function') {\n                        prompt = user_prompt;\n                    } else {\n                        throw new Error('prompt must be a function or string');\n                    }\n                    draw_prompt();\n                    // we could check if command is longer then numchars-new\n                    // prompt\n                    redraw();\n                    return self;\n                }\n            },\n            kill_text: function() {\n                return kill_text;\n            },\n            position: function(n, relative) {\n                if (typeof n === 'number') {\n                    // if (position !== n) { this don't work, don't know why\n                    if (relative) {\n                        position += n;\n                    } else if (n < 0) {\n                        position = 0;\n                    } else if (n > command.length) {\n                        position = command.length;\n                    } else {\n                        position = n;\n                    }\n                    if ($.isFunction(options.onPositionChange)) {\n                        options.onPositionChange(position);\n                    }\n                    redraw();\n                    fix_textarea();\n                    return self;\n                } else {\n                    return position;\n                }\n            },\n            visible: (function() {\n                var visible = self.visible;\n                return function() {\n                    visible.apply(self, []);\n                    redraw();\n                    draw_prompt();\n                };\n            })(),\n            show: (function() {\n                var show = self.show;\n                return function() {\n                    show.apply(self, []);\n                    redraw();\n                    draw_prompt();\n                };\n            })(),\n            resize: function(num) {\n                if (num) {\n                    num_chars = num;\n                } else {\n                    change_num_chars();\n                }\n                redraw();\n                return self;\n            },\n            enable: function() {\n                enabled = true;\n                self.addClass('enabled');\n                try {\n                    clip.caret(position);\n                } catch (e) {\n                    // firefox throw NS_ERROR_FAILURE ignore\n                }\n                animation(true);\n                mobile_focus();\n                return self;\n            },\n            isenabled: function() {\n                return enabled;\n            },\n            disable: function() {\n                enabled = false;\n                self.removeClass('enabled');\n                animation(false);\n                mobile_focus();\n                return self;\n            },\n            mask: function(new_mask) {\n                if (typeof new_mask === 'undefined') {\n                    return mask;\n                } else {\n                    mask = new_mask;\n                    redraw();\n                    return self;\n                }\n            }\n        });\n        // ---------------------------------------------------------------------\n        // :: INIT\n        // ---------------------------------------------------------------------\n        self.name(options.name || options.prompt || '');\n        if (typeof options.prompt === 'string') {\n            prompt = options.prompt;\n        } else {\n            prompt = '> ';\n        }\n        draw_prompt();\n        if (options.enabled === undefined || options.enabled === true) {\n            self.enable();\n        }\n        if (!options.history) {\n            history.disable();\n        }\n        var first_up_history = true;\n        // prevent_keypress - hack for Android that was inserting characters on\n        // backspace\n        var prevent_keypress = false;\n        var dead_key = false;\n        var single_key = false;\n        var no_keypress = false;\n        var no_key = false;\n        var backspace = false;\n        var skip_insert;\n        // we hold text before keydown to fix backspace for Android/Chrome/SwiftKey\n        // keyboard that generate keycode 229 for all keys #296\n        var text;\n        // ---------------------------------------------------------------------\n        // :: Keydown Event Handler\n        // ---------------------------------------------------------------------\n        function keydown_event(e) {\n            var result;\n            dead_key = no_keypress && single_key;\n            // special keys don't trigger keypress fix #293\n            try {\n                single_key = e.key && e.key.length === 1;\n                // chrome on android support key property but it's \"Unidentified\"\n                no_key = String(e.key).toLowerCase() === 'unidentified';\n                backspace = e.key.toUpperCase() === 'BACKSPACE' || e.which === 8;\n            } catch (exception) {}\n            text = clip.val();\n            no_keypress = true;\n            var key = get_key(e);\n            if ($.isFunction(options.keydown)) {\n                result = options.keydown(e);\n                if (result !== undefined) {\n                    //prevent_keypress = true;\n                    return result;\n                }\n            }\n            if (enabled) {\n                // CTRL+V don't fire keypress in IE11\n                skip_insert = ['CTRL+V', 'META+V'].indexOf(key) !== -1;\n                if (e.which !== 38 && !(e.which === 80 && e.ctrlKey)) {\n                    first_up_history = true;\n                }\n                // arrows / Home / End / ENTER\n                if (reverse_search && (e.which === 35 || e.which === 36 ||\n                                       e.which === 37 || e.which === 38 ||\n                                       e.which === 39 || e.which === 40 ||\n                                       e.which === 13 || e.which === 27)) {\n                    clear_reverse_state();\n                    draw_prompt();\n                    if (e.which === 27) { // ESC\n                        self.set('');\n                    }\n                    redraw();\n                    // finish reverse search and execute normal event handler\n                    /* jshint validthis:true */\n                    keydown_event.call(this, e);\n                } else if ($.isFunction(keymap[key])) {\n                    result = keymap[key]();\n                    if (result === true) {\n                        return;\n                    }\n                    if (result !== undefined) {\n                        return result;\n                    }\n                } else if (e.altKey) {\n                    return;\n                } else {\n                    prevent_keypress = false;\n                    return;\n                }\n                // this will prevent for instance backspace to go back one page\n                //prevent_keypress = true;\n                e.preventDefault();\n            }\n        }\n        var doc = $(document.documentElement || window);\n        self.keymap(options.keymap);\n        function keypress_event(e) {\n            var result;\n            no_keypress = false;\n            if ((e.ctrlKey || e.metaKey) && [99, 118, 86].indexOf(e.which) !== -1) {\n                // CTRL+C or CTRL+V\n                return;\n            }\n            if (prevent_keypress) {\n                return;\n            }\n            if ($.isFunction(options.keypress)) {\n                result = options.keypress(e);\n                if (result !== undefined) {\n                    return result;\n                }\n            }\n            // key polyfill is not correct for keypress\n            // https://github.com/cvan/keyboardevent-key-polyfill/issues/15\n            var key;\n            if (is_key_native()) {\n                key = e.key;\n            }\n            if (!key || no_key) {\n                key = String.fromCharCode(e.which);\n            }\n            if (key.toUpperCase() === 'SPACEBAR') { // fix IE issue\n                key = ' ';\n            }\n            if (enabled) {\n                if ($.inArray(e.which, [13, 0, 8]) > -1) {\n                    if (e.keyCode === 123) { // for F12 which === 0\n                        return;\n                    }\n                    return false;\n                    // which === 100 - d\n                } else if (key && (!e.ctrlKey || (e.ctrlKey && e.ctrlKey)) &&\n                           (!(e.altKey && e.which === 100) || e.altKey) &&\n                           !dead_key) {\n                    // dead_key are handled by input event\n                    if (reverse_search) {\n                        rev_search_str += key;\n                        reverse_history_search();\n                        draw_reverse_prompt();\n                    } else {\n                        self.insert(key);\n                    }\n                    return false;\n                }\n            }\n        }\n        function input() {\n            // Some Androids don't fire keypress - #39\n            // if there is dead_key we also need to grab real character #158\n            if ((no_keypress || dead_key) && !skip_insert && (single_key || no_key) &&\n                !backspace) {\n                var pos = position;\n                var val = clip.val();\n                if (val !== '') {\n                    if (reverse_search) {\n                        rev_search_str = val;\n                        reverse_history_search();\n                        draw_reverse_prompt();\n                    } else {\n                        self.set(val);\n                    }\n                    // backspace detection for Android/Chrome/SwiftKey\n                    if (backspace || val.length < text.length) {\n                        self.position(pos - 1);\n                    } else {\n                        // user enter more then one character if click on complete word\n                        // on android\n                        self.position(pos + Math.abs(val.length - text.length));\n                    }\n                }\n            }\n        }\n        doc.bind('keypress.cmd', keypress_event).bind('keydown.cmd', keydown_event).\n            unbind('input.cmd', input);\n        (function() {\n            var isDragging = false;\n            var was_down = false;\n            var count = 0;\n            self.on('mousedown.cmd', function() {\n                was_down = true;\n                self.oneTime(1, function() {\n                    $(window).on('mousemove.cmd_' + id, function() {\n                        isDragging = true;\n                        $(window).off('mousemove.cmd_' + id);\n                    });\n                });\n            }).on('mouseup.cmd', function(e) {\n                var wasDragging = isDragging;\n                isDragging = false;\n                $(window).off('mousemove.cmd_' + id);\n                if (!wasDragging) {\n                    var name = 'click_' + id;\n                    if (++count === 1) {\n                        var down = was_down;\n                        if (enabled) {\n                            self.oneTime(options.clickTimeout, name, function() {\n                                if (!$(e.target).is('.prompt') && down) {\n                                    self.position(get_char_pos({\n                                        x: e.pageX,\n                                        y: e.pageY\n                                    }));\n                                }\n                                count = 0;\n                            });\n                        } else {\n                            count = 0;\n                        }\n                    } else {\n                        self.stopTime(name);\n                        count = 0;\n                    }\n                }\n                was_down = false;\n            });\n        })();\n        self.data('cmd', self);\n        if (!('KeyboardEvent' in window && 'key' in window.KeyboardEvent.prototype)) {\n            setTimeout(function() {\n                throw new Error('key event property not supported try ' +\n                                'https://github.com/cvan/keyboardevent-key-polyfill');\n            }, 0);\n        }\n        return self;\n    }; // cmd plugin\n\n    // -------------------------------------------------------------------------\n    // :: TOOLS\n    // -------------------------------------------------------------------------\n    // taken from https://hacks.mozilla.org/2011/09/detecting-and-generating-\n    // css-animations-in-javascript/\n    var support_animations = (function() {\n        var animation = false,\n            domPrefixes = 'Webkit Moz O ms Khtml'.split(' '),\n            elm = document.createElement('div');\n        if (elm.style.animationName) {\n            animation = true;\n        }\n        if (animation === false) {\n            for (var i = 0; i < domPrefixes.length; i++) {\n                var name = domPrefixes[i] + 'AnimationName';\n                if (elm.style[name] !== undefined) {\n                    animation = true;\n                    break;\n                }\n            }\n        }\n        return animation;\n    })();\n    // -------------------------------------------------------------------------\n    var is_android = navigator.userAgent.toLowerCase().indexOf('android') !== -1;\n    // -------------------------------------------------------------------------\n    var is_touch = (function() {\n        return 'ontouchstart' in window || !!window.DocumentTouch &&\n            document instanceof window.DocumentTouch;\n    })();\n    // -------------------------------------------------------------------------\n    function process_command(string, fn) {\n        var array = string.match(command_re) || [];\n        if (array.length) {\n            var name = array.shift();\n            var args = $.map(array, fn);\n            var quotes = $.map(array, function(arg) {\n                var m = arg.match(/^(['\"]).*\\1$/);\n                return m && m[1] || '';\n            });\n            var rest = string.substring(name.length).trim();\n            return {\n                command: string,\n                name: name,\n                args: args,\n                args_quotes: quotes,\n                rest: rest\n            };\n        } else {\n            return {\n                command: string,\n                name: '',\n                args: [],\n                args_quotes: quotes,\n                rest: ''\n            };\n        }\n    }\n    // -------------------------------------------------------------------------\n    /* eslint-disable */\n    var format_split_re = /(\\[\\[[!gbiuso]*;[^;]*;[^\\]]*\\](?:[^\\]]*\\\\\\][^\\]]*|[^\\]]*|[^[]*\\[[^\\]]*)\\]?)/i;\n    var format_parts_re = /\\[\\[([!gbiuso]*);([^;]*);([^;\\]]*);?([^;\\]]*);?([^\\]]*)\\]([^\\]]*\\\\\\][^\\]]*|[^\\]]*|[^[]*\\[[^\\]]*)\\]?/gi;\n    var format_re = /\\[\\[([!gbiuso]*;[^;\\]]*;[^;\\]]*(?:;|[^\\]()]*);?[^\\]]*)\\]([^\\]]*\\\\\\][^\\]]*|[^\\]]*|[^[]*\\[[^\\]]*)\\]?/gi;\n    var format_exist_re = /\\[\\[([!gbiuso]*;[^;\\]]*;[^;\\]]*(?:;|[^\\]()]*);?[^\\]]*)\\]([^\\]]*\\\\\\][^\\]]*|[^\\]]*|[^[]*\\[[^\\]]*)\\]/gi;\n    var format_full_re = /^\\[\\[([!gbiuso]*;[^;\\]]*;[^;\\]]*(?:;|[^\\]()]*);?[^\\]]*)\\]([^\\]]*\\\\\\][^\\]]*|[^\\]]*|[^[]*\\[[^\\]]*)\\]$/gi;\n    var color_hex_re = /^#([0-9a-f]{3}|[0-9a-f]{6})$/i;\n    var url_re = /(\\bhttps?:\\/\\/(?:(?:(?!&[^;]+;)|(?=&amp;))[^\\s\"'<>\\][)])+\\b)/gi;\n    var url_nf_re = /\\b(https?:\\/\\/(?:(?:(?!&[^;]+;)|(?=&amp;))[^\\s\"'<>\\][)])+)\\b(?![^[\\]]*])/gi;\n    var email_re = /((([^<>('\")[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,})))/g;\n    var command_re = /((?:\"[^\"\\\\]*(?:\\\\[\\S\\s][^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\[\\S\\s][^'\\\\]*)*'|\\/[^\\/\\\\]*(?:\\\\[\\S\\s][^\\/\\\\]*)*\\/[gimy]*(?=\\s|$)|(?:\\\\\\s|\\S))+)(?=\\s|$)/gi;\n    var format_begin_re = /(\\[\\[[!gbiuso]*;[^;]*;[^\\]]*\\])/i;\n    var format_start_re = /^(\\[\\[[!gbiuso]*;[^;]*;[^\\]]*\\])/i;\n    var format_end_re = /\\[\\[[!gbiuso]*;[^;]*;[^\\]]*\\]?$/i;\n    var format_exec_re = /(\\[\\[(?:[^\\]]|\\\\\\])+\\]\\])/;\n    var float_re = /^[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?$/;\n    var re_re = /^\\/((?:\\\\\\/|[^/]|\\[[^\\]]*\\/[^\\]]*\\])+)\\/([gimy]*)$/;\n    var unclosed_strings_re = /^(?=((?:[^\"']+|\"[^\"\\\\]*(?:\\\\[^][^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\[^][^'\\\\]*)*')*))\\1./;\n    /* eslint-enable */\n    $.terminal = {\n        version: '1.4.0',\n        // colors from http://www.w3.org/wiki/CSS/Properties/color/keywords\n        color_names: [\n            'transparent', 'currentcolor', 'black', 'silver', 'gray', 'white',\n            'maroon', 'red', 'purple', 'fuchsia', 'green', 'lime', 'olive',\n            'yellow', 'navy', 'blue', 'teal', 'aqua', 'aliceblue',\n            'antiquewhite', 'aqua', 'aquamarine', 'azure', 'beige', 'bisque',\n            'black', 'blanchedalmond', 'blue', 'blueviolet', 'brown',\n            'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral',\n            'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue',\n            'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey',\n            'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange',\n            'darkorchid', 'darkred', 'darksalmon', 'darkseagreen',\n            'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise',\n            'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey',\n            'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'fuchsia',\n            'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'gray', 'green',\n            'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo',\n            'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen',\n            'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan',\n            'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey',\n            'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue',\n            'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow',\n            'lime', 'limegreen', 'linen', 'magenta', 'maroon',\n            'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple',\n            'mediumseagreen', 'mediumslateblue', 'mediumspringgreen',\n            'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream',\n            'mistyrose', 'moccasin', 'navajowhite', 'navy', 'oldlace', 'olive',\n            'olivedrab', 'orange', 'orangered', 'orchid', 'palegoldenrod',\n            'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip',\n            'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'purple', 'red',\n            'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown',\n            'seagreen', 'seashell', 'sienna', 'silver', 'skyblue', 'slateblue',\n            'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan',\n            'teal', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat',\n            'white', 'whitesmoke', 'yellow', 'yellowgreen'],\n        // ---------------------------------------------------------------------\n        // :: Validate html color (it can be name or hex)\n        // ---------------------------------------------------------------------\n        valid_color: function valid_color(color) {\n            if (color.match(color_hex_re)) {\n                return true;\n            } else {\n                return $.inArray(color.toLowerCase(),\n                                 $.terminal.color_names) !== -1;\n            }\n        },\n        // ---------------------------------------------------------------------\n        // :: function check if given string contain invalid strings\n        // ---------------------------------------------------------------------\n        unclosed_strings: function unclosed_strings(string) {\n            return !!string.match(unclosed_strings_re);\n        },\n        // ---------------------------------------------------------------------\n        // :: Escape all special regex characters, so it can be use as regex to\n        // :: match exact string that contain those characters\n        // ---------------------------------------------------------------------\n        escape_regex: function escape_regex(str) {\n            if (typeof str === 'string') {\n                var special = /([-\\\\^$[\\]()+{}?*.|])/g;\n                return str.replace(special, '\\\\$1');\n            }\n        },\n        // ---------------------------------------------------------------------\n        // :: test if string contain formatting\n        // ---------------------------------------------------------------------\n        have_formatting: function have_formatting(str) {\n            return typeof str === 'string' && !!str.match(format_exist_re);\n        },\n        is_formatting: function is_formatting(str) {\n            return typeof str === 'string' && !!str.match(format_full_re);\n        },\n        // ---------------------------------------------------------------------\n        // :: return array of formatting and text between them\n        // ---------------------------------------------------------------------\n        format_split: function format_split(str) {\n            return str.split(format_split_re).filter(Boolean);\n        },\n        // ---------------------------------------------------------------------\n        // :: helper function used by substring and split_equal it loop over\n        // :: string and execute callback with text count and other data\n        // ---------------------------------------------------------------------\n        iterate_formatting: function iterate_formatting(string, callback) {\n            function is_space() {\n                return string.substring(i - 6, i) === '&nbsp;' ||\n                    string.substring(i - 1, i) === ' ';\n            }\n            var formatting = false;\n            var in_text = false;\n            var count = 0;\n            var match;\n            var space = -1;\n            for (var i = 0; i < string.length; i++) {\n                match = string.substring(i).match(format_start_re);\n                if (match) {\n                    formatting = match[1];\n                    in_text = false;\n                } else if (formatting) {\n                    if (string[i] === ']') {\n                        if (in_text) {\n                            formatting = '';\n                            in_text = false;\n                        } else {\n                            in_text = true;\n                        }\n                    }\n                } else {\n                    in_text = true;\n                }\n                var not_formatting = (formatting && in_text) || !formatting;\n                var opening = string[i] === '[' && string[i + 1] === '[';\n                if (is_space() && (not_formatting || opening)) {\n                    space = i;\n                }\n                var braket = string[i].match(/[[\\]]/);\n                if (not_formatting) {\n                    if (string[i] === '&') { // treat entity as one character\n                        match = string.substring(i).match(/^(&[^;]+;)/);\n                        if (!match) {\n                            // should never happen if used by terminal,\n                            // because it always calls $.terminal.encode\n                            // before this function\n                            throw new Error('Unclosed html entity at char ' + (i + 1));\n                        }\n                        i += match[1].length - 2; // because continue adds 1 to i\n                        // here was code for issue #77 but it work without it\n                        // after refactoring and it would be hard to run this code\n                        // in this general function, maybe call callback one more time\n                        /*\n                        if (i === string.length - 1) {\n                            result.push(output + m[1]);\n                        }\n                        */\n                        continue;\n                    } else if (string[i] === ']' && string[i - 1] === '\\\\') {\n                        // escape \\] counts as one character\n                        --count;\n                    } else if (!braket) {\n                        ++count;\n                    }\n                }\n                if (!braket && not_formatting) {\n                    var data = {\n                        count: count,\n                        index: i,\n                        formatting: formatting,\n                        text: in_text,\n                        space: space\n                    };\n                    var ret = callback(data);\n                    if (ret === false) {\n                        break;\n                    } else if (ret) {\n                        if (ret.count !== undefined) {\n                            count = ret.count;\n                        }\n                        if (ret.space !== undefined) {\n                            space = ret.space;\n                        }\n                        if (ret.index !== undefined) {\n                            i = ret.index;\n                        }\n                    }\n                }\n            }\n        },\n        // ---------------------------------------------------------------------\n        // :: formatting aware substring function\n        // ---------------------------------------------------------------------\n        substring: function substring(string, start_index, end_index) {\n            if (!$.terminal.have_formatting(string)) {\n                return string.substring(start_index, end_index);\n            }\n            var start;\n            var end = string.length;\n            var start_formatting = '';\n            var end_formatting = '';\n            $.terminal.iterate_formatting(string, function(data) {\n                if (data.count === start_index + 1) {\n                    start = data.index;\n                    if (data.formatting) {\n                        start_formatting = data.formatting;\n                    }\n                } else if (end_index && data.count === end_index + 1) {\n                    end = data.index;\n                    end_formatting = data.formatting;\n                }\n            });\n            string = start_formatting + string.substring(start, end);\n            if (end_formatting) {\n                string += ']';\n            }\n            return string;\n        },\n        // ---------------------------------------------------------------------\n        // :: add format text as 5th paramter to formatting it's used for\n        // :: data attribute in format function\n        // ---------------------------------------------------------------------\n        normalize: function normalize(string) {\n            return string.replace(format_re, function(_, format, text) {\n                if (text === '') {\n                    return '';\n                }\n                var semicolons = format.match(/;/g).length;\n                // missing semicolons\n                if (semicolons >= 4) {\n                    var args = format.split(/;/);\n                    var start = args.slice(0, 4).join(';');\n                    var arg = args.slice(4).join(';');\n                    return '[[' + start + ';' + (arg || text) + ']' + text + ']';\n                } else if (semicolons === 2) {\n                    semicolons = ';;';\n                } else if (semicolons === 3) {\n                    semicolons = ';';\n                } else {\n                    semicolons = '';\n                }\n                // return '[[' + format + ']' + text + ']';\n                // closing braket will break formatting so we need to escape\n                // those using html entity equvalent\n                var safe = text.replace(/\\\\\\]/g, '&#93;').replace(/\\n/g, '\\\\n').\n                    replace(/&nbsp;/g, ' ');\n                return '[[' + format + semicolons + safe + ']' + text + ']';\n            });\n        },\n        // ---------------------------------------------------------------------\n        // :: split text into lines with equal length so each line can be\n        // :: rendered separately (text formatting can be longer then a line).\n        // ---------------------------------------------------------------------\n        split_equal: function split_equal(str, length, keep_words) {\n            var prev_format = '';\n            var result = [];\n            var array = $.terminal.normalize(str).split(/\\n/g);\n            for (var i = 0, len = array.length; i < len; ++i) {\n                if (array[i] === '') {\n                    result.push('');\n                    continue;\n                }\n                var line = array[i];\n                var first_index = 0;\n                var output;\n                var line_length = line.length;\n                $.terminal.iterate_formatting(line, function(data) {\n                    // we don't iterate over last closing bracket\n                    var last_bracket = data.index === line_length - 2 &&\n                        line[data.index + 1] === ']';\n                    var last_iteraction = data.index === line_length - 1 || last_bracket;\n                    if (data.count === length || last_iteraction) {\n                        if (keep_words) {\n                            var text = $.terminal.strip(line.substring(data.space));\n                            // replace html entities with characters\n                            text = $('<span>' + text + '</span>').text();\n                            // real length, not counting formatting\n                            var text_len = text.length;\n                            text = text.substring(0, data.index + length + 1);\n                            var can_break = false;\n                            if (text.match(/\\s/) || data.index + length + 1 > text_len) {\n                                can_break = true;\n                            }\n                        }\n                        // if words is true we split at last space and make next loop\n                        // continue where the space where located\n                        if (keep_words && !last_bracket && data.space !== -1 &&\n                            data.index !== line_length - 1 && can_break) {\n                            output = line.substring(first_index, data.space);\n                            var new_index = data.space - 1;\n                        } else {\n                            output = line.substring(first_index, data.index + 1);\n                        }\n                        if (keep_words) {\n                            output = output.replace(/(&nbsp;|\\s)+$/g, '');\n                        }\n                        first_index = (new_index || data.index) + 1;\n                        // prev_format added in fix_close function\n                        if (prev_format) {\n                            var closed_formatting = output.match(/^[^\\]]*\\]/);\n                            output = prev_format + output;\n                            if (closed_formatting) {\n                                prev_format = '';\n                            }\n                        }\n                        if (last_bracket) {\n                            output += ']';\n                            prev_format = '';\n                        }\n                        var matched = output.match(format_re);\n                        if (matched) {\n                            var last = matched[matched.length - 1];\n                            if (last[last.length - 1] !== ']') {\n                                prev_format = last.match(format_begin_re)[1];\n                                output += ']';\n                            } else if (output.match(format_end_re)) {\n                                output = output.replace(format_end_re, '');\n                                prev_format = last.match(format_begin_re)[1];\n                            }\n                        }\n                        result.push(output);\n                        // modify loop by returing new data\n                        return {index: new_index, count: 0, space: -1};\n                    }\n                });\n            }\n            return result;\n        },\n        // ---------------------------------------------------------------------\n        // :: Encode formating as html for insertion into DOM\n        // ---------------------------------------------------------------------\n        encode: function encode(str) {\n            // don't escape entities\n            str = str.replace(/&(?!#[0-9]+;|[a-zA-Z]+;)/g, '&amp;');\n            return str.replace(/</g, '&lt;').replace(/>/g, '&gt;')\n                .replace(/ /g, '&nbsp;')\n                .replace(/\\t/g, '&nbsp;&nbsp;&nbsp;&nbsp;');\n        },\n        // -----------------------------------------------------------------------\n        // :: Default formatter that allow for nested formatting, example:\n        // :: [[;;#000]hello [[;#f00;]red] world]\n        // -----------------------------------------------------------------------\n        nested_formatting: function nested_formatting(string) {\n            if (!$.terminal.have_formatting(string)) {\n                return string;\n            }\n            var stack = [];\n            var re = /(\\[\\[(?:[^\\]]|\\\\\\])+\\](?:[^\\][]|\\\\\\])+\\]?)/;\n            var format_re = /(\\[\\[(?:[^\\]]|\\\\\\])+\\])[\\s\\S]*/;\n            return string.split(re).filter(Boolean).map(function(string) {\n                if (string.match(/^\\[\\[/)) {\n                    if (!$.terminal.is_formatting(string)) {\n                        string += ']';\n                        stack.push(string.replace(format_re, '$1'));\n                    }\n                } else {\n                    var pop = false;\n                    if (string.match(/\\]/)) {\n                        pop = true;\n                    }\n                    if (stack.length) {\n                        string = stack[stack.length - 1] + string;\n                    }\n                    if (pop) {\n                        stack.pop();\n                    } else if (stack.length) {\n                        string += ']';\n                    }\n                }\n                return string;\n            }).join('');\n        },\n        // ---------------------------------------------------------------------\n        // :: safe function that will render text as it is\n        // ---------------------------------------------------------------------\n        escape_formatting: function escape_formatting(string) {\n            return $.terminal.escape_brackets($.terminal.encode(string));\n        },\n        // ---------------------------------------------------------------------\n        // :: Replace terminal formatting with html\n        // ---------------------------------------------------------------------\n        format: function format(str, options) {\n            var settings = $.extend({}, {\n                linksNoReferrer: false\n            }, options || {});\n            if (typeof str === 'string') {\n                // support for formating foo[[u;;]bar]baz[[b;#fff;]quux]zzz\n                var splitted = $.terminal.format_split(str);\n                str = $.map(splitted, function(text) {\n                    if (text === '') {\n                        return text;\n                    } else if ($.terminal.is_formatting(text)) {\n                        // fix &nbsp; inside formatting because encode is called\n                        // before format\n                        text = text.replace(/\\[\\[[^\\]]+\\]/, function(text) {\n                            return text.replace(/&nbsp;/g, ' ');\n                        });\n                        return text.replace(format_parts_re, function(s,\n                                                                      style,\n                                                                      color,\n                                                                      background,\n                                                                      _class,\n                                                                      data_text,\n                                                                      text) {\n                            if (text === '') {\n                                return ''; //'<span>&nbsp;</span>';\n                            }\n                            text = text.replace(/\\\\]/g, ']');\n                            var style_str = '';\n                            if (style.indexOf('b') !== -1) {\n                                style_str += 'font-weight:bold;';\n                            }\n                            var text_decoration = [];\n                            if (style.indexOf('u') !== -1) {\n                                text_decoration.push('underline');\n                            }\n                            if (style.indexOf('s') !== -1) {\n                                text_decoration.push('line-through');\n                            }\n                            if (style.indexOf('o') !== -1) {\n                                text_decoration.push('overline');\n                            }\n                            if (text_decoration.length) {\n                                style_str += 'text-decoration:' +\n                                    text_decoration.join(' ') + ';';\n                            }\n                            if (style.indexOf('i') !== -1) {\n                                style_str += 'font-style:italic;';\n                            }\n                            if ($.terminal.valid_color(color)) {\n                                style_str += 'color:' + color + ';';\n                                if (style.indexOf('g') !== -1) {\n                                    style_str += 'text-shadow:0 0 5px ' + color + ';';\n                                }\n                            }\n                            if ($.terminal.valid_color(background)) {\n                                style_str += 'background-color:' + background;\n                            }\n                            var data;\n                            if (data_text === '') {\n                                data = text;\n                            } else {\n                                data = data_text.replace(/&#93;/g, ']');\n                            }\n                            var result;\n                            if (style.indexOf('!') !== -1) {\n                                if (data.match(email_re)) {\n                                    result = '<a href=\"mailto:' + data + '\" ';\n                                } else {\n                                    result = '<a target=\"_blank\" href=\"' + data + '\" ';\n                                    if (settings.linksNoReferrer) {\n                                        result += 'rel=\"noreferrer\" ';\n                                    }\n                                }\n                                // make focus to terminal textarea that will enable\n                                // terminal when pressing tab and terminal is disabled\n                                result += 'tabindex=\"1000\" ';\n                            } else {\n                                result = '<span';\n                            }\n                            if (style_str !== '') {\n                                result += ' style=\"' + style_str + '\"';\n                            }\n                            if (_class !== '') {\n                                result += ' class=\"' + _class + '\"';\n                            }\n                            if (style.indexOf('!') !== -1) {\n                                result += '>' + text + '</a>';\n                            } else {\n                                result += ' data-text=\"' +\n                                    data.replace('\"', '&quote;') + '\">' +\n                                    text + '</span>';\n                            }\n                            return result;\n                        });\n                    } else {\n                        return '<span>' + text.replace(/\\\\\\]/g, ']') + '</span>';\n                    }\n                }).join('');\n                return str.replace(/<span><br\\s*\\/?><\\/span>/gi, '<br/>');\n            } else {\n                return '';\n            }\n        },\n        // ---------------------------------------------------------------------\n        // :: Replace brackets with html entities\n        // ---------------------------------------------------------------------\n        escape_brackets: function escape_brackets(string) {\n            return string.replace(/\\[/g, '&#91;').replace(/\\]/g, '&#93;');\n        },\n        // ---------------------------------------------------------------------\n        // :: Remove formatting from text\n        // ---------------------------------------------------------------------\n        strip: function strip(str) {\n            str = str.replace(format_parts_re, '$6');\n            return str.replace(/(\\\\?)([[\\]])/g, function(whole, slash) {\n                if (slash) {\n                    return whole;\n                } else {\n                    return '';\n                }\n            });\n        },\n        // ---------------------------------------------------------------------\n        // :: Return active terminal\n        // ---------------------------------------------------------------------\n        active: function active() {\n            return terminals.front();\n        },\n        // ---------------------------------------------------------------------\n        // :: Implmentation detail id is always length of terminals Cycle\n        // ---------------------------------------------------------------------\n        last_id: function last_id() {\n            var len = terminals.length();\n            if (len) {\n                return len - 1;\n            }\n        },\n        // ---------------------------------------------------------------------\n        // :: Function that works with strings like 'asd' 'asd\\' asd' \"asd asd\"\n        // :: asd\\ 123 -n -b / [^ ]+ / /\\s+/ asd\\ a it creates a regex and\n        // :: numbers and replaces escape characters in double quotes\n        // :: if strict is set to false it only strips single and double quotes\n        // :: and escapes spaces\n        // ---------------------------------------------------------------------\n        parse_argument: function parse_argument(arg, strict) {\n            function parse_string(string) {\n                // remove quotes if before are even number of slashes\n                // we don't remove slases becuase they are handled by JSON.parse\n                string = string.replace(/((^|[^\\\\])(?:\\\\\\\\)*)['\"]/g, '$1');\n                // use build in function to parse rest of escaped characters\n                return JSON.parse('\"' + string + '\"');\n            }\n            if (strict === false) {\n                if (arg[0] === \"'\" && arg[arg.length - 1] === \"'\") {\n                    return arg.replace(/^'|'$/g, '');\n                } else if (arg[0] === '\"' && arg[arg.length - 1] === '\"') {\n                    return arg.replace(/^\"|\"$/g, '').replace(/\\\\([\" ])/g, '$1');\n                } else if (arg.match(/\\/.*\\/[gimy]*$/)) {\n                    return arg;\n                } else if (arg.match(/['\"]]/)) {\n                    // part of arg is in quote\n                    return parse_string(arg);\n                } else {\n                    return arg.replace(/\\\\ /g, ' ');\n                }\n            }\n            var regex = arg.match(re_re);\n            if (regex) {\n                return new RegExp(regex[1], regex[2]);\n            } else if (arg.match(/['\"]/)) {\n                return parse_string(arg);\n            } else if (arg.match(/^-?[0-9]+$/)) {\n                return parseInt(arg, 10);\n            } else if (arg.match(float_re)) {\n                return parseFloat(arg);\n            } else {\n                return arg.replace(/\\\\(['\"() ])/g, '$1');\n            }\n        },\n        // ---------------------------------------------------------------------\n        // :: function split and parse arguments\n        // ---------------------------------------------------------------------\n        parse_arguments: function parse_arguments(string) {\n            return $.map(string.match(command_re) || [], $.terminal.parse_argument);\n        },\n        // ---------------------------------------------------------------------\n        // :: Function split and strips single and double quotes\n        // :: and escapes spaces\n        // ---------------------------------------------------------------------\n        split_arguments: function(string) {\n            return $.map(string.match(command_re) || [], function(arg) {\n                return $.terminal.parse_argument(arg, false);\n            });\n        },\n        // ---------------------------------------------------------------------\n        // :: Function that returns an object {name,args}. Arguments are parsed\n        // :: using the function parse_arguments\n        // ---------------------------------------------------------------------\n        parse_command: function parse_command(string) {\n            return process_command(string, $.terminal.parse_argument);\n        },\n        // ---------------------------------------------------------------------\n        // :: Same as parse_command but arguments are parsed using split_arguments\n        // ---------------------------------------------------------------------\n        split_command: function(string) {\n            return process_command(string, function(arg) {\n                return $.terminal.parse_argument(arg, false);\n            });\n        },\n        // ---------------------------------------------------------------------\n        // :: function executed for each text inside [{ .... }]\n        // ---------------------------------------------------------------------\n        extended_command: function extended_command(term, string) {\n            try {\n                change_hash = false;\n                term.exec(string, true).done(function() {\n                    change_hash = true;\n                });\n            } catch (e) {\n                // error is process in exec\n            }\n        }\n    };\n    // -----------------------------------------------------------------------\n    // Helper plugins and functions\n    // -----------------------------------------------------------------------\n    $.fn.visible = function() {\n        return this.css('visibility', 'visible');\n    };\n    $.fn.hidden = function() {\n        return this.css('visibility', 'hidden');\n    };\n    // -----------------------------------------------------------------------\n    // :: hack to get scroll element if terminal attached to the body\n    // :: is better then userAgent sniffing because other browsers beside\n    // :: chrome may use body as scroll element instead of html like\n    // :: IE and FireFox\n    // -----------------------------------------------------------------------\n    $.fn.scroll_element = function() {\n        var defaults = $.fn.scroll_element.defaults;\n        return this.map(function() {\n            var $this = $(this);\n            if ($this.is('body')) {\n                var html = $('html');\n                var body = $('body');\n                var scrollTop = body.scrollTop() || html.scrollTop();\n                var pre = $('<pre/>').css(defaults.pre).appendTo('body');\n                pre.html(new Array(defaults.lines).join('\\n'));\n                $('body,html').scrollTop(10);\n                var scroll_object;\n                if (body.scrollTop() === 10) {\n                    body.scrollTop(scrollTop);\n                    scroll_object = body[0];\n                } else if (html.scrollTop() === 10) {\n                    html.scrollTop(scrollTop);\n                    scroll_object = html[0];\n                }\n                pre.remove();\n                return scroll_object;\n            } else {\n                return this;\n            }\n        });\n    };\n    $.fn.scroll_element.defaults = {\n        lines: 2000,\n        pre: {\n            'font-size': '100px',\n            'white-space': 'pre' // just in case if user overwrite css for pre tag\n        }\n    };\n    // -----------------------------------------------------------------------\n    function is_key_native() {\n        if (!('KeyboardEvent' in window && 'key' in window.KeyboardEvent.prototype)) {\n            return false;\n        }\n        var proto = window.KeyboardEvent.prototype;\n        var get = Object.getOwnPropertyDescriptor(proto, 'key').get;\n        return get.toString().match(/\\[native code\\]/);\n    }\n    // -----------------------------------------------------------------------\n    function warn(msg) {\n        if (console && console.warn) {\n            console.warn(msg);\n        } else {\n            // prevent catching in outer try..catch\n            setTimeout(function() {\n                throw new Error('WARN: ' + msg);\n            }, 0);\n        }\n    }\n    // -----------------------------------------------------------------------\n    // JSON-RPC CALL\n    // -----------------------------------------------------------------------\n    var ids = {}; // list of url based ids of JSON-RPC\n    $.jrpc = function(url, method, params, success, error) {\n        var options;\n        if ($.isPlainObject(url)) {\n            options = url;\n        } else {\n            options = {\n                url: url,\n                method: method,\n                params: params,\n                success: success,\n                error: error\n            };\n        }\n        function validJSONRPC(response) {\n            return (typeof response.id === 'number' &&\n                    typeof response.result !== 'undefined') ||\n                (options.method === 'system.describe' &&\n                 response.name === 'DemoService' &&\n                 typeof response.id !== 'undefined' &&\n                 response.procs instanceof Array);\n        }\n        ids[options.url] = ids[options.url] || 0;\n        var request = {\n            'jsonrpc': '2.0',\n            'method': options.method,\n            'params': options.params,\n            'id': ++ids[options.url]\n        };\n        return $.ajax({\n            url: options.url,\n            beforeSend: function beforeSend(jxhr, settings) {\n                if ($.isFunction(options.request)) {\n                    options.request(jxhr, request);\n                }\n                settings.data = JSON.stringify(request);\n            },\n            success: function success(response, status, jqXHR) {\n                var content_type = jqXHR.getResponseHeader('Content-Type');\n                if (!content_type.match(/(application|text)\\/json/)) {\n                    warn('Response Content-Type is neither application/json' +\n                         ' nor text/json');\n                }\n                var json;\n                try {\n                    json = JSON.parse(response);\n                } catch (e) {\n                    if (options.error) {\n                        options.error(jqXHR, 'Invalid JSON', e);\n                    } else {\n                        throw new Error('Invalid JSON');\n                    }\n                    return;\n                }\n                if ($.isFunction(options.response)) {\n                    options.response(jqXHR, json);\n                }\n                if (validJSONRPC(json)) {\n                    // don't catch errors in success callback\n                    options.success(json, status, jqXHR);\n                } else if (options.error) {\n                    options.error(jqXHR, 'Invalid JSON-RPC');\n                } else {\n                    throw new Error('Invalid JSON-RPC');\n                }\n            },\n            error: options.error,\n            contentType: 'application/json',\n            dataType: 'text',\n            async: true,\n            cache: false,\n            // timeout: 1,\n            type: 'POST'\n        });\n    };\n\n    // -----------------------------------------------------------------------\n    /*\n    function is_scrolled_into_view(elem) {\n        var docViewTop = $(window).scrollTop();\n        var docViewBottom = docViewTop + $(window).height();\n\n        var elemTop = $(elem).offset().top;\n        var elemBottom = elemTop + $(elem).height();\n\n        return ((elemBottom >= docViewTop) && (elemTop <= docViewBottom));\n    }\n    */\n    // -----------------------------------------------------------------------\n    // :: Create fake terminal to calcualte the dimention of one character\n    // :: this will make terminal work if terminal div is not added to the\n    // :: DOM at init like with:\n    // :: $('<div/>').terminal().echo('foo bar').appendTo('body');\n    // -----------------------------------------------------------------------\n    function char_size() {\n        var temp = $('<div class=\"terminal temp\"><div class=\"cmd\"><span cla' +\n                     'ss=\"prompt\">&nbsp;</span></div></div>').appendTo('body');\n        var rect = temp.find('span')[0].getBoundingClientRect();\n        var result = {\n            width: rect.width,\n            height: rect.height\n        };\n        temp.remove();\n        return result;\n    }\n    // -----------------------------------------------------------------------\n    // :: calculate numbers of characters\n    // -----------------------------------------------------------------------\n    function get_num_chars(terminal) {\n        var width = terminal.find('.terminal-fill').width();\n        var result = Math.floor(width / char_size().width);\n        // random number to not get NaN in node but big enough to not wrap exception\n        return result || 1000;\n    }\n    // -----------------------------------------------------------------------\n    // :: Calculate number of lines that fit without scroll\n    // -----------------------------------------------------------------------\n    function get_num_rows(terminal) {\n        return Math.floor(terminal.find('.terminal-fill').height() / char_size().height);\n    }\n    // -----------------------------------------------------------------------\n    // :: try to copy given DOM element text to clipboard\n    // -----------------------------------------------------------------------\n    function text_to_clipboard(container, text) {\n        var $div = $('<div>' + text.replace(/\\n/, '<br/>') + '<div>');\n        var range;\n        container.append($div);\n        if (document.body.createTextRange) {\n            range = document.body.createTextRange();\n            range.moveToElementText($div[0]);\n            range.select();\n        } else if (window.getSelection) {\n            var selection = window.getSelection();\n            if (selection.setBaseAndExtent) {\n                selection.setBaseAndExtent($div[0], 0, $div[0], 1);\n            } else if (document.createRange) {\n                range = document.createRange();\n                range.selectNodeContents($div[0]);\n                selection.removeAllRanges();\n                selection.addRange(range);\n            }\n        }\n        try {\n            document.execCommand('copy');\n        } catch (e) {}\n        $div.remove();\n    }\n    // -----------------------------------------------------------------------\n    // :: TERMINAL PLUGIN CODE\n    // -----------------------------------------------------------------------\n    var version_set = !$.terminal.version.match(/^\\{\\{/);\n    var copyright = 'Copyright (c) 2011-2017 Jakub Jankiewicz <http://jcubic' +\n        '.pl/me>';\n    var version_string = version_set ? ' v. ' + $.terminal.version : ' ';\n    // regex is for placing version string aligned to the right\n    var reg = new RegExp(' {' + version_string.length + '}$');\n    var name_ver = 'jQuery Terminal Emulator' +\n        (version_set ? version_string : '');\n    // -----------------------------------------------------------------------\n    // :: Terminal Signatures\n    // -----------------------------------------------------------------------\n    var signatures = [\n        ['jQuery Terminal', '(c) 2011-2017 jcubic'],\n        [name_ver, copyright.replace(/^Copyright | *<.*>/g, '')],\n        [name_ver, copyright.replace(/^Copyright /, '')],\n        [\n            '      _______                 ________                        __',\n            '     / / _  /_ ____________ _/__  ___/______________  _____  / /',\n            ' __ / / // / // / _  / _/ // / / / _  / _/     / /  \\\\/ / _ \\\\/ /',\n            '/  / / // / // / ___/ // // / / / ___/ // / / / / /\\\\  / // / /__',\n            '\\\\___/____ \\\\\\\\__/____/_/ \\\\__ / /_/____/_//_/_/_/ /_/  \\\\/\\\\__\\\\_\\\\___/',\n            '         \\\\/          /____/                                   '\n                .replace(reg, ' ') + version_string,\n            copyright\n        ],\n        [\n            '      __ _____                     ________                            ' +\n                '  __',\n            '     / // _  /__ __ _____ ___ __ _/__  ___/__ ___ ______ __ __  __ ___ ' +\n                ' / /',\n            ' __ / // // // // // _  // _// // / / // _  // _//     // //  \\\\/ // _ ' +\n                '\\\\/ /',\n            '/  / // // // // // ___// / / // / / // ___// / / / / // // /\\\\  // // ' +\n                '/ /__',\n            '\\\\___//____ \\\\\\\\___//____//_/ _\\\\_  / /_//____//_/ /_/ /_//_//_/ /_/ \\\\' +\n                '__\\\\_\\\\___/',\n            ('          \\\\/              /____/                                      ' +\n             '    ').replace(reg, '') + version_string,\n            copyright\n        ]\n    ];\n    // -----------------------------------------------------------------------\n    // :: Default options\n    // -----------------------------------------------------------------------\n    $.terminal.defaults = {\n        prompt: '> ',\n        history: true,\n        exit: true,\n        clear: true,\n        enabled: true,\n        historySize: 60,\n        maskChar: '*',\n        wrap: true,\n        checkArity: true,\n        raw: false,\n        exceptionHandler: null,\n        pauseEvents: true,\n        memory: false,\n        cancelableAjax: true,\n        processArguments: true,\n        linksNoReferrer: false,\n        processRPCResponse: null,\n        completionEscape: true,\n        convertLinks: true,\n        extra: {},\n        historyState: false,\n        importHistory: false,\n        echoCommand: true,\n        scrollOnEcho: true,\n        login: null,\n        outputLimit: -1,\n        formatters: [$.terminal.nested_formatting],\n        onAjaxError: null,\n        scrollBottomOffset: 20,\n        wordAutocomplete: true,\n        clickTimeout: 200,\n        request: $.noop,\n        response: $.noop,\n        onRPCError: null,\n        completion: false,\n        historyFilter: null,\n        softPause: false,\n        onInit: $.noop,\n        onClear: $.noop,\n        onBlur: $.noop,\n        onFocus: $.noop,\n        onTerminalChange: $.noop,\n        onExit: $.noop,\n        onPush: $.noop,\n        onPop: $.noop,\n        keypress: $.noop,\n        keydown: $.noop,\n        strings: {\n            comletionParameters: 'From version 1.0.0 completion function need to' +\n                ' have two arguments',\n            wrongPasswordTryAgain: 'Wrong password try again!',\n            wrongPassword: 'Wrong password!',\n            ajaxAbortError: 'Error while aborting ajax call!',\n            wrongArity: \"Wrong number of arguments. Function '%s' expects %s got\" +\n                ' %s!',\n            commandNotFound: \"Command '%s' Not Found!\",\n            oneRPCWithIgnore: 'You can use only one rpc with ignoreSystemDescr' +\n                'ibe or rpc without system.describe',\n            oneInterpreterFunction: \"You can't use more than one function (rpc \" +\n                'without system.describe or with option ignoreSystemDescribe cou' +\n                 'nts as one)',\n            loginFunctionMissing: \"You didn't specify a login function\",\n            noTokenError: 'Access denied (no token)',\n            serverResponse: 'Server responded',\n            wrongGreetings: 'Wrong value of greetings parameter',\n            notWhileLogin: \"You can't call `%s' function while in login\",\n            loginIsNotAFunction: 'Authenticate must be a function',\n            canExitError: \"You can't exit from main interpreter\",\n            invalidCompletion: 'Invalid completion',\n            invalidSelector: 'Sorry, but terminal said that \"%s\" is not valid ' +\n                'selector!',\n            invalidTerminalId: 'Invalid Terminal ID',\n            login: 'login',\n            password: 'password',\n            recursiveCall: 'Recursive call detected, skip',\n            notAString: '%s function: argument is not a string',\n            redrawError: 'Internal error, wrong position in cmd redraw',\n            invalidStrings: 'Command %s have unclosed strings'\n        }\n    };\n    // -------------------------------------------------------------------------\n    // :: All terminal globals\n    // -------------------------------------------------------------------------\n    var requests = []; // for canceling on CTRL+D\n    var terminals = new Cycle(); // list of terminals global in this scope\n    // state for all terminals, terminals can't have own array fo state because\n    // there is only one popstate event\n    var save_state = []; // hold objects returned by export_view by history API\n    var hash_commands;\n    var change_hash = false; // don't change hash on Init\n    var fire_hash_change = true;\n    var first_instance = true; // used by history state\n    $.fn.terminal = function(init_interpreter, options) {\n        function StorageHelper(memory) {\n            if (memory) {\n                this.storage = {};\n            }\n            this.set = function(key, value) {\n                if (memory) {\n                    this.storage[key] = value;\n                } else {\n                    $.Storage.set(key, value);\n                }\n            };\n            this.get = function(key) {\n                if (memory) {\n                    return this.storage[key];\n                } else {\n                    return $.Storage.get(key);\n                }\n            };\n            this.remove = function(key) {\n                if (memory) {\n                    delete this.storage[key];\n                } else {\n                    $.Storage.remove(key);\n                }\n            };\n        }\n        // ---------------------------------------------------------------------\n        // :: helper function\n        // ---------------------------------------------------------------------\n        function get_processed_command(command) {\n            if ($.terminal.unclosed_strings(command)) {\n                var string = $.terminal.escape_brackets(command);\n                throw new Error(sprintf(strings().invalidStrings, \"`\" + string + \"`\"));\n            } else if ($.isFunction(settings.processArguments)) {\n                return process_command(command, settings.processArguments);\n            } else if (settings.processArguments) {\n                return $.terminal.parse_command(command);\n            } else {\n                return $.terminal.split_command(command);\n            }\n        }\n        // ---------------------------------------------------------------------\n        // :: Display object on terminal\n        // ---------------------------------------------------------------------\n        function display_object(object) {\n            if (typeof object === 'string') {\n                self.echo(object);\n            } else if (object instanceof Array) {\n                self.echo($.map(object, function(object) {\n                    return JSON.stringify(object);\n                }).join(' '));\n            } else if (typeof object === 'object') {\n                self.echo(JSON.stringify(object));\n            } else {\n                self.echo(object);\n            }\n        }\n        // Display line code in the file if line numbers are present\n        function print_line(url_spec) {\n            var re = /(.*):([0-9]+):([0-9]+)$/;\n            // google chrome have line and column after filename\n            var m = url_spec.match(re);\n            if (m) {\n                // TODO: do we need to call pause/resume or return promise?\n                self.pause(settings.softPause);\n                $.get(m[1], function(response) {\n                    var prefix = location.href.replace(/[^/]+$/, '');\n                    var file = m[1].replace(prefix, '');\n                    self.echo('[[b;white;]' + file + ']');\n                    var code = response.split('\\n');\n                    var n = +m[2] - 1;\n                    self.echo(code.slice(n - 2, n + 3).map(function(line, i) {\n                        if (i === 2) {\n                            line = '[[;#f00;]' +\n                                $.terminal.escape_brackets(line) + ']';\n                        }\n                        return '[' + (n + i) + ']: ' + line;\n                    }).join('\\n')).resume();\n                }, 'text');\n            }\n        }\n        // ---------------------------------------------------------------------\n        // :: Helper function\n        // ---------------------------------------------------------------------\n        function display_json_rpc_error(error) {\n            if ($.isFunction(settings.onRPCError)) {\n                settings.onRPCError.call(self, error);\n            } else {\n                self.error('&#91;RPC&#93; ' + error.message);\n                if (error.error && error.error.message) {\n                    error = error.error;\n                    // more detailed error message\n                    var msg = '\\t' + error.message;\n                    if (error.file) {\n                        msg += ' in file \"' + error.file.replace(/.*\\//, '') + '\"';\n                    }\n                    if (error.at) {\n                        msg += ' at line ' + error.at;\n                    }\n                    self.error(msg);\n                }\n            }\n        }\n        // ---------------------------------------------------------------------\n        // :: Create interpreter function from url string\n        // ---------------------------------------------------------------------\n        function make_basic_json_rpc(url, auth) {\n            var interpreter = function(method, params) {\n                self.pause(settings.softPause);\n                $.jrpc({\n                    url: url,\n                    method: method,\n                    params: params,\n                    request: function request(jxhr, request) {\n                        try {\n                            settings.request.apply(self, jxhr, request, self);\n                        } catch (e) {\n                            display_exception(e, 'USER');\n                        }\n                    },\n                    response: function response(jxhr, response) {\n                        try {\n                            settings.response.apply(self, jxhr, response, self);\n                        } catch (e) {\n                            display_exception(e, 'USER');\n                        }\n                    },\n                    success: function success(json) {\n                        if (json.error) {\n                            display_json_rpc_error(json.error);\n                        } else if ($.isFunction(settings.processRPCResponse)) {\n                            settings.processRPCResponse.call(self, json.result, self);\n                        } else {\n                            display_object(json.result);\n                        }\n                        self.resume();\n                    },\n                    error: ajax_error\n                });\n            };\n            // this is the interpreter function\n            return function(command, terminal) {\n                if (command === '') {\n                    return;\n                }\n                try {\n                    command = get_processed_command(command);\n                } catch (e) {\n                    // exception can be thrown on invalid regex\n                    display_exception(e, 'TERMINAL (get_processed_command)');\n                    return;\n                    // throw e; // this will show stack in other try..catch\n                }\n                if (!auth || command.name === 'help') {\n                    // allows to call help without a token\n                    interpreter(command.name, command.args);\n                } else {\n                    var token = terminal.token();\n                    if (token) {\n                        interpreter(command.name, [token].concat(command.args));\n                    } else {\n                        // should never happen\n                        terminal.error('&#91;AUTH&#93; ' +\n                                       strings().noTokenError);\n                    }\n                }\n            };\n        }\n        // ---------------------------------------------------------------------\n        // :: Create interpreter function from Object. If the value is object\n        // :: it will create nested interpreters\n        // ---------------------------------------------------------------------\n        function make_object_interpreter(object, arity, login, fallback) {\n            // function that maps commands to object methods\n            // it keeps terminal context\n            return function(user_command, terminal) {\n                if (user_command === '') {\n                    return;\n                }\n                // command = split_command_line(command);\n                var command;\n                try {\n                    command = get_processed_command(user_command);\n                } catch (e) {\n                    // exception can be thrown on invalid regex\n                    if ($.isFunction(settings.exception)) {\n                        settings.exception(e, self);\n                    } else {\n                        self.error(e.toString());\n                    }\n                    return;\n                    // throw e; // this will show stack in other try..catch\n                }\n                /*\n                if (login) {\n                    var token = self.token(true);\n                    if (token) {\n                        command.args = [token].concat(command.args);\n                    } else {\n                        terminal.error('&#91;AUTH&#93; ' + strings.noTokenError);\n                        return;\n                    }\n                }*/\n                var val = object[command.name];\n                var type = $.type(val);\n                if (type === 'function') {\n                    if (arity && val.length !== command.args.length) {\n                        self.error('&#91;Arity&#93; ' +\n                                   sprintf(strings().wrongArity,\n                                           command.name,\n                                           val.length,\n                                           command.args.length));\n                    } else {\n                        return val.apply(self, command.args);\n                    }\n                } else if (type === 'object' || type === 'string') {\n                    var commands = [];\n                    if (type === 'object') {\n                        commands = Object.keys(val);\n                        val = make_object_interpreter(val,\n                                                      arity,\n                                                      login);\n                    }\n                    terminal.push(val, {\n                        prompt: command.name + '> ',\n                        name: command.name,\n                        completion: type === 'object' ? commands : undefined\n                    });\n                } else if ($.isFunction(fallback)) {\n                    fallback(user_command, self);\n                } else if ($.isFunction(settings.onCommandNotFound)) {\n                    settings.onCommandNotFound.call(self, user_command, self);\n                } else {\n                    terminal.error(sprintf(strings().commandNotFound, command.name));\n                }\n            };\n        }\n        // ---------------------------------------------------------------------\n        function ajax_error(xhr, status, error) {\n            self.resume(); // onAjaxError can use pause/resume call it first\n            if ($.isFunction(settings.onAjaxError)) {\n                settings.onAjaxError.call(self, xhr, status, error);\n            } else if (status !== 'abort') {\n                self.error('&#91;AJAX&#93; ' + status + ' - ' +\n                           strings().serverResponse + ':\\n' +\n                           $.terminal.escape_brackets(xhr.responseText));\n            }\n        }\n        // ---------------------------------------------------------------------\n        function make_json_rpc_object(url, auth, success) {\n            function jrpc_success(json) {\n                if (json.error) {\n                    display_json_rpc_error(json.error);\n                } else if ($.isFunction(settings.processRPCResponse)) {\n                    settings.processRPCResponse.call(self, json.result, self);\n                } else {\n                    display_object(json.result);\n                }\n                self.resume();\n            }\n            function jrpc_request(jxhr, request) {\n                try {\n                    settings.request.call(self, jxhr, request, self);\n                } catch (e) {\n                    display_exception(e, 'USER');\n                }\n            }\n            function jrpc_response(jxhr, response) {\n                try {\n                    settings.response.call(self, jxhr, response, self);\n                } catch (e) {\n                    display_exception(e, 'USER');\n                }\n            }\n            function response(ret) {\n                if (ret.procs) {\n                    var interpreter_object = {};\n                    $.each(ret.procs, function(_, proc) {\n                        interpreter_object[proc.name] = function() {\n                            var append = auth && proc.name !== 'help';\n                            var args = Array.prototype.slice.call(arguments);\n                            var args_len = args.length + (append ? 1 : 0);\n                            if (settings.checkArity && proc.params &&\n                                proc.params.length !== args_len) {\n                                self.error('&#91;Arity&#93; ' +\n                                           sprintf(strings().wrongArity,\n                                                   proc.name,\n                                                   proc.params.length,\n                                                   args_len));\n                            } else {\n                                self.pause(settings.softPause);\n                                if (append) {\n                                    var token = self.token(true);\n                                    if (token) {\n                                        args = [token].concat(args);\n                                    } else {\n                                        self.error('&#91;AUTH&#93; ' +\n                                                   strings().noTokenError);\n                                    }\n                                }\n                                $.jrpc({\n                                    url: url,\n                                    method: proc.name,\n                                    params: args,\n                                    request: jrpc_request,\n                                    response: jrpc_response,\n                                    success: jrpc_success,\n                                    error: ajax_error\n                                });\n                            }\n                        };\n                    });\n                    interpreter_object.help = interpreter_object.help || function(fn) {\n                        if (typeof fn === 'undefined') {\n                            var names = ret.procs.map(function(proc) {\n                                return proc.name;\n                            }).join(', ') + ', help';\n                            self.echo('Available commands: ' + names);\n                        } else {\n                            var found = false;\n                            $.each(ret.procs, function(_, proc) {\n                                if (proc.name === fn) {\n                                    found = true;\n                                    var msg = '';\n                                    msg += '[[bu;#fff;]' + proc.name + ']';\n                                    if (proc.params) {\n                                        msg += ' ' + proc.params.join(' ');\n                                    }\n                                    if (proc.help) {\n                                        msg += '\\n' + proc.help;\n                                    }\n                                    self.echo(msg);\n                                    return false;\n                                }\n                            });\n                            if (!found) {\n                                if (fn === 'help') {\n                                    self.echo('[[bu;#fff;]help] [method]\\ndisplay help ' +\n                                              'for the method or list of methods if not' +\n                                              ' specified');\n                                } else {\n                                    var msg = 'Method `' + fn + \"' not found \";\n                                    self.error(msg);\n                                }\n                            }\n                        }\n                    };\n                    success(interpreter_object);\n                } else {\n                    success(null);\n                }\n            }\n            return $.jrpc({\n                url: url,\n                method: 'system.describe',\n                params: [],\n                success: response,\n                request: function request(jxhr, request) {\n                    try {\n                        settings.request.call(self, jxhr, request, self);\n                    } catch (e) {\n                        display_exception(e, 'USER');\n                    }\n                },\n                response: function response(jxhr, response) {\n                    try {\n                        settings.response.call(self, jxhr, response, self);\n                    } catch (e) {\n                        display_exception(e, 'USER');\n                    }\n                },\n                error: function error() {\n                    success(null);\n                }\n            });\n        }\n        // ---------------------------------------------------------------------\n        function make_interpreter(user_intrp, login, finalize) {\n            finalize = finalize || $.noop;\n            var type = $.type(user_intrp);\n            var object;\n            var result = {};\n            var rpc_count = 0; // only one rpc can be use for array\n            var fn_interpreter;\n            if (type === 'array') {\n                object = {};\n                // recur will be called when previous acync call is finished\n                (function recur(interpreters, success) {\n                    if (interpreters.length) {\n                        var first = interpreters[0];\n                        var rest = interpreters.slice(1);\n                        var type = $.type(first);\n                        if (type === 'string') {\n                            self.pause(settings.softPause);\n                            if (settings.ignoreSystemDescribe) {\n                                if (++rpc_count === 1) {\n                                    fn_interpreter = make_basic_json_rpc(first, login);\n                                } else {\n                                    self.error(strings().oneRPCWithIgnore);\n                                }\n                                recur(rest, success);\n                            } else {\n                                make_json_rpc_object(first, login, function(new_obj) {\n                                    if (new_obj) {\n                                        $.extend(object, new_obj);\n                                    } else if (++rpc_count === 1) {\n                                        fn_interpreter = make_basic_json_rpc(\n                                            first,\n                                            login\n                                        );\n                                    } else {\n                                        self.error(strings().oneRPCWithIgnore);\n                                    }\n                                    self.resume();\n                                    recur(rest, success);\n                                });\n                            }\n                        } else if (type === 'function') {\n                            if (fn_interpreter) {\n                                self.error(strings().oneInterpreterFunction);\n                            } else {\n                                fn_interpreter = first;\n                            }\n                            recur(rest, success);\n                        } else if (type === 'object') {\n                            $.extend(object, first);\n                            recur(rest, success);\n                        }\n                    } else {\n                        success();\n                    }\n                })(user_intrp, function() {\n                    finalize({\n                        interpreter: make_object_interpreter(object,\n                                                             false,\n                                                             login,\n                                                             fn_interpreter.bind(self)),\n                        completion: Object.keys(object)\n                    });\n                });\n            } else if (type === 'string') {\n                if (settings.ignoreSystemDescribe) {\n                    object = {\n                        interpreter: make_basic_json_rpc(user_intrp, login)\n                    };\n                    if ($.isArray(settings.completion)) {\n                        object.completion = settings.completion;\n                    }\n                    finalize(object);\n                } else {\n                    self.pause(settings.softPause);\n                    make_json_rpc_object(user_intrp, login, function(object) {\n                        if (object) {\n                            result.interpreter = make_object_interpreter(object,\n                                                                         false,\n                                                                         login);\n                            result.completion = Object.keys(object);\n                        } else {\n                            // no procs in system.describe\n                            result.interpreter = make_basic_json_rpc(user_intrp, login);\n                        }\n                        finalize(result);\n                        self.resume();\n                    });\n                }\n            } else if (type === 'object') {\n                finalize({\n                    interpreter: make_object_interpreter(user_intrp,\n                                                         settings.checkArity),\n                    completion: Object.keys(user_intrp)\n                });\n            } else {\n                // allow $('<div/>').terminal();\n                if (type === 'undefined') {\n                    user_intrp = $.noop;\n                } else if (type !== 'function') {\n                    throw new Error(type + ' is invalid interpreter value');\n                }\n                // single function don't need bind\n                finalize({\n                    interpreter: user_intrp,\n                    completion: settings.completion\n                });\n            }\n        }\n        // ---------------------------------------------------------------------\n        // :: Create JSON-RPC authentication function\n        // ---------------------------------------------------------------------\n        function make_json_rpc_login(url, login) {\n            var method = $.type(login) === 'boolean' ? 'login' : login;\n            return function(user, passwd, callback) {\n                self.pause(settings.softPause);\n                $.jrpc({\n                    url: url,\n                    method: method,\n                    params: [user, passwd],\n                    request: function request(jxhr, request) {\n                        try {\n                            settings.request.call(self, jxhr, request, self);\n                        } catch (e) {\n                            display_exception(e, 'USER');\n                        }\n                    },\n                    response: function response(jxhr, response) {\n                        try {\n                            settings.response.call(self, jxhr, response, self);\n                        } catch (e) {\n                            display_exception(e, 'USER');\n                        }\n                    },\n                    success: function success(response) {\n                        if (!response.error && response.result) {\n                            callback(response.result);\n                        } else {\n                            // null will trigger message that login fail\n                            callback(null);\n                        }\n                        self.resume();\n                    },\n                    error: ajax_error\n                });\n            };\n            // default name is login so you can pass true\n        }\n        // ---------------------------------------------------------------------\n        // :: Return exception message as string\n        // ---------------------------------------------------------------------\n        function exception_message(e) {\n            if (typeof e === 'string') {\n                return e;\n            } else if (typeof e.fileName === 'string') {\n                return e.fileName + ': ' + e.message;\n            } else {\n                return e.message;\n            }\n        }\n        // ---------------------------------------------------------------------\n        // :: display Exception on terminal\n        // ---------------------------------------------------------------------\n        function display_exception(e, label) {\n            if ($.isFunction(settings.exceptionHandler)) {\n                settings.exceptionHandler.call(self, e, label);\n            } else {\n                self.exception(e, label);\n            }\n        }\n        // ---------------------------------------------------------------------\n        function scroll_to_bottom() {\n            var scrollHeight;\n            if (scroll_object.prop) {\n                scrollHeight = scroll_object.prop('scrollHeight');\n            } else {\n                scrollHeight = scroll_object.attr('scrollHeight');\n            }\n            scroll_object.scrollTop(scrollHeight);\n        }\n        // ---------------------------------------------------------------------\n        // :: validating if object is a string or a function, call that function\n        // :: and display the exeption if any\n        // ---------------------------------------------------------------------\n        function validate(label, object) {\n            try {\n                if ($.isFunction(object)) {\n                    object.call(self, $.noop, self);\n                } else if (typeof object !== 'string') {\n                    var msg = label + ' must be string or function';\n                    throw msg;\n                }\n            } catch (e) {\n                display_exception(e, label.toUpperCase());\n                return false;\n            }\n            return true;\n        }\n        // ---------------------------------------------------------------------\n        // :: Draw line - can have line breaks and be longer than the width of\n        // :: the terminal, there are 2 options raw and finalize\n        // :: raw - will not encode the string and finalize if a function that\n        // :: will have div container of the line as first argument\n        // :: NOTE: it formats and appends lines to output_buffer. The actual\n        // :: append to terminal output happens in the flush function\n        // ---------------------------------------------------------------------\n        var output_buffer = [];\n        var NEW_LINE = 1;\n        function buffer_line(string, options) {\n            // urls should always have formatting to keep url if split\n            if (settings.convertLinks && !options.raw) {\n                string = string.replace(email_re, '[[!;;]$1]').\n                    replace(url_nf_re, '[[!;;]$1]');\n            }\n            var formatters = $.terminal.defaults.formatters;\n            var i, len;\n            if (!options.raw) {\n                if (options.formatters) {\n                    // format using user defined formatters\n                    for (i = 0; i < formatters.length; ++i) {\n                        try {\n                            if (typeof formatters[i] === 'function') {\n                                var ret = formatters[i](string);\n                                if (typeof ret === 'string') {\n                                    string = ret;\n                                }\n                            }\n                        } catch (e) {\n                            // display_exception(e, 'FORMATTING');\n                            if ($.isFunction(settings.exceptionHandler)) {\n                                settings.exceptionHandler.call(self, e, 'FORMATTERS');\n                            } else {\n                                alert('formatting error at formatters[' + i + ']\\n' +\n                                      (e.stack ? e.stack : e));\n                            }\n                        }\n                    }\n                }\n                string = $.terminal.encode(string);\n            }\n            output_buffer.push(NEW_LINE);\n            if (!options.raw && (string.length > num_chars ||\n                                       string.match(/\\n/)) &&\n                ((settings.wrap === true && options.wrap === undefined) ||\n                  settings.wrap === false && options.wrap === true)) {\n                var words = options.keepWords;\n                var array = $.terminal.split_equal(string, num_chars, words);\n                for (i = 0, len = array.length; i < len; ++i) {\n                    if (array[i] === '' || array[i] === '\\r') {\n                        output_buffer.push('<span></span>');\n                    } else if (options.raw) {\n                        output_buffer.push(array[i]);\n                    } else {\n                        output_buffer.push($.terminal.format(array[i], {\n                            linksNoReferrer: settings.linksNoReferrer\n                        }));\n                    }\n                }\n            } else if (!options.raw) {\n                string = $.terminal.format(string, {\n                    linksNoReferrer: settings.linksNoReferrer\n                });\n                string.split(/\\n/).forEach(function(string) {\n                    output_buffer.push(string);\n                });\n            } else {\n                output_buffer.push(string);\n            }\n            output_buffer.push(options.finalize);\n        }\n        // ---------------------------------------------------------------------\n        function process_line(line, options) {\n            // prevent exception in display exception\n            try {\n                var line_settings = $.extend({\n                    exec: true,\n                    raw: false,\n                    finalize: $.noop\n                }, options || {});\n                var string = $.type(line) === 'function' ? line() : line;\n                string = $.type(string) === 'string' ? string : String(string);\n                if (string !== '') {\n                    string = $.map(string.split(format_exec_re), function(string) {\n                        if (string.match(format_exec_re) &&\n                            !$.terminal.is_formatting(string)) {\n                            // redraw should not execute commands and it have\n                            // and lines variable have all extended commands\n                            string = string.replace(/^\\[\\[|\\]\\]$/g, '');\n                            if (line_settings.exec) {\n                                if (prev_command && prev_command.command === string) {\n                                    self.error(strings().recursiveCall);\n                                } else {\n                                    $.terminal.extended_command(self, string);\n                                }\n                            }\n                            return '';\n                        } else {\n                            return string;\n                        }\n                    }).join('');\n                    if (string !== '') {\n                        // string can be empty after removing extended commands\n                        buffer_line(string, line_settings);\n                    }\n                }\n            } catch (e) {\n                output_buffer = [];\n                // don't display exception if exception throw in terminal\n                if ($.isFunction(settings.exceptionHandler)) {\n                    settings.exceptionHandler.call(self, e, 'TERMINAL');\n                } else {\n                    alert('[Internal Exception(process_line)]:' +\n                          exception_message(e) + '\\n' + e.stack);\n                }\n            }\n        }\n        // ---------------------------------------------------------------------\n        // :: Redraw all lines\n        // ---------------------------------------------------------------------\n        function redraw() {\n            command_line.resize(num_chars);\n            // we don't want reflow while processing lines\n            var detached_output = output.empty().detach();\n            var lines_to_show = [];\n            // Dead code\n            if (settings.outputLimit >= 0) {\n                // flush will limit lines but if there is lot of\n                // lines we don't need to show them and then remove\n                // them from terminal\n                var limit;\n                if (settings.outputLimit === 0) {\n                    limit = self.rows();\n                } else {\n                    limit = settings.outputLimit;\n                }\n                lines.forEach(function(line) {\n                    var string = $.type(line[0]) === 'function' ? line[0]() : line[0];\n                    string = $.type(string) === 'string' ? string : String(string);\n                    if (string.length > num_chars) {\n                        var options = line[1];\n                        var splitted = $.terminal.split_equal(\n                            string,\n                            num_chars,\n                            options.keepWords\n                        );\n                        lines_to_show = lines_to_show.concat(splitted.map(function(line) {\n                            return [line, options];\n                        }));\n                    } else {\n                        lines_to_show.push(line);\n                    }\n                });\n                lines_to_show = lines_to_show.slice(lines_to_show.length - limit - 1);\n            } else {\n                lines_to_show = lines;\n            }\n            try {\n                output_buffer = [];\n                $.each(lines, function(i, line) {\n                    process_line.apply(null, line); // line is an array\n                });\n                command_line.before(detached_output); // reinsert output\n                self.flush();\n            } catch (e) {\n                if ($.isFunction(settings.exceptionHandler)) {\n                    settings.exceptionHandler.call(self, e, 'TERMINAL (redraw)');\n                } else {\n                    alert('Exception in redraw\\n' + e.stack);\n                }\n            }\n        }\n        // ---------------------------------------------------------------------\n        // :: Display user greetings or terminal signature\n        // ---------------------------------------------------------------------\n        function show_greetings() {\n            if (settings.greetings === undefined) {\n                // signature have ascii art so it's not suite for screen readers\n                self.echo(self.signature, {finalize: a11y_hide});\n            } else if (settings.greetings) {\n                var type = typeof settings.greetings;\n                if (type === 'string') {\n                    self.echo(settings.greetings);\n                } else if (type === 'function') {\n                    settings.greetings.call(self, self.echo);\n                } else {\n                    self.error(strings().wrongGreetings);\n                }\n            }\n        }\n        // ---------------------------------------------------------------------\n        // :: Display prompt and last command\n        // ---------------------------------------------------------------------\n        function echo_command(command) {\n            if (typeof command === 'undefined') {\n                command = self.get_command();\n            }\n            var prompt = command_line.prompt();\n            var mask = command_line.mask();\n            switch (typeof mask) {\n                case 'string':\n                    command = command.replace(/./g, mask);\n                    break;\n                case 'boolean':\n                    if (mask) {\n                        command = command.replace(/./g, settings.maskChar);\n                    } else {\n                        command = $.terminal.escape_formatting(command);\n                    }\n                    break;\n            }\n            var options = {\n                finalize: function finalize(div) {\n                    a11y_hide(div.addClass('command'));\n                }\n            };\n            if ($.isFunction(prompt)) {\n                prompt(function(string) {\n                    self.echo(string + command, options);\n                });\n            } else {\n                self.echo(prompt + command, options);\n            }\n        }\n        // ---------------------------------------------------------------------\n        // :: Helper function that restore state. Call import_view or exec\n        // ---------------------------------------------------------------------\n        function restore_state(spec) {\n            // spec [terminal_id, state_index, command]\n            var terminal = terminals.get()[spec[0]];\n            if (!terminal) {\n                throw new Error(strings().invalidTerminalId);\n            }\n            var command_idx = spec[1];\n            if (save_state[command_idx]) { // state exists\n                terminal.import_view(save_state[command_idx]);\n            } else {\n                // restore state\n                change_hash = false;\n                var command = spec[2];\n                if (command) {\n                    terminal.exec(command).done(function() {\n                        change_hash = true;\n                        save_state[command_idx] = terminal.export_view();\n                    });\n                }\n            }\n            /*if (spec[3].length) {\n                restore_state(spec[3]);\n            }*/\n        }\n        // ---------------------------------------------------------------------\n        // :: Helper function\n        // ---------------------------------------------------------------------\n        function maybe_update_hash() {\n            if (change_hash) {\n                fire_hash_change = false;\n                location.hash = '#' + JSON.stringify(hash_commands);\n                setTimeout(function() {\n                    fire_hash_change = true;\n                }, 100);\n            }\n        }\n        // ---------------------------------------------------------------------\n        // :: Wrapper over interpreter, it implements exit and catches all\n        // :: exeptions from user code and displays them on the terminal\n        // ---------------------------------------------------------------------\n        var first_command = true;\n        var resume_callbacks = [];\n        function commands(command, silent, exec) {\n            // first command store state of the terminal before the command get\n            // executed\n            if (first_command) {\n                first_command = false;\n                // execHash need first empty command too\n                if (settings.historyState || settings.execHash && exec) {\n                    if (!save_state.length) {\n                        // first command in first terminal don't have hash\n                        self.save_state();\n                    } else {\n                        self.save_state(null);\n                    }\n                }\n            }\n            function after_exec() {\n                // variables defined later in commands\n                if (!exec) {\n                    change_hash = true;\n                    if (settings.historyState) {\n                        self.save_state(command, false);\n                    }\n                    change_hash = saved_change_hash;\n                }\n                deferred.resolve();\n                if ($.isFunction(settings.onAfterCommand)) {\n                    settings.onAfterCommand.call(self, self, command);\n                }\n            }\n            try {\n                // this callback can disable commands\n                if ($.isFunction(settings.onBeforeCommand)) {\n                    if (settings.onBeforeCommand.call(self, self, command) === false) {\n                        return;\n                    }\n                }\n                if (!exec) {\n                    prev_command = $.terminal.split_command(command);\n                }\n                if (!ghost()) {\n                    // exec execute this function wihout the help of cmd plugin\n                    // that add command to history on enter\n                    if (exec && ($.isFunction(settings.historyFilter) &&\n                                 settings.historyFilter(command) ||\n                                 command.match(settings.historyFilter))) {\n                        command_line.history().append(command);\n                    }\n                }\n                var interpreter = interpreters.top();\n                if (!silent && settings.echoCommand) {\n                    echo_command(command);\n                }\n                // new promise will be returned to exec that will resolve his\n                // returned promise\n                var deferred = new $.Deferred();\n                // we need to save sate before commands is deleyd because\n                // execute_extended_command disable it and it can be executed\n                // after delay\n                var saved_change_hash = change_hash;\n                if (command.match(/^\\s*login\\s*$/) && self.token(true)) {\n                    if (self.level() > 1) {\n                        self.logout(true);\n                    } else {\n                        self.logout();\n                    }\n                    after_exec();\n                } else if (settings.exit && command.match(/^\\s*exit\\s*$/) &&\n                           !in_login) {\n                    var level = self.level();\n                    if (level === 1 && self.get_token() || level > 1) {\n                        if (self.get_token(true)) {\n                            self.set_token(undefined, true);\n                        }\n                        self.pop();\n                    }\n                    after_exec();\n                } else if (settings.clear && command.match(/^\\s*clear\\s*$/) &&\n                           !in_login) {\n                    self.clear();\n                    after_exec();\n                } else {\n                    var position = lines.length - 1;\n                    // Call user interpreter function\n                    var result = interpreter.interpreter.call(self, command, self);\n                    if (result !== undefined) {\n                        // auto pause/resume when user return promises\n                        self.pause(settings.softPause);\n                        return $.when(result).done(function(result) {\n                            // don't echo result if user echo something\n                            if (result && position === lines.length - 1) {\n                                display_object(result);\n                            }\n                            after_exec();\n                            self.resume();\n                        });\n                    } else if (paused) {\n                        resume_callbacks.push(function() {\n                            // exec with resume/pause in user code\n                            after_exec();\n                        });\n                    } else {\n                        after_exec();\n                    }\n                }\n                return deferred.promise();\n            } catch (e) {\n                display_exception(e, 'USER');\n                self.resume();\n                throw e;\n            }\n        }\n        // ---------------------------------------------------------------------\n        // :: The logout function removes Storage, disables history and runs\n        // :: the login function. This function is called only when options.login\n        // :: function is defined. The check for this is in the self.pop method\n        // ---------------------------------------------------------------------\n        function global_logout() {\n            if ($.isFunction(settings.onBeforeLogout)) {\n                try {\n                    if (settings.onBeforeLogout.call(self, self) === false) {\n                        return;\n                    }\n                } catch (e) {\n                    display_exception(e, 'onBeforeLogout');\n                }\n            }\n            clear_loging_storage();\n            if ($.isFunction(settings.onAfterLogout)) {\n                try {\n                    settings.onAfterLogout.call(self, self);\n                } catch (e) {\n                    display_exception(e, 'onAfterlogout');\n                }\n            }\n            self.login(settings.login, true, initialize);\n        }\n        // ---------------------------------------------------------------------\n        function clear_loging_storage() {\n            var name = self.prefix_name(true) + '_';\n            storage.remove(name + 'token');\n            storage.remove(name + 'login');\n        }\n        // ---------------------------------------------------------------------\n        // :: Save the interpreter name for use with purge\n        // ---------------------------------------------------------------------\n        function maybe_append_name(interpreter_name) {\n            var storage_key = self.prefix_name() + '_interpreters';\n            var names = storage.get(storage_key);\n            if (names) {\n                names = JSON.parse(names);\n            } else {\n                names = [];\n            }\n            if ($.inArray(interpreter_name, names) === -1) {\n                names.push(interpreter_name);\n                storage.set(storage_key, JSON.stringify(names));\n            }\n        }\n        // ---------------------------------------------------------------------\n        // :: Function enables history, sets prompt, runs interpreter function\n        // ---------------------------------------------------------------------\n        function prepare_top_interpreter(silent) {\n            var interpreter = interpreters.top();\n            var name = self.prefix_name(true);\n            if (!ghost()) {\n                maybe_append_name(name);\n            }\n            command_line.name(name);\n            if ($.isFunction(interpreter.prompt)) {\n                command_line.prompt(function(command) {\n                    interpreter.prompt.call(self, command, self);\n                });\n            } else {\n                command_line.prompt(interpreter.prompt);\n            }\n            if ($.isPlainObject(interpreter.keymap)) {\n                command_line.keymap($.omap(interpreter.keymap, function(name, fun) {\n                    return function() {\n                        var args = [].slice.call(arguments);\n                        try {\n                            return fun.apply(self, args);\n                        } catch (e) {\n                            display_exception(e, 'USER KEYMAP');\n                            throw e;\n                        }\n                    };\n                }));\n            }\n            command_line.set('');\n            init_queue.resolve();\n            if (!silent && $.isFunction(interpreter.onStart)) {\n                interpreter.onStart.call(self, self);\n            }\n        }\n        // ---------------------------------------------------------------------\n        function hashchange() {\n            if (fire_hash_change && settings.execHash) {\n                try {\n                    if (location.hash) {\n                        var hash = location.hash.replace(/^#/, '');\n                        hash_commands = JSON.parse(decodeURIComponent(hash));\n                    } else {\n                        hash_commands = [];\n                    }\n                    if (hash_commands.length) {\n                        restore_state(hash_commands[hash_commands.length - 1]);\n                    } else if (save_state[0]) {\n                        self.import_view(save_state[0]);\n                    }\n                } catch (e) {\n                    display_exception(e, 'TERMINAL');\n                }\n            }\n        }\n        // ---------------------------------------------------------------------\n        function initialize() {\n            prepare_top_interpreter();\n            show_greetings();\n            if (lines.length) {\n                redraw(); // for case when showing long error before init\n            }\n            // was_paused flag is workaround for case when user call exec before\n            // login and pause in onInit, 3rd exec will have proper timing (will\n            // execute after onInit resume)\n            var was_paused = false;\n            if ($.isFunction(settings.onInit)) {\n                onPause = function() { // local in terminal\n                    was_paused = true;\n                };\n                try {\n                    settings.onInit.call(self, self);\n                } catch (e) {\n                    display_exception(e, 'OnInit');\n                    // throw e; // it will be catched by terminal\n                } finally {\n                    onPause = $.noop;\n                    if (!was_paused && self.enabled()) {\n                        // resume login if user didn't call pause in onInit\n                        // if user pause in onInit wait with exec until it\n                        // resume\n                        self.resume();\n                    }\n                }\n            }\n            if (first_instance) {\n                first_instance = false;\n                $(window).on('hashchange', hashchange);\n            }\n        }\n        // ---------------------------------------------------------------------\n        // :: If Ghost don't store anything in localstorage\n        // ---------------------------------------------------------------------\n        function ghost() {\n            return in_login || command_line.mask() !== false;\n        }\n        // ---------------------------------------------------------------------\n        // :: return string that are common in all elements of the array\n        // ---------------------------------------------------------------------\n        function common_string(string, array) {\n            if (!array.length) {\n                return '';\n            }\n            var found = false;\n            loop:\n            for (var j = string.length; j < array[0].length; ++j) {\n                for (var i = 1; i < array.length; ++i) {\n                    if (array[0].charAt(j) !== array[i].charAt(j)) {\n                        break loop;\n                    }\n                }\n                found = true;\n            }\n            if (found) {\n                return array[0].slice(0, j);\n            }\n            return '';\n        }\n        // ---------------------------------------------------------------------\n        // :: Keydown event handler\n        // ---------------------------------------------------------------------\n        function user_key_down(e) {\n            var result, top = interpreters.top();\n            if ($.isFunction(top.keydown)) {\n                result = top.keydown.call(self, e, self);\n                if (result !== undefined) {\n                    return result;\n                }\n            } else if ($.isFunction(settings.keydown)) {\n                result = settings.keydown.call(self, e, self);\n                if (result !== undefined) {\n                    return result;\n                }\n            }\n        }\n        var keymap = {\n            'CTRL+D': function(e, original) {\n                if (!in_login) {\n                    if (command_line.get() === '') {\n                        if (interpreters.size() > 1 ||\n                            settings.login !== undefined) {\n                            self.pop('');\n                        } else {\n                            self.resume();\n                            self.echo('');\n                        }\n                    } else {\n                        original();\n                    }\n                }\n                return false;\n            },\n            'CTRL+L': function() {\n                self.clear();\n            },\n            'TAB': function(e, orignal) {\n                // TODO: move this to cmd plugin\n                //       add completion = array | function\n                //       !!! Problem complete more then one key need terminal\n                var top = interpreters.top(), completion;\n                if (settings.completion &&\n                    $.type(settings.completion) !== 'boolean' &&\n                    top.completion === undefined) {\n                    completion = settings.completion;\n                } else {\n                    completion = top.completion;\n                }\n                if (completion === 'settings') {\n                    completion = settings.completion;\n                }\n                if (completion) {\n                    switch ($.type(completion)) {\n                        case 'function':\n                            var string = self.before_cursor(settings.wordAutocomplete);\n                            if (completion.length === 3) {\n                                var error = new Error(strings().comletionParameters);\n                                display_exception(error, 'USER');\n                                return false;\n                            }\n                            completion.call(self, string, function(commands) {\n                                self.complete(commands, {\n                                    echo: true,\n                                    word: settings.wordAutocomplete,\n                                    escape: settings.completionEscape\n                                });\n                            });\n                            break;\n                        case 'array':\n                            self.complete(completion, {\n                                echo: true,\n                                word: settings.wordAutocomplete,\n                                escape: settings.completionEscape\n                            });\n                            break;\n                        default:\n                            throw new Error(strings().invalidCompletion);\n                    }\n                } else {\n                    orignal();\n                }\n                return false;\n            },\n            'CTRL+V': function(e, original) {\n                original(e);\n                self.oneTime(200, function() {\n                    scroll_to_bottom();\n                });\n                return true;\n            },\n            'CTRL+TAB': function() {\n                if (terminals.length() > 1) {\n                    self.focus(false);\n                    return false;\n                }\n            },\n            'PAGEDOWN': function() {\n                self.scroll(self.height());\n            },\n            'PAGEUP': function() {\n                self.scroll(-self.height());\n            }\n        };\n        function key_down(e) {\n            // Prevent to be executed by cmd: CTRL+D, TAB, CTRL+TAB (if more\n            // then one terminal)\n            var result, i;\n            if (self.enabled()) {\n                if (!self.paused()) {\n                    result = user_key_down(e);\n                    if (result !== undefined) {\n                        return result;\n                    }\n                    if (e.which !== 9) { // not a TAB\n                        tab_count = 0;\n                    }\n                    self.attr({scrollTop: self.attr('scrollHeight')});\n                } else {\n                    if (!settings.pauseEvents) {\n                        result = user_key_down(e);\n                        if (result !== undefined) {\n                            return result;\n                        }\n                    }\n                    if (e.which === 68 && e.ctrlKey) { // CTRL+D (if paused)\n                        if (settings.pauseEvents) {\n                            result = user_key_down(e);\n                            if (result !== undefined) {\n                                return result;\n                            }\n                        }\n                        if (requests.length) {\n                            for (i = requests.length; i--;) {\n                                var r = requests[i];\n                                if (r.readyState !== 4) {\n                                    try {\n                                        r.abort();\n                                    } catch (error) {\n                                        if ($.isFunction(settings.exceptionHandler)) {\n                                            settings.exceptionHandler.call(self,\n                                                                           e,\n                                                                           'AJAX ABORT');\n                                        } else {\n                                            self.error(strings().ajaxAbortError);\n                                        }\n                                    }\n                                }\n                            }\n                            requests = [];\n                        }\n                        self.resume();\n                    }\n                    return false;\n                }\n            }\n        }\n        function ready(queue) {\n            return function(fun) {\n                queue.add(fun);\n            };\n        }\n        function strings() {\n            return $.extend({}, $.terminal.defaults.strings, settings.strings);\n        }\n        // ---------------------------------------------------------------------\n        var self = this;\n        if (this.length > 1) {\n            return this.each(function() {\n                $.fn.terminal.call($(this),\n                                   init_interpreter,\n                                   $.extend({name: self.selector}, options));\n            });\n        }\n        // terminal already exists\n        if (self.data('terminal')) {\n            return self.data('terminal');\n        }\n        if (self.length === 0) {\n            throw new Error(sprintf(strings().invalidSelector, self.selector));\n        }\n        // var names = []; // stack if interpreter names\n        var scroll_object;\n        var prev_command; // used for name on the terminal if not defined\n        var tab_count = 0; // for tab completion\n        // array of line objects:\n        // - function (called whenever necessary, result is printed)\n        // - array (expected form: [line, settings])\n        // - anything else (cast to string when painted)\n        var lines = [];\n        var output; // .terminal-output jquery object\n        var terminal_id = terminals.length();\n        var num_chars; // numer of chars in line\n        var num_rows; // number of lines that fit without scrollbar\n        var command; // for tab completion\n        var logins = new Stack(); // stack of logins\n        var command_queue = new DelayQueue();\n        var init_queue = new DelayQueue();\n        var when_ready = ready(init_queue);\n        var cmd_ready = ready(command_queue);\n        var in_login = false;// some Methods should not be called when login\n        // TODO: Try to use mutex like counter for pause/resume\n        var onPause = $.noop;// used to indicate that user call pause onInit\n        var old_width, old_height;\n        var delayed_commands = []; // used when exec commands while paused\n        var settings = $.extend({},\n                                $.terminal.defaults,\n                                {name: self.selector},\n                                options || {});\n        var storage = new StorageHelper(settings.memory);\n        var enabled = settings.enabled, frozen = false;\n        var paused = false;\n        var autologin = true; // set to false if onBeforeLogin return false\n        var interpreters;\n        var command_line;\n        var old_enabled;\n        var visibility_observer;\n        var mutation_observer;\n        // -----------------------------------------------------------------\n        // TERMINAL METHODS\n        // -----------------------------------------------------------------\n        $.extend(self, $.omap({\n            id: function() {\n                return terminal_id;\n            },\n            // -------------------------------------------------------------\n            // :: Clear the output\n            // -------------------------------------------------------------\n            clear: function() {\n                output.html('');\n                lines = [];\n                try {\n                    settings.onClear.call(self, self);\n                } catch (e) {\n                    display_exception(e, 'onClear');\n                }\n                self.attr({scrollTop: 0});\n                return self;\n            },\n            // -------------------------------------------------------------\n            // :: Return an object that can be used with import_view to\n            // :: restore the state\n            // -------------------------------------------------------------\n            export_view: function() {\n                var user_export = {};\n                if ($.isFunction(settings.onExport)) {\n                    try {\n                        user_export = settings.onExport.call(self);\n                    } catch (e) {\n                        display_exception(e, 'onExport');\n                    }\n                }\n                return $.extend({}, {\n                    focus: enabled,\n                    mask: command_line.mask(),\n                    prompt: self.get_prompt(),\n                    command: self.get_command(),\n                    position: command_line.position(),\n                    lines: clone(lines),\n                    interpreters: interpreters.clone(),\n                    history: command_line.history().data\n                }, user_export);\n            },\n            // -------------------------------------------------------------\n            // :: Restore the state of the previous exported view\n            // -------------------------------------------------------------\n            import_view: function(view) {\n                if (in_login) {\n                    throw new Error(sprintf(strings().notWhileLogin, 'import_view'));\n                }\n                if ($.isFunction(settings.onImport)) {\n                    try {\n                        settings.onImport.call(self, view);\n                    } catch (e) {\n                        display_exception(e, 'onImport');\n                    }\n                }\n                when_ready(function ready() {\n                    self.set_prompt(view.prompt);\n                    self.set_command(view.command);\n                    command_line.position(view.position);\n                    command_line.mask(view.mask);\n                    if (view.focus) {\n                        self.focus();\n                    }\n                    lines = clone(view.lines);\n                    interpreters = view.interpreters;\n                    if (settings.importHistory) {\n                        command_line.history().set(view.history);\n                    }\n                    redraw();\n                });\n                return self;\n            },\n            // -------------------------------------------------------------\n            // :: Store current terminal state\n            // -------------------------------------------------------------\n            save_state: function(command, ignore_hash, index) {\n                // save_state.push({view:self.export_view(), join:[]});\n                if (typeof index !== 'undefined') {\n                    save_state[index] = self.export_view();\n                } else {\n                    save_state.push(self.export_view());\n                }\n                if (!$.isArray(hash_commands)) {\n                    hash_commands = [];\n                }\n                if (command !== undefined && !ignore_hash) {\n                    var state = [\n                        terminal_id,\n                        save_state.length - 1,\n                        command\n                    ];\n                    hash_commands.push(state);\n                    maybe_update_hash();\n                }\n            },\n            // -------------------------------------------------------------\n            // :: Execute a command, it will handle commands that do AJAX\n            // :: calls and have delays, if the second argument is set to\n            // :: true it will not echo executed command\n            // -------------------------------------------------------------\n            exec: function(command, silent, deferred) {\n                var d = deferred || new $.Deferred();\n                cmd_ready(function ready() {\n                    if ($.isArray(command)) {\n                        (function recur() {\n                            var cmd = command.shift();\n                            if (cmd) {\n                                self.exec(cmd, silent).done(recur);\n                            } else {\n                                d.resolve();\n                            }\n                        })();\n                    } else if (paused) {\n                        // both commands executed here (resume will call Term::exec)\n                        // delay command multiple time\n                        delayed_commands.push([command, silent, d]);\n                    } else {\n                        // commands may return promise from user code\n                        // it will resolve exec promise when user promise\n                        // is resolved\n                        commands(command, silent, true).done(function() {\n                            d.resolve(self);\n                        });\n                    }\n                });\n                // while testing it didn't executed last exec when using this\n                // for resolved deferred\n                return d.promise();\n            },\n            // -------------------------------------------------------------\n            // :: bypass login function that wait untill you type user/pass\n            // :: it hide implementation detail\n            // -------------------------------------------------------------\n            autologin: function(user, token, silent) {\n                self.trigger('terminal.autologin', [user, token, silent]);\n                return self;\n            },\n            // -------------------------------------------------------------\n            // :: Function changes the prompt of the command line to login\n            // :: with a password and calls the user login function with\n            // :: the callback that expects a token. The login is successful\n            // :: if the user calls it with value that is truthy\n            // -------------------------------------------------------------\n            login: function(auth, infinite, success, error) {\n                logins.push([].slice.call(arguments));\n                if (in_login) {\n                    throw new Error(sprintf(strings().notWhileLogin, 'login'));\n                }\n                if (!$.isFunction(auth)) {\n                    throw new Error(strings().loginIsNotAFunction);\n                }\n                in_login = true;\n                if (self.token() && self.level() === 1 && !autologin) {\n                    in_login = false; // logout will call login\n                    self.logout(true);\n                } else if (self.token(true) && self.login_name(true)) {\n                    in_login = false;\n                    if ($.isFunction(success)) {\n                        success();\n                    }\n                    return self;\n                }\n                // don't store login data in history\n                if (settings.history) {\n                    command_line.history().disable();\n                }\n                // so we know how many times call pop\n                var level = self.level();\n                function login_callback(user, token, silent) {\n                    if (token) {\n                        while (self.level() > level) {\n                            self.pop(undefined, true);\n                        }\n                        if (settings.history) {\n                            command_line.history().enable();\n                        }\n                        var name = self.prefix_name(true) + '_';\n                        storage.set(name + 'token', token);\n                        storage.set(name + 'login', user);\n                        in_login = false;\n                        if ($.isFunction(success)) {\n                            // will be used internaly since users know\n                            // when login success (they decide when\n                            // it happen by calling the callback -\n                            // this funtion)\n                            success();\n                        }\n                    } else {\n                        if (infinite) {\n                            if (!silent) {\n                                self.error(strings().wrongPasswordTryAgain);\n                            }\n                            self.pop(undefined, true).set_mask(false);\n                        } else {\n                            in_login = false;\n                            if (!silent) {\n                                self.error(strings().wrongPassword);\n                            }\n                            self.pop(undefined, true).pop(undefined, true);\n                        }\n                        // used only to call pop in push\n                        if ($.isFunction(error)) {\n                            error();\n                        }\n                    }\n                    self.off('terminal.autologin');\n                }\n                self.on('terminal.autologin', function(event, user, token, silent) {\n                    login_callback(user, token, silent);\n                });\n                self.push(function(user) {\n                    self.set_mask(settings.maskChar).push(function(pass) {\n                        try {\n                            auth.call(self, user, pass, function(token, silent) {\n                                login_callback(user, token, silent);\n                            });\n                        } catch (e) {\n                            display_exception(e, 'AUTH');\n                        }\n                    }, {\n                        prompt: strings().password + ': ',\n                        name: 'password'\n                    });\n                }, {\n                    prompt: strings().login + ': ',\n                    name: 'login'\n                });\n                return self;\n            },\n            // -------------------------------------------------------------\n            // :: User defined settings and defaults as well\n            // -------------------------------------------------------------\n            settings: function() {\n                return settings;\n            },\n            // -------------------------------------------------------------\n            // :: Get string before cursor\n            // -------------------------------------------------------------\n            before_cursor: function(word) {\n                var pos = command_line.position();\n                var command = command_line.get().substring(0, pos);\n                var cmd_strings = command.split(' ');\n                var string; // string before cursor that will be completed\n                if (word) {\n                    if (cmd_strings.length === 1) {\n                        string = cmd_strings[0];\n                    } else {\n                        var m = command.match(/(\\\\?\")/g);\n                        var double_quotes = m ? m.filter(function(chr) {\n                            return !chr.match(/^\\\\/);\n                        }).length : 0;\n                        m = command.match(/'/g);\n                        var single_quote = m ? m.length : 0;\n                        if (single_quote % 2 === 1) {\n                            string = command.match(/('[^']*)$/)[0];\n                        } else if (double_quotes % 2 === 1) {\n                            string = command.match(/(\"(?:[^\"]|\\\\\")*)$/)[0];\n                        } else {\n                            string = cmd_strings[cmd_strings.length - 1];\n                            for (i = cmd_strings.length - 1; i > 0; i--) {\n                                // treat escape space as part of the string\n                                var prev_string = cmd_strings[i - 1];\n                                if (prev_string[prev_string.length - 1] === '\\\\') {\n                                    string = cmd_strings[i - 1] + ' ' + string;\n                                } else {\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    string = command;\n                }\n                return string;\n            },\n            // -------------------------------------------------------------\n            // :: complete word or command based on array of words\n            // -------------------------------------------------------------\n            complete: function(commands, options) {\n                options = $.extend({\n                    word: true,\n                    echo: false,\n                    escape: true\n                }, options || {});\n                // cursor can be in the middle of the command\n                // so we need to get the text before the cursor\n                var string = self.before_cursor(options.word).replace(/\\\\\"/g, '\"');\n                var quote = false;\n                if (options.word) {\n                    if (string.match(/^\"/)) {\n                        quote = '\"';\n                    } else if (string.match(/^'/)) {\n                        quote = \"'\";\n                    }\n                    if (quote) {\n                        string = string.replace(/^[\"']/, '');\n                    }\n                }\n                // local copy\n                commands = commands.slice();\n                if (settings.clear && $.inArray('clear', commands) === -1) {\n                    commands.push('clear');\n                }\n                if (settings.exit && $.inArray('exit', commands) === -1) {\n                    commands.push('exit');\n                }\n                if (tab_count % 2 === 0) {\n                    command = self.before_cursor(options.word);\n                } else {\n                    var test = self.before_cursor(options.word);\n                    if (test !== command) {\n                        // command line changed between TABS - ignore\n                        return;\n                    }\n                }\n                var safe = $.terminal.escape_regex(string);\n                if (options.escape) {\n                    safe = safe.replace(/\\\\([\"'() ])/g, '\\\\?$1');\n                }\n                var regex = new RegExp('^' + safe);\n                var matched = [];\n                for (var i = commands.length; i--;) {\n                    if (regex.test(commands[i])) {\n                        var match = commands[i];\n                        if (quote === '\"') {\n                            match = match.replace(/\"/g, '\\\\\"');\n                        }\n                        if (!quote && options.escape) {\n                            match = match.replace(/([\"'() ])/g, '\\\\$1');\n                        }\n                        matched.push(match);\n                    }\n                }\n                if (matched.length === 1) {\n                    self.insert(matched[0].replace(regex, '') + (quote || ''));\n                    command = self.before_cursor(options.word);\n                    return true;\n                } else if (matched.length > 1) {\n                    if (++tab_count >= 2) {\n                        tab_count = 0;\n                        if (options.echo) {\n                            echo_command();\n                            var text = matched.reverse().join('\\t');\n                            self.echo($.terminal.escape_brackets(text), {\n                                keepWords: true\n                            });\n                            return true;\n                        }\n                    } else {\n                        var common = common_string(string, matched);\n                        if (common) {\n                            self.insert(common.replace(regex, ''));\n                            command = self.before_cursor(options.word);\n                            return true;\n                        }\n                    }\n                }\n            },\n            // -------------------------------------------------------------\n            // :: Return commands function from top interpreter\n            // -------------------------------------------------------------\n            commands: function() {\n                return interpreters.top().interpreter;\n            },\n            // -------------------------------------------------------------\n            // :: Low Level method that overwrites interpreter\n            // -------------------------------------------------------------\n            set_interpreter: function(user_intrp, login) {\n                function overwrite_interpreter() {\n                    self.pause(settings.softPause);\n                    make_interpreter(user_intrp, !!login, function(result) {\n                        self.resume();\n                        var top = interpreters.top();\n                        $.extend(top, result);\n                        prepare_top_interpreter(true);\n                    });\n                }\n                if ($.type(user_intrp) === 'string' && login) {\n                    self.login(make_json_rpc_login(user_intrp, login),\n                               true,\n                               overwrite_interpreter);\n                } else {\n                    overwrite_interpreter();\n                }\n                return self;\n            },\n            // -------------------------------------------------------------\n            // :: Show user greetings or terminal signature\n            // -------------------------------------------------------------\n            greetings: function() {\n                show_greetings();\n                return self;\n            },\n            // -------------------------------------------------------------\n            // :: Return true if terminal is paused false otherwise\n            // -------------------------------------------------------------\n            paused: function() {\n                return paused;\n            },\n            // -------------------------------------------------------------\n            // :: Pause the terminal, it should be used for ajax calls\n            // -------------------------------------------------------------\n            pause: function(visible) {\n                cmd_ready(function ready() {\n                    onPause();\n                    paused = true;\n                    command_line.disable();\n                    if (!visible) {\n                        command_line.hidden();\n                    }\n                    if ($.isFunction(settings.onPause)) {\n                        settings.onPause.call(self);\n                    }\n                });\n                return self;\n            },\n            // -------------------------------------------------------------\n            // :: Resume the previously paused terminal\n            // -------------------------------------------------------------\n            resume: function() {\n                cmd_ready(function ready() {\n                    paused = false;\n                    if (terminals.front() === self) {\n                        command_line.enable();\n                    }\n                    command_line.visible();\n                    var original = delayed_commands;\n                    delayed_commands = [];\n                    for (var i = 0; i < original.length; ++i) {\n                        self.exec.apply(self, original[i]);\n                    }\n                    self.trigger('resume');\n                    var fn = resume_callbacks.shift();\n                    if (fn) {\n                        fn();\n                    }\n                    scroll_to_bottom();\n                    if ($.isFunction(settings.onResume)) {\n                        settings.onResume.call(self);\n                    }\n                });\n                return self;\n            },\n            // -------------------------------------------------------------\n            // :: Return the number of characters that fit into the width of\n            // :: the terminal\n            // -------------------------------------------------------------\n            cols: function() {\n                if (settings.numChars) {\n                    return settings.numChars;\n                }\n                if (!num_chars) {\n                    num_chars = get_num_chars(self);\n                }\n                return num_chars;\n            },\n            // -------------------------------------------------------------\n            // :: Return the number of lines that fit into the height of the\n            // :: terminal\n            // -------------------------------------------------------------\n            rows: function() {\n                if (settings.numRows) {\n                    return settings.numRows;\n                }\n                if (!num_rows) {\n                    num_rows = get_num_rows(self);\n                }\n                return num_rows;\n            },\n            // -------------------------------------------------------------\n            // :: Return the History object\n            // -------------------------------------------------------------\n            history: function() {\n                return command_line.history();\n            },\n            // -------------------------------------------------------------\n            // :: toggle recording of history state\n            // -------------------------------------------------------------\n            history_state: function(toggle) {\n                function run() {\n                    settings.historyState = true;\n                    if (!save_state.length) {\n                        self.save_state();\n                    } else if (terminals.length() > 1) {\n                        self.save_state(null);\n                    }\n                }\n                if (toggle) {\n                    // if set to true and if set from user command we need\n                    // not to include the command\n                    if (typeof window.setImmediate === 'undefined') {\n                        setTimeout(run, 0);\n                    } else {\n                        setImmediate(run);\n                    }\n                } else {\n                    settings.historyState = false;\n                }\n                return self;\n            },\n            // -------------------------------------------------------------\n            // :: clear the history state\n            // -------------------------------------------------------------\n            clear_history_state: function() {\n                hash_commands = [];\n                save_state = [];\n                return self;\n            },\n            // -------------------------------------------------------------\n            // :: Switch to the next terminal\n            // -------------------------------------------------------------\n            next: function() {\n                if (terminals.length() === 1) {\n                    return self;\n                } else {\n                    /*if (!is_scrolled_into_view(self)) {\n                       self.enable();\n                        $('html,body').animate({\n                            scrollTop: offsetTop-50\n                        }, 500);\n                        return self;\n                    } else {\n                    */\n                    terminals.front().disable();\n                    var next = terminals.rotate().enable();\n                    // 100 provides buffer in viewport\n                    var x = next.offset().top - 50;\n                    $('html,body').animate({scrollTop: x}, 500);\n                    try {\n                        settings.onTerminalChange.call(next, next);\n                    } catch (e) {\n                        display_exception(e, 'onTerminalChange');\n                    }\n                    return next;\n                }\n            },\n            // -------------------------------------------------------------\n            // :: Make the terminal in focus or blur depending on the first\n            // :: argument. If there is more then one terminal it will\n            // :: switch to next one, if the second argument is set to true\n            // :: the events will be not fired. Used on init\n            // -------------------------------------------------------------\n            focus: function(toggle, silent) {\n                cmd_ready(function ready() {\n                    var ret;\n                    if (terminals.length() === 1) {\n                        if (toggle === false) {\n                            try {\n                                ret = settings.onBlur.call(self, self);\n                                if (!silent && ret !== false || silent) {\n                                    self.disable();\n                                }\n                            } catch (e) {\n                                display_exception(e, 'onBlur');\n                            }\n                        } else {\n                            try {\n                                ret = settings.onFocus.call(self, self);\n                                if (!silent && ret !== false || silent) {\n                                    self.enable();\n                                }\n                            } catch (e) {\n                                display_exception(e, 'onFocus');\n                            }\n                        }\n                    } else if (toggle === false) {\n                        self.next();\n                    } else {\n                        var front = terminals.front();\n                        if (front !== self) {\n                            // there should be only from terminal enabled but tests\n                            // sometime fail because there where more them one\n                            // where cursor have blink class\n                            terminals.forEach(function(terminal) {\n                                if (terminal !== self && terminal.enabled()) {\n                                    terminal.disable();\n                                }\n                            });\n                            if (!silent) {\n                                try {\n                                    settings.onTerminalChange.call(self, self);\n                                } catch (e) {\n                                    display_exception(e, 'onTerminalChange');\n                                }\n                            }\n                        }\n                        terminals.set(self);\n                        self.enable();\n                    }\n                });\n                return self;\n            },\n            // -------------------------------------------------------------\n            // :: Disable/Enable terminal that can be enabled by click\n            // -------------------------------------------------------------\n            freeze: function(freeze) {\n                when_ready(function ready() {\n                    if (freeze) {\n                        self.disable();\n                        frozen = true;\n                    } else {\n                        frozen = false;\n                        self.enable();\n                    }\n                });\n            },\n            // -------------------------------------------------------------\n            // :: check if terminal is frozen\n            // -------------------------------------------------------------\n            frozen: function() {\n                return frozen;\n            },\n            // -------------------------------------------------------------\n            // :: Enable the terminal\n            // -------------------------------------------------------------\n            enable: function() {\n                if (!enabled && !frozen) {\n                    if (num_chars === undefined) {\n                        // enabling first time\n                        self.resize();\n                    }\n                    cmd_ready(function ready() {\n                        if (!self.paused()) {\n                            command_line.enable();\n                        }\n                        enabled = true;\n                    });\n                }\n                return self;\n            },\n            // -------------------------------------------------------------\n            // :: Disable the terminal\n            // -------------------------------------------------------------\n            disable: function() {\n                cmd_ready(function ready() {\n                    enabled = false;\n                    command_line.disable();\n                });\n                return self;\n            },\n            // -------------------------------------------------------------\n            // :: return true if the terminal is enabled\n            // -------------------------------------------------------------\n            enabled: function() {\n                return enabled;\n            },\n            // -------------------------------------------------------------\n            // :: Return the terminal signature depending on the size of the terminal\n            // -------------------------------------------------------------\n            signature: function() {\n                var cols = self.cols();\n                for (var i = signatures.length; i--;) {\n                    var lenghts = signatures[i].map(function(line) {\n                        return line.length;\n                    });\n                    if (Math.max.apply(null, lenghts) <= cols) {\n                        return signatures[i].join('\\n') + '\\n';\n                    }\n                }\n                return '';\n            },\n            // -------------------------------------------------------------\n            // :: Return the version number\n            // -------------------------------------------------------------\n            version: function() {\n                return $.terminal.version;\n            },\n            // -------------------------------------------------------------\n            // :: Return actual command line object (jquery object with cmd\n            // :: methods)\n            // -------------------------------------------------------------\n            cmd: function() {\n                return command_line;\n            },\n            // -------------------------------------------------------------\n            // :: Return the current command entered by terminal\n            // -------------------------------------------------------------\n            get_command: function() {\n                return command_line.get();\n            },\n            // -------------------------------------------------------------\n            // :: Change the command line to the new one\n            // -------------------------------------------------------------\n            set_command: function(command) {\n                when_ready(function ready() {\n                    command_line.set(command);\n                });\n                return self;\n            },\n            // -------------------------------------------------------------\n            // :: Insert text into the command line after the cursor\n            // -------------------------------------------------------------\n            insert: function(string, stay) {\n                if (typeof string === 'string') {\n                    when_ready(function ready() {\n                        var bottom = self.is_bottom();\n                        command_line.insert(string, stay);\n                        if (settings.scrollOnEcho || bottom) {\n                            scroll_to_bottom();\n                        }\n                    });\n                    return self;\n                } else {\n                    throw new Error(sprintf(strings().notAString, 'insert'));\n                }\n            },\n            // -------------------------------------------------------------\n            // :: Set the prompt of the command line\n            // -------------------------------------------------------------\n            set_prompt: function(prompt) {\n                when_ready(function ready() {\n                    if (validate('prompt', prompt)) {\n                        if ($.isFunction(prompt)) {\n                            command_line.prompt(function(callback) {\n                                prompt(callback, self);\n                            });\n                        } else {\n                            command_line.prompt(prompt);\n                        }\n                        interpreters.top().prompt = prompt;\n                    }\n                });\n                return self;\n            },\n            // -------------------------------------------------------------\n            // :: Return the prompt used by the terminal\n            // -------------------------------------------------------------\n            get_prompt: function() {\n                return interpreters.top().prompt;\n                // command_line.prompt(); - can be a wrapper\n                // return command_line.prompt();\n            },\n            // -------------------------------------------------------------\n            // :: Enable or Disable mask depedning on the passed argument\n            // :: the mask can also be character (in fact it will work with\n            // :: strings longer then one)\n            // -------------------------------------------------------------\n            set_mask: function(mask) {\n                when_ready(function ready() {\n                    command_line.mask(mask === true ? settings.maskChar : mask);\n                });\n                return self;\n            },\n            // -------------------------------------------------------------\n            // :: Return the ouput of the terminal as text\n            // -------------------------------------------------------------\n            get_output: function(raw) {\n                if (raw) {\n                    return lines;\n                } else {\n                    return $.map(lines, function(item) {\n                        return $.isFunction(item[0]) ? item[0]() : item[0];\n                    }).join('\\n');\n                }\n            },\n            // -------------------------------------------------------------\n            // :: Recalculate and redraw everything\n            // -------------------------------------------------------------\n            resize: function(width, height) {\n                if (!self.is(':visible')) {\n                    // delay resize if terminal not visible\n                    self.stopTime('resize');\n                    self.oneTime(500, 'resize', function() {\n                        self.resize(width, height);\n                    });\n                } else {\n                    if (width && height) {\n                        self.width(width);\n                        self.height(height);\n                    }\n                    width = self.width();\n                    height = self.height();\n                    var new_num_chars = get_num_chars(self);\n                    var new_num_rows = get_num_rows(self);\n                    // only if number of chars changed\n                    if (new_num_chars !== num_chars ||\n                        new_num_rows !== num_rows) {\n                        num_chars = new_num_chars;\n                        num_rows = new_num_rows;\n                        redraw();\n                        var top = interpreters.top();\n                        if ($.isFunction(top.resize)) {\n                            top.resize.call(self, self);\n                        } else if ($.isFunction(settings.onResize)) {\n                            settings.onResize.call(self, self);\n                        }\n                        scroll_to_bottom();\n                    }\n                }\n                return self;\n            },\n            // -------------------------------------------------------------\n            // :: Flush the output to the terminal\n            // -------------------------------------------------------------\n            flush: function() {\n                try {\n                    var bottom = self.is_bottom();\n                    var wrapper;\n                    // print all lines\n                    $.each(output_buffer, function(i, line) {\n                        if (line === NEW_LINE) {\n                            wrapper = $('<div></div>');\n                        } else if ($.isFunction(line)) {\n                            // this is finalize function from echo\n                            wrapper.appendTo(output);\n                            line(wrapper);\n                        } else {\n                            $('<div/>').html(line)\n                                .appendTo(wrapper).width('100%');\n                        }\n                    });\n                    if (settings.outputLimit >= 0) {\n                        var limit;\n                        if (settings.outputLimit === 0) {\n                            limit = self.rows();\n                        } else {\n                            limit = settings.outputLimit;\n                        }\n                        var $lines = output.find('div div');\n                        if ($lines.length + 1 > limit) {\n                            var max = $lines.length - limit + 1;\n                            var for_remove = $lines.slice(0, max);\n                            // you can't get parent if you remove the\n                            // element so we first get the parent\n                            var parents = for_remove.parent();\n                            for_remove.remove();\n                            parents.each(function() {\n                                var $self = $(this);\n                                if ($self.is(':empty')) {\n                                    // there can be divs inside parent that\n                                    // was not removed\n                                    $self.remove();\n                                }\n                            });\n                        }\n                    }\n                    num_rows = get_num_rows(self);\n                    if (settings.scrollOnEcho || bottom) {\n                        scroll_to_bottom();\n                    }\n                    output_buffer = [];\n                } catch (e) {\n                    if ($.isFunction(settings.exceptionHandler)) {\n                        settings.exceptionHandler.call(self, e, 'TERMINAL (Flush)');\n                    } else {\n                        alert('[Flush] ' + exception_message(e) + '\\n' +\n                              e.stack);\n                    }\n                }\n                return self;\n            },\n            // -------------------------------------------------------------\n            // :: Update the output line - line number can be negative\n            // -------------------------------------------------------------\n            update: function(line, string) {\n                when_ready(function ready() {\n                    if (line < 0) {\n                        line = lines.length + line; // yes +\n                    }\n                    if (!lines[line]) {\n                        self.error('Invalid line number ' + line);\n                    } else {\n                        if (string === null) {\n                            lines.splice(line, 1);\n                        } else {\n                            lines[line][0] = string;\n                        }\n                        // it would be hard to figure out which div need to be\n                        // updated so we update everything\n                        redraw();\n                    }\n                });\n                return self;\n            },\n            // -------------------------------------------------------------\n            // :: return index of last line in case when you need to update\n            // :: after something is echo on the terminal\n            // -------------------------------------------------------------\n            last_index: function() {\n                return lines.length - 1;\n            },\n            // -------------------------------------------------------------\n            // :: Print data to the terminal output. It can have two options\n            // :: a function that is called with the container div that\n            // :: holds the output (as a jquery object) every time the\n            // :: output is printed (including resize and scrolling)\n            // :: If the line is a function it will be called for every\n            // :: redraw.\n            // :: it use $.when so you can echo a promise\n            // -------------------------------------------------------------\n            echo: function(string, options) {\n                function echo(string) {\n                    try {\n                        var locals = $.extend({\n                            flush: true,\n                            raw: settings.raw,\n                            finalize: $.noop,\n                            keepWords: false,\n                            formatters: true\n                        }, options || {});\n                        if (locals.raw) {\n                            (function(finalize) {\n                                locals.finalize = function(div) {\n                                    div.addClass('raw');\n                                    finalize(div);\n                                };\n                            })(locals.finalize);\n                        }\n                        if (locals.flush) {\n                            // flush buffer if there was no flush after previous echo\n                            if (output_buffer.length) {\n                                self.flush();\n                            }\n                            output_buffer = [];\n                        }\n                        process_line(string, locals);\n                        // extended commands should be processed only\n                        // once in echo and not on redraw\n                        lines.push([string, $.extend(locals, {\n                            exec: false\n                        })]);\n                        if (locals.flush) {\n                            self.flush();\n                        }\n                    } catch (e) {\n                        // if echo throw exception we can't use error to\n                        // display that exception\n                        if ($.isFunction(settings.exceptionHandler)) {\n                            settings.exceptionHandler.call(self, e, 'TERMINAL (echo)');\n                        } else {\n                            alert('[Terminal.echo] ' + exception_message(e) +\n                              '\\n' + e.stack);\n                        }\n                    }\n                }\n                try {\n                    if (options && $.isFunction(options.finalize)) {\n                        options.finalize($('<div/>'));\n                    }\n                    if ($.isFunction(string.then)) {\n                        $.when(string).done(echo);\n                    } else {\n                        echo(string);\n                    }\n                } catch (e) {\n                    display_exception(e, 'USER:echo(finalize)');\n                }\n                return self;\n            },\n            // -------------------------------------------------------------\n            // :: echo red text\n            // -------------------------------------------------------------\n            error: function(message, options) {\n                options = $.extend({}, options, {raw: false, formatters: false});\n                // quick hack to fix trailing backslash\n                var str = $.terminal.escape_brackets(message).\n                    replace(/\\\\$/, '&#92;').\n                    replace(url_re, ']$1[[;;;error]');\n                return self.echo('[[;;;error]' + str + ']', options);\n            },\n            // -------------------------------------------------------------\n            // :: Display Exception on terminal\n            // -------------------------------------------------------------\n            exception: function(e, label) {\n                var message = exception_message(e);\n                if (label) {\n                    message = '&#91;' + label + '&#93;: ' + message;\n                }\n                if (message) {\n                    self.error(message, {\n                        finalize: function(div) {\n                            div.addClass('exception message');\n                        },\n                        keepWords: true\n                    });\n                }\n                if (typeof e.fileName === 'string') {\n                    // display filename and line which throw exeption\n                    self.pause(settings.softPause);\n                    $.get(e.fileName, function(file) {\n                        var num = e.lineNumber - 1;\n                        var line = file.split('\\n')[num];\n                        if (line) {\n                            self.error('[' + e.lineNumber + ']: ' + line);\n                        }\n                        self.resume();\n                    }, 'text');\n                }\n                if (e.stack) {\n                    var stack = $.terminal.escape_brackets(e.stack);\n                    self.echo(stack.split(/\\n/g).map(function(trace) {\n                        return '[[;;;error]' + trace.replace(url_re, function(url) {\n                            return ']' + url + '[[;;;error]';\n                        }) + ']';\n                    }).join('\\n'), {\n                        finalize: function(div) {\n                            div.addClass('exception stack-trace');\n                        },\n                        formatters: false\n                    });\n                }\n            },\n            // -------------------------------------------------------------\n            // :: Scroll Div that holds the terminal\n            // -------------------------------------------------------------\n            scroll: function(amount) {\n                var pos;\n                amount = Math.round(amount);\n                if (scroll_object.prop) { // work with jQuery > 1.6\n                    if (amount > scroll_object.prop('scrollTop') && amount > 0) {\n                        scroll_object.prop('scrollTop', 0);\n                    }\n                    pos = scroll_object.prop('scrollTop');\n                    scroll_object.scrollTop(pos + amount);\n                } else {\n                    if (amount > scroll_object.attr('scrollTop') && amount > 0) {\n                        scroll_object.attr('scrollTop', 0);\n                    }\n                    pos = scroll_object.attr('scrollTop');\n                    scroll_object.scrollTop(pos + amount);\n                }\n                return self;\n            },\n            // -------------------------------------------------------------\n            // :: Exit all interpreters and logout. The function will throw\n            // :: exception if there is no login provided\n            // -------------------------------------------------------------\n            logout: function(local) {\n                if (in_login) {\n                    throw new Error(sprintf(strings().notWhileLogin, 'logout'));\n                }\n                when_ready(function ready() {\n                    if (local) {\n                        var login = logins.pop();\n                        self.set_token(undefined, true);\n                        self.login.apply(self, login);\n                    } else if (interpreters.size() === 1 && self.token()) {\n                        self.logout(true);\n                    } else {\n                        while (interpreters.size() > 1) {\n                            // pop will call global_logout that will call login\n                            // and size will be > 0; this is workaround the problem\n                            if (self.token()) {\n                                self.logout(true).pop().pop();\n                            } else {\n                                self.pop();\n                            }\n                        }\n                    }\n                });\n                return self;\n            },\n            // -------------------------------------------------------------\n            // :: Function returns the token returned by callback function\n            // :: in login function. It does nothing (return undefined) if\n            // :: there is no login\n            // -------------------------------------------------------------\n            token: function(local) {\n                return storage.get(self.prefix_name(local) + '_token');\n            },\n            // -------------------------------------------------------------\n            // :: Function sets the token to the supplied value. This function\n            // :: works regardless of wherer settings.login is supplied\n            // -------------------------------------------------------------\n            set_token: function(token, local) {\n                var name = self.prefix_name(local) + '_token';\n                if (typeof token === 'undefined') {\n                    storage.remove(name, token);\n                } else {\n                    storage.set(name, token);\n                }\n                return self;\n            },\n            // -------------------------------------------------------------\n            // :: Function get the token either set by the login method or\n            // :: by the set_token method.\n            // -------------------------------------------------------------\n            get_token: function(local) {\n                return self.token(local);\n            },\n            // -------------------------------------------------------------\n            // :: Function return Login name entered by the user\n            // -------------------------------------------------------------\n            login_name: function(local) {\n                return storage.get(self.prefix_name(local) + '_login');\n            },\n            // -------------------------------------------------------------\n            // :: Function returns the name of current interpreter\n            // -------------------------------------------------------------\n            name: function() {\n                return interpreters.top().name;\n            },\n            // -------------------------------------------------------------\n            // :: Function return prefix name for login/token\n            // -------------------------------------------------------------\n            prefix_name: function(local) {\n                var name = (settings.name ? settings.name + '_' : '') +\n                    terminal_id;\n                if (local && interpreters.size() > 1) {\n                    var local_name = interpreters.map(function(intrp) {\n                        return intrp.name || '';\n                    }).slice(1).join('_');\n                    if (local_name) {\n                        name += '_' + local_name;\n                    }\n                }\n                return name;\n            },\n            // -------------------------------------------------------------\n            // :: wrapper for common use case\n            // -------------------------------------------------------------\n            read: function(message, callback) {\n                var d = new $.Deferred();\n                self.push(function(text) {\n                    self.pop();\n                    if ($.isFunction(callback)) {\n                        callback(text);\n                    }\n                    d.resolve(text);\n                }, {\n                    prompt: message\n                });\n                return d.promise();\n            },\n            // -------------------------------------------------------------\n            // :: Push a new interenter on the Stack\n            // -------------------------------------------------------------\n            push: function(interpreter, options) {\n                cmd_ready(function ready() {\n                    options = options || {};\n                    var defaults = {\n                        infiniteLogin: false\n                    };\n                    var push_settings = $.extend({}, defaults, options);\n                    if (!push_settings.name && prev_command) {\n                        // push is called in login\n                        push_settings.name = prev_command.name;\n                    }\n                    if (push_settings.prompt === undefined) {\n                        push_settings.prompt = (push_settings.name || '>') + ' ';\n                    }\n                    // names.push(options.name);\n                    var top = interpreters.top();\n                    if (top) {\n                        top.mask = command_line.mask();\n                    }\n                    var was_paused = paused;\n                    function init() {\n                        settings.onPush.call(self, top, interpreters.top(), self);\n                        prepare_top_interpreter();\n                    }\n                    // self.pause();\n                    make_interpreter(interpreter, !!options.login, function(ret) {\n                        // result is object with interpreter and completion properties\n                        interpreters.push($.extend({}, ret, push_settings));\n                        if (push_settings.completion === true) {\n                            if ($.isArray(ret.completion)) {\n                                interpreters.top().completion = ret.completion;\n                            } else if (!ret.completion) {\n                                interpreters.top().completion = false;\n                            }\n                        }\n                        if (push_settings.login) {\n                            var error;\n                            var type = $.type(push_settings.login);\n                            if (type === 'function') {\n                                error = push_settings.infiniteLogin ? $.noop : self.pop;\n                                self.login(push_settings.login,\n                                           push_settings.infiniteLogin,\n                                           init,\n                                           error);\n                            } else if ($.type(interpreter) === 'string' &&\n                                       type === 'string' || type === 'boolean') {\n                                error = push_settings.infiniteLogin ? $.noop : self.pop;\n                                self.login(make_json_rpc_login(interpreter,\n                                                               push_settings.login),\n                                           push_settings.infiniteLogin,\n                                           init,\n                                           error);\n                            }\n                        } else {\n                            init();\n                        }\n                        if (!was_paused && self.enabled()) {\n                            self.resume();\n                        }\n                    });\n                });\n                return self;\n            },\n            // -------------------------------------------------------------\n            // :: Remove the last interpreter from the Stack\n            // -------------------------------------------------------------\n            pop: function(string, silent) {\n                if (string !== undefined) {\n                    echo_command(string);\n                }\n                var token = self.token(true);\n                var top;\n                if (interpreters.size() === 1) {\n                    top = interpreters.top();\n                    if (settings.login) {\n                        if (!silent) {\n                            settings.onPop.call(self, top, null, self);\n                        }\n                        global_logout();\n                        if ($.isFunction(settings.onExit)) {\n                            try {\n                                settings.onExit.call(self, self);\n                            } catch (e) {\n                                display_exception(e, 'onExit');\n                            }\n                        }\n                    } else {\n                        self.error(strings().canExitError);\n                    }\n                } else {\n                    if (token) {\n                        clear_loging_storage();\n                    }\n                    var current = interpreters.pop();\n                    top = interpreters.top();\n                    prepare_top_interpreter();\n                    if (!silent) {\n                        settings.onPop.call(self, current, top);\n                    }\n                    // we check in case if you don't pop from password interpreter\n                    if (in_login && self.get_prompt() !== strings().login + ': ') {\n                        in_login = false;\n                    }\n                    if ($.isFunction(current.onExit)) {\n                        try {\n                            current.onExit.call(self, self);\n                        } catch (e) {\n                            display_exception(e, 'onExit');\n                        }\n                    }\n                    // restore mask\n                    self.set_mask(top.mask);\n                }\n                return self;\n            },\n            // -------------------------------------------------------------\n            // :: Change terminal option(s) at runtime\n            // -------------------------------------------------------------\n            option: function(object_or_name, value) {\n                if (typeof value === 'undefined') {\n                    if (typeof object_or_name === 'string') {\n                        return settings[object_or_name];\n                    } else if (typeof object_or_name === 'object') {\n                        $.each(object_or_name, function(key, value) {\n                            settings[key] = value;\n                        });\n                    }\n                } else {\n                    settings[object_or_name] = value;\n                }\n                return self;\n            },\n            // -------------------------------------------------------------\n            // :: Return how deep you are in nested interpreters\n            // -------------------------------------------------------------\n            level: function() {\n                return interpreters.size();\n            },\n            // -------------------------------------------------------------\n            // :: Reinitialize the terminal\n            // -------------------------------------------------------------\n            reset: function() {\n                when_ready(function ready() {\n                    self.clear();\n                    while (interpreters.size() > 1) {\n                        interpreters.pop();\n                    }\n                    initialize();\n                });\n                return self;\n            },\n            // -------------------------------------------------------------\n            // :: Remove all local storage left by terminal, it will not\n            // :: logout you until you refresh the browser\n            // -------------------------------------------------------------\n            purge: function() {\n                when_ready(function ready() {\n                    var prefix = self.prefix_name() + '_';\n                    var names = storage.get(prefix + 'interpreters');\n                    if (names) {\n                        $.each(JSON.parse(names), function(_, name) {\n                            storage.remove(name + '_commands');\n                            storage.remove(name + '_token');\n                            storage.remove(name + '_login');\n                        });\n                    }\n                    command_line.purge();\n                    storage.remove(prefix + 'interpreters');\n                });\n                return self;\n            },\n            // -------------------------------------------------------------\n            // :: Remove all events and DOM nodes left by terminal, it will\n            // :: not purge the terminal so you will have the same state\n            // :: when you refresh the browser\n            // -------------------------------------------------------------\n            destroy: function() {\n                when_ready(function ready() {\n                    command_line.destroy().remove();\n                    output.remove();\n                    wrapper.remove();\n                    $(document).unbind('.terminal_' + self.id());\n                    $(window).unbind('.terminal_' + self.id());\n                    self.unbind('click wheel mousewheel mousedown mouseup');\n                    self.removeData('terminal').removeClass('terminal').\n                        unbind('.terminal');\n                    if (settings.width) {\n                        self.css('width', '');\n                    }\n                    if (settings.height) {\n                        self.css('height', '');\n                    }\n                    $(window).off('blur', blur_terminal).\n                        off('focus', focus_terminal);\n                    self.find('.terminal-fill').remove();\n                    terminals.remove(terminal_id);\n                    if (visibility_observer) {\n                        visibility_observer.unobserve(self[0]);\n                    }\n                    if (mutation_observer) {\n                        mutation_observer.disconnect();\n                    }\n                    self.resizer('unbind');\n                    if (!terminals.length()) {\n                        $(window).off('hashchange');\n                    }\n                });\n                return self;\n            },\n            // -------------------------------------------------------------\n            scroll_to_bottom: scroll_to_bottom,\n            // -------------------------------------------------------------\n            // :: return true if terminal div or body is at the bottom\n            // :: is use scrollBottomOffset option as margin for the check\n            // -------------------------------------------------------------\n            is_bottom: function() {\n                if (settings.scrollBottomOffset === -1) {\n                    return false;\n                } else {\n                    var scroll_height, scroll_top, height;\n                    if (self.is('body')) {\n                        scroll_height = $(document).height();\n                        scroll_top = $(window).scrollTop();\n                        height = window.innerHeight;\n                    } else {\n                        scroll_height = scroll_object[0].scrollHeight;\n                        scroll_top = scroll_object.scrollTop();\n                        height = scroll_object.outerHeight();\n                    }\n                    var limit = scroll_height - settings.scrollBottomOffset;\n                    return scroll_top + height > limit;\n                }\n            }\n        }, function(name, fun) {\n            // wrap all functions and display execptions\n            return function() {\n                try {\n                    return fun.apply(self, [].slice.apply(arguments));\n                } catch (e) {\n                    // exec catch by command (resume call exec)\n                    if (name !== 'exec' && name !== 'resume') {\n                        display_exception(e, 'TERMINAL');\n                    }\n                    throw e;\n                }\n            };\n        }));\n\n        // -----------------------------------------------------------------\n        // INIT CODE\n        // -----------------------------------------------------------------\n        if (settings.width) {\n            self.width(settings.width);\n        }\n        if (settings.height) {\n            self.height(settings.height);\n        }\n        scroll_object = self.scroll_element();\n        // register ajaxSend for cancel requests on CTRL+D\n        $(document).bind('ajaxSend.terminal_' + self.id(), function(e, xhr) {\n            requests.push(xhr);\n        });\n        var wrapper = $('<div class=\"terminal-wrapper\"/>').appendTo(self);\n        $('<div class=\"terminal-fill\"/>').appendTo(self);\n        output = $('<div>').addClass('terminal-output').attr('role', 'log')\n            .appendTo(wrapper);\n        self.addClass('terminal');\n        // before login event\n        if (settings.login && $.isFunction(settings.onBeforeLogin)) {\n            try {\n                if (settings.onBeforeLogin.call(self, self) === false) {\n                    autologin = false;\n                }\n            } catch (e) {\n                display_exception(e, 'onBeforeLogin');\n                throw e;\n            }\n        }\n        // create json-rpc authentication function\n        var base_interpreter;\n        if (typeof init_interpreter === 'string') {\n            base_interpreter = init_interpreter;\n        } else if (init_interpreter instanceof Array) {\n            // first JSON-RPC\n            for (var i = 0, len = init_interpreter.length; i < len; ++i) {\n                if (typeof init_interpreter[i] === 'string') {\n                    base_interpreter = init_interpreter[i];\n                    break;\n                }\n            }\n        }\n        if (base_interpreter &&\n            (typeof settings.login === 'string' || settings.login === true)) {\n            settings.login = make_json_rpc_login(base_interpreter,\n                                                 settings.login);\n        }\n        terminals.append(self);\n        //terminals.set(self);\n        self.on('focus.terminal', 'textarea', function(e, skip) {\n            if (!enabled && !skip) {\n                self.enable();\n            }\n        });\n        function focus_terminal() {\n            if (old_enabled) {\n                self.focus();\n            }\n        }\n        function blur_terminal() {\n            old_enabled = enabled;\n            self.disable();\n        }\n        function paste_event(e) {\n            e = e.originalEvent;\n            // we don't care about browser that don't support clipboard data\n            // those browser simple will not have this feature normal paste\n            // is cross-browser and it's handled by cmd plugin\n            if (e.clipboardData) {\n                var items = e.clipboardData.items;\n                if (items) {\n                    for (var i = 0; i < items.length; i++) {\n                        if (items[i].type.indexOf('image') !== -1) {\n                            var blob = items[i].getAsFile();\n                            var URL = window.URL || window.webkitURL;\n                            var source = URL.createObjectURL(blob);\n                            self.echo('<img src=\"' + source + '\"/>', {raw: true});\n                        } else if (items[i].type.indexOf('text/plain') !== -1) {\n                            items[i].getAsString(self.insert);\n                        }\n                    }\n                } else if (e.clipboardData.getData) {\n                    var text = e.clipboardData.getData('text/plain');\n                    self.insert(text);\n                }\n                return false;\n            }\n        }\n        $(document).on('paste.terminal_' + self.id(), paste_event);\n        make_interpreter(init_interpreter, !!settings.login, function(itrp) {\n            if (settings.completion && typeof settings.completion !== 'boolean' ||\n                !settings.completion) {\n                // overwrite interpreter completion by global setting #224\n                // we use string to indicate that it need to be taken from settings\n                // so we are able to change it using option API method\n                itrp.completion = 'settings';\n            }\n            var new_keymap = $.extend({}, keymap, settings.keymap || {});\n            interpreters = new Stack($.extend({}, settings.extra, {\n                name: settings.name,\n                prompt: settings.prompt,\n                keypress: settings.keypress,\n                keydown: settings.keydown,\n                resize: settings.onResize,\n                greetings: settings.greetings,\n                mousewheel: settings.mousewheel,\n                keymap: new_keymap\n            }, itrp));\n            // CREATE COMMAND LINE\n            command_line = $('<div/>').appendTo(wrapper).cmd({\n                prompt: settings.prompt,\n                history: settings.memory ? 'memory' : settings.history,\n                historyFilter: settings.historyFilter,\n                historySize: settings.historySize,\n                width: '100%',\n                enabled: enabled && !is_touch,\n                keydown: key_down,\n                keymap: new_keymap,\n                clickTimeout: settings.clickTimeout,\n                keypress: function(e) {\n                    var top = interpreters.top();\n                    if ($.isFunction(top.keypress)) {\n                        return top.keypress.call(self, e, self);\n                    } else if ($.isFunction(settings.keypress)) {\n                        return settings.keypress.call(self, e, self);\n                    }\n                },\n                onCommandChange: function(command) {\n                    if ($.isFunction(settings.onCommandChange)) {\n                        try {\n                            settings.onCommandChange.call(self, command, self);\n                        } catch (e) {\n                            display_exception(e, 'onCommandChange');\n                            throw e;\n                        }\n                    }\n                    scroll_to_bottom();\n                },\n                commands: commands\n            });\n            // touch devices need touch event to get virtual keyboard\n            if (enabled && self.is(':visible') && !is_touch) {\n                self.focus(undefined, true);\n            } else {\n                self.disable();\n            }\n            self.oneTime(100, function() {\n                function disable(e) {\n                    var sender = $(e.target);\n                    if (!sender.closest('.terminal').length &&\n                        self.enabled() &&\n                        settings.onBlur.call(self, self) !== false) {\n                        self.disable();\n                    }\n                }\n                $(document).bind('click.terminal_' + self.id(), disable).\n                    bind('contextmenu.terminal_' + self.id(), disable);\n            });\n            var $win = $(window);\n            if (!is_touch) {\n                // work weird on mobile\n                $win.on('focus.terminal_' + self.id(), focus_terminal).\n                    on('blur.terminal_' + self.id(), blur_terminal);\n            } else {\n                /*\n                self.find('textarea').on('blur.terminal', function() {\n                    if (enabled) {\n                        self.focus(false);\n                    }\n                });*/\n            }\n            if (is_touch) {\n                self.click(function() {\n                    if (!self.enabled() && !frozen) {\n                        self.focus();\n                        command_line.enable();\n                    } else {\n                        self.focus(false);\n                    }\n                });\n            } else {\n                // detect mouse drag\n                (function() {\n                    var count = 0;\n                    var isDragging = false;\n                    var target;\n                    self.mousedown(function(e) {\n                        var parents = $(e.target).parents();\n                        if (parents.addBack) {\n                            target = parents.addBack();\n                        } else {\n                            target = parents.andSelf();\n                        }\n                        if (e.originalEvent.button === 2) {\n                            return;\n                        }\n                        self.oneTime(1, function() {\n                            $(window).on('mousemove.terminal_' + self.id(), function() {\n                                isDragging = true;\n                                count = 0;\n                                $(window).off('mousemove.terminal_' + self.id());\n                            });\n                        });\n                    }).mouseup(function() {\n                        var wasDragging = isDragging;\n                        isDragging = false;\n                        $(window).off('mousemove.terminal_' + self.id());\n                        if (!wasDragging) {\n                            if (++count === 1) {\n                                if (!self.enabled() && !frozen) {\n                                    self.focus();\n                                    command_line.enable();\n                                    count = 0;\n                                } else {\n                                    var name = 'click_' + self.id();\n                                    self.oneTime(settings.clickTimeout, name, function() {\n                                        // move cursor to the end if clicked after .cmd\n                                        if (!target.is('.terminal-output') &&\n                                            !target.is('.cmd') &&\n                                            target.is('.terminal > div')) {\n                                            var len = command_line.get().length;\n                                            command_line.position(len);\n                                        }\n                                        count = 0;\n                                    });\n                                }\n                            } else {\n                                self.stopTime('click_' + self.id());\n                                count = 0;\n                            }\n                        }\n                    }).dblclick(function() {\n                        count = 0;\n                        self.stopTime('click_' + self.id());\n                    });\n                })();\n                (function() {\n                    var clip = self.find('textarea');\n                    self.on('mousedown.terminal', function(e) {\n                        if (e.originalEvent.button === 2) {\n                            if (!self.enabled()) {\n                                self.enable();\n                            }\n                            e.preventDefault();\n                            var offset = command_line.offset();\n                            clip.css({\n                                left: e.pageX - offset.left - 5,\n                                top: e.pageY - offset.top - 5\n                            });\n                        }\n                    });\n                    // contextmenu is fired after mousedown\n                    self.bind('contextmenu', function() {\n                        self.oneTime(100, function() {\n                            clip.css({left: '', top: ''});\n                        });\n                    });\n                })();\n            }\n            self.delegate('.exception a', 'click', function(e) {\n                // .on('click', '.exception a', function(e) {\n                // in new jquery .delegate just call .on\n                var href = $(this).attr('href');\n                if (href.match(/:[0-9]+$/)) { // display line if specified\n                    e.preventDefault();\n                    print_line(href);\n                }\n            });\n            if (self.is(':visible')) {\n                num_chars = self.cols();\n                command_line.resize(num_chars);\n                num_rows = get_num_rows(self);\n            }\n            // -------------------------------------------------------------\n            // Run Login\n            command_queue.resolve();\n            if (settings.login) {\n                self.login(settings.login, true, initialize);\n            } else {\n                initialize();\n            }\n            function resize() {\n                if (self.is(':visible')) {\n                    var width = self.width();\n                    var height = self.height();\n                    // prevent too many calculations in IE\n                    if (old_height !== height || old_width !== width) {\n                        self.resize();\n                    }\n                    old_height = height;\n                    old_width = width;\n                }\n            }\n            if (self.is(':visible')) {\n                self.resizer(resize);\n            }\n            function observe_visibility() {\n                if (visibility_observer) {\n                    visibility_observer.unobserve(self[0]);\n                }\n                visibility_observer = new IntersectionObserver(function(entries) {\n                    if (entries[0].intersectionRatio) {\n                        self.resizer('unbind').resizer(resize);\n                        resize();\n                    } else {\n                        self.disable();\n                    }\n                }, {\n                    root: document.body\n                });\n                visibility_observer.observe(self[0]);\n            }\n            var in_dom = !!self.closest('body').length;\n            var MutationObsrv = window.MutationObserver || window.WebKitMutationObserver;\n            if (window.IntersectionObserver) {\n                if (MutationObsrv) {\n                    mutation_observer = new MutationObsrv(function() {\n                        if (self.closest('body').length) {\n                            if (!in_dom) {\n                                self.scroll_to_bottom();\n                                observe_visibility();\n                            }\n                            in_dom = true;\n                        } else if (in_dom) {\n                            in_dom = false;\n                        }\n                    });\n                    mutation_observer.observe(document.body, {childList: true});\n                }\n                // check if element is in the DOM if not running IntersectionObserver\n                // don't make sense\n                if (in_dom) {\n                    observe_visibility();\n                }\n\n            }\n            // -------------------------------------------------------------\n            // :: helper\n            function exec_spec(spec) {\n                var terminal = terminals.get()[spec[0]];\n                // execute if belong to this terminal\n                if (terminal && terminal_id === terminal.id()) {\n                    if (spec[2]) {\n                        try {\n                            if (paused) {\n                                var defer = $.Deferred();\n                                resume_callbacks.push(function() {\n                                    return terminal.exec(spec[2]).done(function() {\n                                        terminal.save_state(spec[2], true, spec[1]);\n                                        defer.resolve();\n                                    });\n                                });\n                                return defer.promise();\n                            } else {\n                                return terminal.exec(spec[2]).done(function() {\n                                    terminal.save_state(spec[2], true, spec[1]);\n                                });\n                            }\n                        } catch (e) {\n                            var settings = terminal.settings();\n                            if ($.isFunction(settings.exceptionHandler)) {\n                                settings.exceptionHandler.call(self, e, 'EXEC HASH');\n                            } else {\n                                var cmd = $.terminal.escape_brackets(command);\n                                var msg = 'Error while exec with command ' + cmd;\n                                terminal.error(msg).exception(e);\n                            }\n                        }\n                    }\n                }\n            }\n            // exec from hash called in each terminal instance\n            if (settings.execHash) {\n                if (location.hash) {\n                    // wait until login is initialized\n                    setTimeout(function() {\n                        try {\n                            var hash = location.hash.replace(/^#/, '');\n                            // yes no var - local inside terminal\n                            hash_commands = JSON.parse(decodeURIComponent(hash));\n                            var i = 0;\n                            (function recur() {\n                                var spec = hash_commands[i++];\n                                if (spec) {\n                                    exec_spec(spec).done(recur);\n                                } else {\n                                    change_hash = true;\n                                }\n                            })();// */\n                        } catch (e) {\n                            // invalid json - ignore\n                        }\n                    });\n                } else {\n                    change_hash = true;\n                }\n            } else {\n                change_hash = true; // if enabled later\n            }\n            // change_hash = true; // exec can now change hash\n            // -------------------------------------------------------------\n            var shift = false;\n            $(document).bind('keydown.terminal_' + self.id(), function(e) {\n                if (e.shiftKey) {\n                    shift = true;\n                }\n            }).bind('keyup.terminal_' + self.id(), function(e) {\n                // in Google Chromium/Linux shiftKey is false\n                if (e.shiftKey || e.which === 16) {\n                    shift = false;\n                }\n            });\n            // this could work without calling scroll on wheel event but we\n            // need to for cases where you have mouse wheel work differently\n            // like with less command that scroll text\n            function mousewheel(event, delta) {\n                if (!shift) {\n                    var interpreter = interpreters.top();\n                    var ret;\n                    if ($.isFunction(interpreter.mousewheel)) {\n                        ret = interpreter.mousewheel(event, delta, self);\n                        if (ret === false) {\n                            return;\n                        }\n                    } else if ($.isFunction(settings.mousewheel)) {\n                        ret = settings.mousewheel(event, delta, self);\n                        if (ret === false) {\n                            return;\n                        }\n                    }\n                    if (delta > 0) {\n                        self.scroll(-40);\n                    } else {\n                        self.scroll(40);\n                    }\n                }\n            }\n            if ($.event.special.mousewheel) {\n                // we keep mousewheel plugin just in case\n                self.on('mousewheel', function(event, delta) {\n                    mousewheel(event, delta);\n                    event.preventDefault();\n                });\n            } else {\n                // detection take from:\n                // https://developer.mozilla.org/en-US/docs/Web/Events/wheel\n                var event;\n                if (\"onwheel\" in document.createElement(\"div\")) {\n                    event = \"wheel\"; // Modern browsers support \"wheel\"\n                } else if (document.onmousewheel !== undefined) {\n                    event = \"mousewheel\"; // Webkit and IE support at least \"mousewheel\"\n                } else {\n                    // let's assume that remaining browsers are older Firefox\n                    event = \"DOMMouseScroll\";\n                }\n                self.on(event, function(e) {\n                    var delta;\n                    if (event === 'mousewheel') {\n                        delta = - 1 / 40 * e.originalEvent.wheelDelta;\n                    } else {\n                        delta = e.originalEvent.deltaY || e.originalEvent.detail;\n                    }\n                    mousewheel(e, -delta);\n                    return false;\n                });\n            }\n        }); // make_interpreter\n        self.data('terminal', self);\n        return self;\n    }; // terminal plugin\n})(jQuery);\n","/*!\n * jQuery JavaScript Library v3.2.1\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2017-03-20T18:59Z\n */\n( function( global, factory ) {\n\n\t\"use strict\";\n\n\tif ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket #14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n\"use strict\";\n\nvar arr = [];\n\nvar document = window.document;\n\nvar getProto = Object.getPrototypeOf;\n\nvar slice = arr.slice;\n\nvar concat = arr.concat;\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\n\n\n\tfunction DOMEval( code, doc ) {\n\t\tdoc = doc || document;\n\n\t\tvar script = doc.createElement( \"script\" );\n\n\t\tscript.text = code;\n\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n\t}\n/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\n\n\nvar\n\tversion = \"3.2.1\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t},\n\n\t// Support: Android <=4.0 only\n\t// Make sure we trim BOM and NBSP\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n\n\t// Matches dashed string for camelizing\n\trmsPrefix = /^-ms-/,\n\trdashAlpha = /-([a-z])/g,\n\n\t// Used by jQuery.camelCase as callback to replace()\n\tfcamelCase = function( all, letter ) {\n\t\treturn letter.toUpperCase();\n\t};\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !jQuery.isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tsrc = target[ name ];\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\n\n\t\t\t\t\tif ( copyIsArray ) {\n\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\tclone = src && Array.isArray( src ) ? src : [];\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src && jQuery.isPlainObject( src ) ? src : {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisFunction: function( obj ) {\n\t\treturn jQuery.type( obj ) === \"function\";\n\t},\n\n\tisWindow: function( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t},\n\n\tisNumeric: function( obj ) {\n\n\t\t// As of jQuery 3.0, isNumeric is limited to\n\t\t// strings and numbers (primitives or objects)\n\t\t// that can be coerced to finite numbers (gh-2662)\n\t\tvar type = jQuery.type( obj );\n\t\treturn ( type === \"number\" || type === \"string\" ) &&\n\n\t\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n\t\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t\t// subtraction forces infinities to NaN\n\t\t\t!isNaN( obj - parseFloat( obj ) );\n\t},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\n\t\t/* eslint-disable no-unused-vars */\n\t\t// See https://github.com/eslint/eslint/issues/6125\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\ttype: function( obj ) {\n\t\tif ( obj == null ) {\n\t\t\treturn obj + \"\";\n\t\t}\n\n\t\t// Support: Android <=2.3 only (functionish RegExp)\n\t\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\t\ttypeof obj;\n\t},\n\n\t// Evaluates a script in a global context\n\tglobalEval: function( code ) {\n\t\tDOMEval( code );\n\t},\n\n\t// Convert dashed to camelCase; used by the css and data modules\n\t// Support: IE <=9 - 11, Edge 12 - 13\n\t// Microsoft forgot to hump their vendor prefix (#9572)\n\tcamelCase: function( string ) {\n\t\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// Support: Android <=4.0 only\n\ttrim: function( text ) {\n\t\treturn text == null ?\n\t\t\t\"\" :\n\t\t\t( text + \"\" ).replace( rtrim, \"\" );\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn concat.apply( [], ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// Bind a function to a context, optionally partially applying any\n\t// arguments.\n\tproxy: function( fn, context ) {\n\t\tvar tmp, args, proxy;\n\n\t\tif ( typeof context === \"string\" ) {\n\t\t\ttmp = fn[ context ];\n\t\t\tcontext = fn;\n\t\t\tfn = tmp;\n\t\t}\n\n\t\t// Quick check to determine if target is callable, in the spec\n\t\t// this throws a TypeError, but we will just return undefined.\n\t\tif ( !jQuery.isFunction( fn ) ) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Simulated bind\n\t\targs = slice.call( arguments, 2 );\n\t\tproxy = function() {\n\t\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t\t};\n\n\t\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\t\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\t\treturn proxy;\n\t},\n\n\tnow: Date.now,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\nfunction( i, name ) {\n\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = jQuery.type( obj );\n\n\tif ( type === \"function\" || jQuery.isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.3.3\n * https://sizzlejs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2016-08-08\n */\n(function( window ) {\n\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = \"sizzle\" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// Instance methods\n\thasOwn = ({}).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpush_native = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\t// Use a stripped-down indexOf as it's faster than native\n\t// https://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[i] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n\tidentifier = \"(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+\",\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace +\n\t\t\"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\" ),\n\n\trattributeQuotes = new RegExp( \"=\" + whitespace + \"*([^\\\\]'\\\"]*?)\" + whitespace + \"*\\\\]\", \"g\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace +\n\t\t\t\"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace +\n\t\t\t\"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" +\n\t\t\twhitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\n\t// CSS escapes\n\t// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\" ),\n\tfunescape = function( _, escaped, escapedWhitespace ) {\n\t\tvar high = \"0x\" + escaped - 0x10000;\n\t\t// NaN means non-codepoint\n\t\t// Support: Firefox<24\n\t\t// Workaround erroneous numeric interpretation of +\"0x\"\n\t\treturn high !== high || escapedWhitespace ?\n\t\t\tescaped :\n\t\t\thigh < 0 ?\n\t\t\t\t// BMP codepoint\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\t// Supplemental Plane codepoint (surrogate pair)\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// CSS string/identifier serialization\n\t// https://drafts.csswg.org/cssom/#common-serializing-idioms\n\trcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n\tfcssescape = function( ch, asCodePoint ) {\n\t\tif ( asCodePoint ) {\n\n\t\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\t\tif ( ch === \"\\0\" ) {\n\t\t\t\treturn \"\\uFFFD\";\n\t\t\t}\n\n\t\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\t\treturn ch.slice( 0, -1 ) + \"\\\\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t\t}\n\n\t\t// Other potentially-special ASCII characters get backslash-escaped\n\t\treturn \"\\\\\" + ch;\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t},\n\n\tdisabledAncestor = addCombinator(\n\t\tfunction( elem ) {\n\t\t\treturn elem.disabled === true && (\"form\" in elem || \"label\" in elem);\n\t\t},\n\t\t{ dir: \"parentNode\", next: \"legend\" }\n\t);\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t(arr = slice.call( preferredDoc.childNodes )),\n\t\tpreferredDoc.childNodes\n\t);\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpush_native.apply( target, slice.call(els) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\t\t\t// Can't trust NodeList.length\n\t\t\twhile ( (target[j++] = els[i++]) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar m, i, elem, nid, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\n\t\tif ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {\n\t\t\tsetDocument( context );\n\t\t}\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( (m = match[1]) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( (elem = context.getElementById( m )) ) {\n\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && (elem = newContext.getElementById( m )) &&\n\t\t\t\t\t\t\tcontains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[2] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( (m = match[3]) && support.getElementsByClassName &&\n\t\t\t\t\tcontext.getElementsByClassName ) {\n\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( support.qsa &&\n\t\t\t\t!compilerCache[ selector + \" \" ] &&\n\t\t\t\t(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {\n\n\t\t\t\tif ( nodeType !== 1 ) {\n\t\t\t\t\tnewContext = context;\n\t\t\t\t\tnewSelector = selector;\n\n\t\t\t\t// qSA looks outside Element context, which is not what we want\n\t\t\t\t// Thanks to Andrew Dupont for this workaround technique\n\t\t\t\t// Support: IE <=8\n\t\t\t\t// Exclude object elements\n\t\t\t\t} else if ( context.nodeName.toLowerCase() !== \"object\" ) {\n\n\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\tif ( (nid = context.getAttribute( \"id\" )) ) {\n\t\t\t\t\t\tnid = nid.replace( rcssescape, fcssescape );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontext.setAttribute( \"id\", (nid = expando) );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[i] = \"#\" + nid + \" \" + toSelector( groups[i] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\t\t\t\t}\n\n\t\t\t\tif ( newSelector ) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn (cache[ key + \" \" ] = value);\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */\nfunction assert( fn ) {\n\tvar el = document.createElement(\"fieldset\");\n\n\ttry {\n\t\treturn !!fn( el );\n\t} catch (e) {\n\t\treturn false;\n\t} finally {\n\t\t// Remove from its parent by default\n\t\tif ( el.parentNode ) {\n\t\t\tel.parentNode.removeChild( el );\n\t\t}\n\t\t// release memory in IE\n\t\tel = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split(\"|\"),\n\t\ti = arr.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[i] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\ta.sourceIndex - b.sourceIndex;\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( (cur = cur.nextSibling) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === \"input\" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn (name === \"input\" || name === \"button\") && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\treturn function( elem ) {\n\n\t\t// Only certain elements can match :enabled or :disabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n\t\tif ( \"form\" in elem ) {\n\n\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n\t\t\t// * listed form-associated elements in a disabled fieldset\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n\t\t\t// * option elements in a disabled optgroup\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n\t\t\t// All such elements have a \"form\" property.\n\t\t\tif ( elem.parentNode && elem.disabled === false ) {\n\n\t\t\t\t// Option elements defer to a parent optgroup if present\n\t\t\t\tif ( \"label\" in elem ) {\n\t\t\t\t\tif ( \"label\" in elem.parentNode ) {\n\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Support: IE 6 - 11\n\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\t\t\t\treturn elem.isDisabled === disabled ||\n\n\t\t\t\t\t// Where there is no isDisabled, check manually\n\t\t\t\t\t/* jshint -W018 */\n\t\t\t\t\telem.isDisabled !== !disabled &&\n\t\t\t\t\t\tdisabledAncestor( elem ) === disabled;\n\t\t\t}\n\n\t\t\treturn elem.disabled === disabled;\n\n\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\n\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n\t\t// even exist on them, let alone have a boolean value.\n\t\t} else if ( \"label\" in elem ) {\n\t\t\treturn elem.disabled === disabled;\n\t\t}\n\n\t\t// Remaining elements are neither :enabled nor :disabled\n\t\treturn false;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction(function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction(function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ (j = matchIndexes[i]) ] ) {\n\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\t// documentElement is verified for cases where it doesn't yet exist\n\t// (such as loading iframes in IE - #4833)\n\tvar documentElement = elem && (elem.ownerDocument || elem).documentElement;\n\treturn documentElement ? documentElement.nodeName !== \"HTML\" : false;\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, subWindow,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\tif ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocElem = document.documentElement;\n\tdocumentIsHTML = !isXML( document );\n\n\t// Support: IE 9-11, Edge\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\tif ( preferredDoc !== document &&\n\t\t(subWindow = document.defaultView) && subWindow.top !== subWindow ) {\n\n\t\t// Support: IE 11, Edge\n\t\tif ( subWindow.addEventListener ) {\n\t\t\tsubWindow.addEventListener( \"unload\", unloadHandler, false );\n\n\t\t// Support: IE 9 - 10 only\n\t\t} else if ( subWindow.attachEvent ) {\n\t\t\tsubWindow.attachEvent( \"onunload\", unloadHandler );\n\t\t}\n\t}\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert(function( el ) {\n\t\tel.className = \"i\";\n\t\treturn !el.getAttribute(\"className\");\n\t});\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName(\"*\") returns only elements\n\tsupport.getElementsByTagName = assert(function( el ) {\n\t\tel.appendChild( document.createComment(\"\") );\n\t\treturn !el.getElementsByTagName(\"*\").length;\n\t});\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programmatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert(function( el ) {\n\t\tdocElem.appendChild( el ).id = expando;\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\n\t});\n\n\t// ID filter and find\n\tif ( support.getById ) {\n\t\tExpr.filter[\"ID\"] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute(\"id\") === attrId;\n\t\t\t};\n\t\t};\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar elem = context.getElementById( id );\n\t\t\t\treturn elem ? [ elem ] : [];\n\t\t\t}\n\t\t};\n\t} else {\n\t\tExpr.filter[\"ID\"] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode(\"id\");\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\n\t\t// Support: IE 6 - 7 only\n\t\t// getElementById is not reliable as a find shortcut\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar node, i, elems,\n\t\t\t\t\telem = context.getElementById( id );\n\n\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t// Verify the id attribute\n\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fall back on getElementsByName\n\t\t\t\t\telems = context.getElementsByName( id );\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile ( (elem = elems[i++]) ) {\n\t\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t}\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find[\"TAG\"] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === \"*\" ) {\n\t\t\t\twhile ( (elem = results[i++]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find[\"CLASS\"] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See https://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( (support.qsa = rnative.test( document.querySelectorAll )) ) {\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert(function( el ) {\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// https://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( el ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\n\t\t\t\t\"<option selected=''></option></select>\";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( el.querySelectorAll(\"[msallowcapture^='']\").length ) {\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\tif ( !el.querySelectorAll(\"[selected]\").length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\tif ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\t\trbuggyQSA.push(\"~=\");\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !el.querySelectorAll(\":checked\").length ) {\n\t\t\t\trbuggyQSA.push(\":checked\");\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\t\tif ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\t\trbuggyQSA.push(\".#.+[+~]\");\n\t\t\t}\n\t\t});\n\n\t\tassert(function( el ) {\n\t\t\tel.innerHTML = \"<a href='' disabled='disabled'></a>\" +\n\t\t\t\t\"<select disabled='disabled'><option/></select>\";\n\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = document.createElement(\"input\");\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\t\tel.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( el.querySelectorAll(\"[name=d]\").length ) {\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( el.querySelectorAll(\":enabled\").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: IE9-11+\n\t\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\t\tdocElem.appendChild( el ).disabled = true;\n\t\t\tif ( el.querySelectorAll(\":disabled\").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tel.querySelectorAll(\"*,:x\");\n\t\t\trbuggyQSA.push(\",.*:\");\n\t\t});\n\t}\n\n\tif ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector) )) ) {\n\n\t\tassert(function( el ) {\n\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( el, \"*\" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( el, \"[s!='']:x\" );\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\n\t\t});\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join(\"|\") );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join(\"|\") );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully self-exclusive\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t));\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( (b = b.parentNode) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\tcompare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\tif ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\t\t\treturn a === document ? -1 :\n\t\t\t\tb === document ? 1 :\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[i] === bp[i] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[i], bp[i] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\tap[i] === preferredDoc ? -1 :\n\t\t\tbp[i] === preferredDoc ? 1 :\n\t\t\t0;\n\t};\n\n\treturn document;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\t// Make sure that attribute selectors are quoted\n\texpr = expr.replace( rattributeQuotes, \"='$1']\" );\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t!compilerCache[ expr + \" \" ] &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch (e) {}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\t// Set document vars if needed\n\tif ( ( context.ownerDocument || context ) !== document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t(val = elem.getAttributeNode(name)) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.escape = function( sel ) {\n\treturn (sel + \"\").replace( rcssescape, fcssescape );\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( (elem = results[i++]) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( (node = elem[i++]) ) {\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === \"string\" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\t\"ATTR\": function( match ) {\n\t\t\tmatch[1] = match[1].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[3] = ( match[3] || match[4] || match[5] || \"\" ).replace( runescape, funescape );\n\n\t\t\tif ( match[2] === \"~=\" ) {\n\t\t\t\tmatch[3] = \" \" + match[3] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t\"CHILD\": function( match ) {\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[1] = match[1].toLowerCase();\n\n\t\t\tif ( match[1].slice( 0, 3 ) === \"nth\" ) {\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[3] ) {\n\t\t\t\t\tSizzle.error( match[0] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === \"even\" || match[3] === \"odd\" ) );\n\t\t\t\tmatch[5] = +( ( match[7] + match[8] ) || match[3] === \"odd\" );\n\n\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[3] ) {\n\t\t\t\tSizzle.error( match[0] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t\"PSEUDO\": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[6] && match[2];\n\n\t\t\tif ( matchExpr[\"CHILD\"].test( match[0] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[3] ) {\n\t\t\t\tmatch[2] = match[4] || match[5] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t(excess = tokenize( unquoted, true )) &&\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t(excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[0] = match[0].slice( 0, excess );\n\t\t\t\tmatch[2] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t\"TAG\": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() { return true; } :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t\"CLASS\": function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t(pattern = new RegExp( \"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\" )) &&\n\t\t\t\tclassCache( className, function( elem ) {\n\t\t\t\t\treturn pattern.test( typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\" );\n\t\t\t\t});\n\t\t},\n\n\t\t\"ATTR\": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\treturn operator === \"=\" ? result === check :\n\t\t\t\t\toperator === \"!=\" ? result !== check :\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n\t\t\t\t\tfalse;\n\t\t\t};\n\t\t},\n\n\t\t\"CHILD\": function( type, what, argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( (node = node[ dir ]) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t\"PSEUDO\": function( pseudo, argument ) {\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction(function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[i] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[i] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\t\t// Potentially complex pseudos\n\t\t\"not\": markFunction(function( selector ) {\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction(function( seed, matches, context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = unmatched[i]) ) {\n\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}) :\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tinput[0] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\tinput[0] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t}),\n\n\t\t\"has\": markFunction(function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t}),\n\n\t\t\"contains\": markFunction(function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t}),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\"lang\": markFunction( function( lang ) {\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test(lang || \"\") ) {\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( (elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( (elem = elem.parentNode) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t}),\n\n\t\t// Miscellaneous\n\t\t\"target\": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t\"root\": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t\"focus\": function( elem ) {\n\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n\t\t},\n\n\t\t// Boolean properties\n\t\t\"enabled\": createDisabledPseudo( false ),\n\t\t\"disabled\": createDisabledPseudo( true ),\n\n\t\t\"checked\": function( elem ) {\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn (nodeName === \"input\" && !!elem.checked) || (nodeName === \"option\" && !!elem.selected);\n\t\t},\n\n\t\t\"selected\": function( elem ) {\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t\"empty\": function( elem ) {\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t\"parent\": function( elem ) {\n\t\t\treturn !Expr.pseudos[\"empty\"]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t\"header\": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t\"input\": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t\"button\": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t},\n\n\t\t\"text\": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n\t\t\t\telem.type === \"text\" &&\n\n\t\t\t\t// Support: IE<8\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t( (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t\"first\": createPositionalPseudo(function() {\n\t\t\treturn [ 0 ];\n\t\t}),\n\n\t\t\"last\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t}),\n\n\t\t\"eq\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t}),\n\n\t\t\"even\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"odd\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"lt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"gt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t})\n\t}\n};\n\nExpr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || (match = rcomma.exec( soFar )) ) {\n\t\t\tif ( match ) {\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[0].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( (tokens = []) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( (match = rcombinators.exec( soFar )) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push({\n\t\t\t\tvalue: matched,\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[0].replace( rtrim, \" \" )\n\t\t\t});\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||\n\t\t\t\t(match = preFilters[ type ]( match ))) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push({\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t});\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[i].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tskip = combinator.next,\n\t\tkey = skip || dir,\n\t\tcheckNonElements = base && key === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, uniqueCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || (elem[ expando ] = {});\n\n\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});\n\n\t\t\t\t\t\tif ( skip && skip === elem.nodeName.toLowerCase() ) {\n\t\t\t\t\t\t\telem = elem[ dir ] || elem;\n\t\t\t\t\t\t} else if ( (oldCache = uniqueCache[ key ]) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn (newCache[ 2 ] = oldCache[ 2 ]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\tuniqueCache[ key ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[i]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[0];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[i], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (elem = unmatched[i]) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction(function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts( selector || \"*\", context.nodeType ? [ context ] : context, [] ),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( (elem = temp[i]) ) {\n\t\t\t\t\tmatcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = matcherOut[i]) ) {\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( (matcherIn[i] = elem) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, (matcherOut = []), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( (elem = matcherOut[i]) &&\n\t\t\t\t\t\t(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {\n\n\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[0].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[\" \"],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t(checkContext = context).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (matcher = Expr.relative[ tokens[i].type ]) ) {\n\t\t\tmatchers = [ addCombinator(elementMatcher( matchers ), matcher) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[j].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\t\ttokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" })\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( (tokens = tokens.slice( j )) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[\"TAG\"]( \"*\", outermost ),\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\t\t\t\toutermostContext = context === document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && (elem = elems[i]) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\tif ( !context && elem.ownerDocument !== document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( (matcher = elementMatchers[j++]) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( (elem = !matcher && elem) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( (matcher = setMatchers[j++]) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !(unmatched[i] || setMatched[i]) ) {\n\t\t\t\t\t\t\t\tsetMatched[i] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[i] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( (selector = compiled.selector || selector) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[0] = match[0].slice( 0 );\n\t\tif ( tokens.length > 2 && (token = tokens[0]).type === \"ID\" &&\n\t\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {\n\n\t\t\tcontext = ( Expr.find[\"ID\"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr[\"needsContext\"].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[i];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ (type = token.type) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( (find = Expr.find[ type ]) ) {\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( (seed = find(\n\t\t\t\t\ttoken.matches[0].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context\n\t\t\t\t)) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split(\"\").sort( sortOrder ).join(\"\") === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert(function( el ) {\n\t// Should return 1, but returns 4 (following)\n\treturn el.compareDocumentPosition( document.createElement(\"fieldset\") ) & 1;\n});\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert(function( el ) {\n\tel.innerHTML = \"<a href='#'></a>\";\n\treturn el.firstChild.getAttribute(\"href\") === \"#\" ;\n}) ) {\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert(function( el ) {\n\tel.innerHTML = \"<input/>\";\n\tel.firstChild.setAttribute( \"value\", \"\" );\n\treturn el.firstChild.getAttribute( \"value\" ) === \"\";\n}) ) {\n\taddHandle( \"value\", function( elem, name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert(function( el ) {\n\treturn el.getAttribute(\"disabled\") == null;\n}) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t\t(val = elem.getAttributeNode( name )) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\tnull;\n\t\t}\n\t});\n}\n\nreturn Sizzle;\n\n})( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\n\n// Deprecated\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\njQuery.escapeSelector = Sizzle.escape;\n\n\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\n\n\nfunction nodeName( elem, name ) {\n\n  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n};\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n\n\n\nvar risSimple = /^.[^:#\\[\\.,]*$/;\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( jQuery.isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Simple selector that can be filtered directly, removing non-Elements\n\tif ( risSimple.test( qualifier ) ) {\n\t\treturn jQuery.filter( qualifier, elements, not );\n\t}\n\n\t// Complex selector, compare the two sets, removing non-Elements\n\tqualifier = jQuery.filter( qualifier, elements );\n\treturn jQuery.grep( elements, function( elem ) {\n\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;\n\t} );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( jQuery.isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( jQuery.isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\ttargets = typeof selectors !== \"string\" && jQuery( selectors );\n\n\t\t// Positional selectors never match, since there's no _selection_ context\n\t\tif ( !rneedsContext.test( selectors ) ) {\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\n\t\t\t\t\t\ttargets.index( cur ) > -1 :\n\n\t\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n        if ( nodeName( elem, \"iframe\" ) ) {\n            return elem.contentDocument;\n        }\n\n        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n        // Treat the template element as a regular one in browsers that\n        // don't support it.\n        if ( nodeName( elem, \"template\" ) ) {\n            elem = elem.content || elem;\n        }\n\n        return jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = locked || options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( jQuery.isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && jQuery.type( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory && !firing ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\nfunction Identity( v ) {\n\treturn v;\n}\nfunction Thrower( ex ) {\n\tthrow ex;\n}\n\nfunction adoptValue( value, resolve, reject, noValue ) {\n\tvar method;\n\n\ttry {\n\n\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\tif ( value && jQuery.isFunction( ( method = value.promise ) ) ) {\n\t\t\tmethod.call( value ).done( resolve ).fail( reject );\n\n\t\t// Other thenables\n\t\t} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {\n\t\t\tmethod.call( value, resolve, reject );\n\n\t\t// Other non-thenables\n\t\t} else {\n\n\t\t\t// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n\t\t\t// * false: [ value ].slice( 0 ) => resolve( value )\n\t\t\t// * true: [ value ].slice( 1 ) => resolve()\n\t\t\tresolve.apply( undefined, [ value ].slice( noValue ) );\n\t\t}\n\n\t// For Promises/A+, convert exceptions into rejections\n\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n\t// Deferred#then to conditionally suppress rejection.\n\t} catch ( value ) {\n\n\t\t// Support: Android 4.0 only\n\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\treject.apply( undefined, [ value ] );\n\t}\n}\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, callbacks,\n\t\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"memory\" ), 2 ],\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t\"catch\": function( fn ) {\n\t\t\t\t\treturn promise.then( null, fn );\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( i, tuple ) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && jQuery.isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\n\t\t\t\t\t\treturn function() {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t\targs = arguments,\n\t\t\t\t\t\t\t\tmightThrow = function() {\n\t\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\n\t\t\t\t\t\t\t\t\t\tthrow new TypeError( \"Thenable self-resolution\" );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\t\tthen = returned &&\n\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\t\t\t( typeof returned === \"object\" ||\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === \"function\" ) &&\n\t\t\t\t\t\t\t\t\t\treturned.then;\n\n\t\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\t\tif ( jQuery.isFunction( then ) ) {\n\n\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\t\tif ( special ) {\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\t\tprocess = special ?\n\t\t\t\t\t\t\t\t\tmightThrow :\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.stackTrace );\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif ( depth ) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the stack, in case of exception\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getStackHook ) {\n\t\t\t\t\t\t\t\t\tprocess.stackTrace = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout( process );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tjQuery.isFunction( onProgress ) ?\n\t\t\t\t\t\t\t\t\tonProgress :\n\t\t\t\t\t\t\t\t\tIdentity,\n\t\t\t\t\t\t\t\tnewDefer.notifyWith\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tjQuery.isFunction( onFulfilled ) ?\n\t\t\t\t\t\t\t\t\tonFulfilled :\n\t\t\t\t\t\t\t\t\tIdentity\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tjQuery.isFunction( onRejected ) ?\n\t\t\t\t\t\t\t\t\tonRejected :\n\t\t\t\t\t\t\t\t\tThrower\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 5 ];\n\n\t\t\t// promise.progress = list.add\n\t\t\t// promise.done = list.add\n\t\t\t// promise.fail = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(\n\t\t\t\t\tfunction() {\n\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n\t\t\t\t\t\t// state = \"rejected\"\n\t\t\t\t\t\tstate = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[ 0 ][ 2 ].lock\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// progress_handlers.fire\n\t\t\t// fulfilled_handlers.fire\n\t\t\t// rejected_handlers.fire\n\t\t\tlist.add( tuple[ 3 ].fire );\n\n\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( singleValue ) {\n\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array( i ),\n\t\t\tresolveValues = slice.call( arguments ),\n\n\t\t\t// the master Deferred\n\t\t\tmaster = jQuery.Deferred(),\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function( i ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tresolveContexts[ i ] = this;\n\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( !( --remaining ) ) {\n\t\t\t\t\t\tmaster.resolveWith( resolveContexts, resolveValues );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\tif ( remaining <= 1 ) {\n\t\t\tadoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,\n\t\t\t\t!remaining );\n\n\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\tif ( master.state() === \"pending\" ||\n\t\t\t\tjQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n\n\t\t\t\treturn master.then();\n\t\t\t}\n\t\t}\n\n\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\twhile ( i-- ) {\n\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), master.reject );\n\t\t}\n\n\t\treturn master.promise();\n\t}\n} );\n\n\n// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\njQuery.Deferred.exceptionHook = function( error, stack ) {\n\n\t// Support: IE 8 - 9 only\n\t// Console exists when dev tools are open, which can happen at any time\n\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n\t\twindow.console.warn( \"jQuery.Deferred exception: \" + error.message, error.stack, stack );\n\t}\n};\n\n\n\n\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error;\n\t} );\n};\n\n\n\n\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred();\n\njQuery.fn.ready = function( fn ) {\n\n\treadyList\n\t\t.then( fn )\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error );\n\t\t} );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See #6781\n\treadyWait: 1,\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\t}\n} );\n\njQuery.ready.then = readyList.then;\n\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready );\n\n} else {\n\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( \"load\", completed );\n}\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( jQuery.type( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !jQuery.isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\tvalue :\n\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( chainable ) {\n\t\treturn elems;\n\t}\n\n\t// Gets\n\tif ( bulk ) {\n\t\treturn fn.call( elems );\n\t}\n\n\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\n};\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tcache: function( owner ) {\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see #8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\t// Always use camelCase key (gh-2257)\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ jQuery.camelCase( data ) ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ jQuery.camelCase( prop ) ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];\n\t},\n\taccess: function( owner, key, value ) {\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\treturn this.get( owner, key );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key !== undefined ) {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( Array.isArray( key ) ) {\n\n\t\t\t\t// If key is an array of keys...\n\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\tkey = key.map( jQuery.camelCase );\n\t\t\t} else {\n\t\t\t\tkey = jQuery.camelCase( key );\n\n\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\tkey = key in cache ?\n\t\t\t\t\t[ key ] :\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n\t\t\t}\n\n\t\t\ti = key.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ key[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <=35 - 45\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction getData( data ) {\n\tif ( data === \"true\" ) {\n\t\treturn true;\n\t}\n\n\tif ( data === \"false\" ) {\n\t\treturn false;\n\t}\n\n\tif ( data === \"null\" ) {\n\t\treturn null;\n\t}\n\n\t// Only convert to a number if it doesn't change the string\n\tif ( data === +data + \"\" ) {\n\t\treturn +data;\n\t}\n\n\tif ( rbrace.test( data ) ) {\n\t\treturn JSON.parse( data );\n\t}\n\n\treturn data;\n}\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = getData( data );\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = jQuery.camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\tdata = dataUser.get( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tthis.each( function() {\n\n\t\t\t\t// We always store the camelCased key\n\t\t\t\tdataUser.set( this, key, value );\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || Array.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar isHiddenWithinTree = function( elem, el ) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === \"none\" ||\n\t\t\telem.style.display === \"\" &&\n\n\t\t\t// Otherwise, check computed style\n\t\t\t// Support: Firefox <=43 - 45\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t\t// in the document.\n\t\t\tjQuery.contains( elem.ownerDocument, elem ) &&\n\n\t\t\tjQuery.css( elem, \"display\" ) === \"none\";\n\t};\n\nvar swap = function( elem, options, callback, args ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.apply( elem, args || [] );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted,\n\t\tscale = 1,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() {\n\t\t\t\treturn tween.cur();\n\t\t\t} :\n\t\t\tfunction() {\n\t\t\t\treturn jQuery.css( elem, prop, \"\" );\n\t\t\t},\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = ( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\tdo {\n\n\t\t\t// If previous iteration zeroed out, double until we get *something*.\n\t\t\t// Use string for doubling so we don't accidentally see scale as unchanged below\n\t\t\tscale = scale || \".5\";\n\n\t\t\t// Adjust and apply\n\t\t\tinitialInUnit = initialInUnit / scale;\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Update scale, tolerating zero or NaN from tween.cur()\n\t\t// Break the loop if scale is unchanged or perfect, or if we've just had enough.\n\t\t} while (\n\t\t\tscale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations\n\t\t);\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\n\nvar defaultDisplayMap = {};\n\nfunction getDefaultDisplay( elem ) {\n\tvar temp,\n\t\tdoc = elem.ownerDocument,\n\t\tnodeName = elem.nodeName,\n\t\tdisplay = defaultDisplayMap[ nodeName ];\n\n\tif ( display ) {\n\t\treturn display;\n\t}\n\n\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\n\tdisplay = jQuery.css( temp, \"display\" );\n\n\ttemp.parentNode.removeChild( temp );\n\n\tif ( display === \"none\" ) {\n\t\tdisplay = \"block\";\n\t}\n\tdefaultDisplayMap[ nodeName ] = display;\n\n\treturn display;\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\t// Determine new display value for elements that need to change\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t// inline or about-to-be-restored)\n\t\t\tif ( display === \"none\" ) {\n\t\t\t\tvalues[ index ] = dataPriv.get( elem, \"display\" ) || null;\n\t\t\t\tif ( !values[ index ] ) {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\n\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( display !== \"none\" ) {\n\t\t\t\tvalues[ index ] = \"none\";\n\n\t\t\t\t// Remember what we're overwriting\n\t\t\t\tdataPriv.set( elem, \"display\", display );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of the elements in a second loop to avoid constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\tif ( values[ index ] != null ) {\n\t\t\telements[ index ].style.display = values[ index ];\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.fn.extend( {\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHiddenWithinTree( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]+)/i );\n\nvar rscriptType = ( /^$|\\/(?:java|ecma)script/i );\n\n\n\n// We have to close these tags to support XHTML (#13200)\nvar wrapMap = {\n\n\t// Support: IE <=9 only\n\toption: [ 1, \"<select multiple='multiple'>\", \"</select>\" ],\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\n// Support: IE <=9 only\nwrapMap.optgroup = wrapMap.option;\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE <=9 - 11 only\n\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\n\tvar ret;\n\n\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\tret = context.getElementsByTagName( tag || \"*\" );\n\n\t} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\n\t\tret = context.querySelectorAll( tag || \"*\" );\n\n\t} else {\n\t\tret = [];\n\t}\n\n\tif ( tag === undefined || tag && nodeName( context, tag ) ) {\n\t\treturn jQuery.merge( [ context ], ret );\n\t}\n\n\treturn ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, contains, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( jQuery.type( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (#12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tcontains = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( contains ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0 - 4.3 only\n\t// Check state lost if the name is set (#11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (#14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Android <=4.1 only\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE <=11 only\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n} )();\nvar documentElement = document.documentElement;\n\n\n\nvar\n\trkeyEvent = /^key/,\n\trmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n\trtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// Support: IE <=9 only\n// See #13393 for more info\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Don't attach events to noData or text/comment nodes (but allow plain objects)\n\t\tif ( !elemData ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\tif ( selector ) {\n\t\t\tjQuery.find.matchesSelector( documentElement, selector );\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = {};\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( nativeEvent ) {\n\n\t\t// Make a writable jQuery.Event from the native event object\n\t\tvar event = jQuery.event.fix( nativeEvent );\n\n\t\tvar i, j, ret, matched, handleObj, handlerQueue,\n\t\t\targs = new Array( arguments.length ),\n\t\t\thandlers = ( dataPriv.get( this, \"events\" ) || {} )[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// Triggered event must either 1) have no namespace, or 2) have namespace(s)\n\t\t\t\t// a subset or equal to those in the bound event (both can have no namespace).\n\t\t\t\tif ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\tif ( delegateCount &&\n\n\t\t\t// Support: IE <=9\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n\t\t\tcur.nodeType &&\n\n\t\t\t// Support: Firefox <=42\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n\t\t\t// Support: IE 11 only\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n\t\t\t!( event.type === \"click\" && event.button >= 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (#13208)\n\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\tif ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\n\t\t\t\t\tmatchedHandlers = [];\n\t\t\t\t\tmatchedSelectors = {};\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\n\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matchedHandlers.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tcur = this;\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\taddProp: function( name, hook ) {\n\t\tObject.defineProperty( jQuery.Event.prototype, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget: jQuery.isFunction( hook ) ?\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn hook( this.originalEvent );\n\t\t\t\t\t}\n\t\t\t\t} :\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn this.originalEvent[ name ];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\tset: function( value ) {\n\t\t\t\tObject.defineProperty( this, name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: value\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t},\n\n\tfix: function( originalEvent ) {\n\t\treturn originalEvent[ jQuery.expando ] ?\n\t\t\toriginalEvent :\n\t\t\tnew jQuery.Event( originalEvent );\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tfocus: {\n\n\t\t\t// Fire native event if possible so blur/focus sequence is correct\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this !== safeActiveElement() && this.focus ) {\n\t\t\t\t\tthis.focus();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusin\"\n\t\t},\n\t\tblur: {\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this === safeActiveElement() && this.blur ) {\n\t\t\t\t\tthis.blur();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusout\"\n\t\t},\n\t\tclick: {\n\n\t\t\t// For checkbox, fire native event so checked state will be right\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this.type === \"checkbox\" && this.click && nodeName( this, \"input\" ) ) {\n\t\t\t\t\tthis.click();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, don't fire native .click() on links\n\t\t\t_default: function( event ) {\n\t\t\t\treturn nodeName( event.target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android <=2.3 only\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t\t// Create target properties\n\t\t// Support: Safari <=6 - 7 only\n\t\t// Target should not be a text node (#504, #13143)\n\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\n\t\t\tsrc.target.parentNode :\n\t\t\tsrc.target;\n\n\t\tthis.currentTarget = src.currentTarget;\n\t\tthis.relatedTarget = src.relatedTarget;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || jQuery.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each( {\n\taltKey: true,\n\tbubbles: true,\n\tcancelable: true,\n\tchangedTouches: true,\n\tctrlKey: true,\n\tdetail: true,\n\teventPhase: true,\n\tmetaKey: true,\n\tpageX: true,\n\tpageY: true,\n\tshiftKey: true,\n\tview: true,\n\t\"char\": true,\n\tcharCode: true,\n\tkey: true,\n\tkeyCode: true,\n\tbutton: true,\n\tbuttons: true,\n\tclientX: true,\n\tclientY: true,\n\toffsetX: true,\n\toffsetY: true,\n\tpointerId: true,\n\tpointerType: true,\n\tscreenX: true,\n\tscreenY: true,\n\ttargetTouches: true,\n\ttoElement: true,\n\ttouches: true,\n\n\twhich: function( event ) {\n\t\tvar button = event.button;\n\n\t\t// Add which for key events\n\t\tif ( event.which == null && rkeyEvent.test( event.type ) ) {\n\t\t\treturn event.charCode != null ? event.charCode : event.keyCode;\n\t\t}\n\n\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\n\t\tif ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {\n\t\t\tif ( button & 1 ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tif ( button & 2 ) {\n\t\t\t\treturn 3;\n\t\t\t}\n\n\t\t\tif ( button & 4 ) {\n\t\t\t\treturn 2;\n\t\t\t}\n\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn event.which;\n\t}\n}, jQuery.event.addProp );\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\n\t/* eslint-disable max-len */\n\n\t// See https://github.com/eslint/eslint/issues/3229\n\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,\n\n\t/* eslint-enable */\n\n\t// Support: IE <=10 - 11, Edge 12 - 13\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\trscriptTypeMasked = /^true\\/(.*)/,\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n// Prefer a tbody over its parent table for containing new rows\nfunction manipulationTarget( elem, content ) {\n\tif ( nodeName( elem, \"table\" ) &&\n\t\tnodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n\t\treturn jQuery( \">tbody\", elem )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tvar match = rscriptTypeMasked.exec( elem.type );\n\n\tif ( match ) {\n\t\telem.type = match[ 1 ];\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.access( src );\n\t\tpdataCur = dataPriv.set( dest, pdataOld );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdelete pdataCur.handle;\n\t\t\tpdataCur.events = {};\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = concat.apply( [], args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tisFunction = jQuery.isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( isFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( isFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), doc );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && jQuery.contains( node.ownerDocument, node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html.replace( rxhtmlTag, \"<$1></$2>\" );\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\nvar rmargin = ( /^margin/ );\n\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\n\n\n( function() {\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\n\t\t// This is a singleton, we need to execute it only once\n\t\tif ( !div ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdiv.style.cssText =\n\t\t\t\"box-sizing:border-box;\" +\n\t\t\t\"position:relative;display:block;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"top:1%;width:50%\";\n\t\tdiv.innerHTML = \"\";\n\t\tdocumentElement.appendChild( container );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\n\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\treliableMarginLeftVal = divStyle.marginLeft === \"2px\";\n\t\tboxSizingReliableVal = divStyle.width === \"4px\";\n\n\t\t// Support: Android 4.0 - 4.3 only\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.marginRight = \"50%\";\n\t\tpixelMarginRightVal = divStyle.marginRight === \"4px\";\n\n\t\tdocumentElement.removeChild( container );\n\n\t\t// Nullify the div so it wouldn't be stored in the memory and\n\t\t// it will also be a sign that checks already performed\n\t\tdiv = null;\n\t}\n\n\tvar pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE <=9 - 11 only\n\t// Style of cloned element affects source element cloned (#8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tcontainer.style.cssText = \"border:0;width:8px;height:0;top:0;left:-9999px;\" +\n\t\t\"padding:0;margin-top:1px;position:absolute\";\n\tcontainer.appendChild( div );\n\n\tjQuery.extend( support, {\n\t\tpixelPosition: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\tboxSizingReliable: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelMarginRight: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelMarginRightVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn reliableMarginLeftVal;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\n\t\t// Support: Firefox 51+\n\t\t// Retrieving style before computed somehow\n\t\t// fixes an issue with getting wrong values\n\t\t// on detached elements\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// getPropertyValue is needed for:\n\t//   .css('filter') (IE 9 only, #12537)\n\t//   .css('--customProperty) (#3144)\n\tif ( computed ) {\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\n\t\tif ( ret === \"\" && !jQuery.contains( elem.ownerDocument, elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\tif ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\trcustomProp = /^--/,\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t},\n\n\tcssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style;\n\n// Return a css property mapped to a potentially vendor prefixed property\nfunction vendorPropName( name ) {\n\n\t// Shortcut for names that are not vendor prefixed\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\n// Return a property mapped along what jQuery.cssProps suggests or to\n// a vendor prefixed property.\nfunction finalPropName( name ) {\n\tvar ret = jQuery.cssProps[ name ];\n\tif ( !ret ) {\n\t\tret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;\n\t}\n\treturn ret;\n}\n\nfunction setPositiveNumber( elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {\n\tvar i,\n\t\tval = 0;\n\n\t// If we already have the right measurement, avoid augmentation\n\tif ( extra === ( isBorderBox ? \"border\" : \"content\" ) ) {\n\t\ti = 4;\n\n\t// Otherwise initialize for horizontal or vertical properties\n\t} else {\n\t\ti = name === \"width\" ? 1 : 0;\n\t}\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin, so add it if we want it\n\t\tif ( extra === \"margin\" ) {\n\t\t\tval += jQuery.css( elem, extra + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\tif ( isBorderBox ) {\n\n\t\t\t// border-box includes padding, so remove it if we want content\n\t\t\tif ( extra === \"content\" ) {\n\t\t\t\tval -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// At this point, extra isn't border nor margin, so remove border\n\t\t\tif ( extra !== \"margin\" ) {\n\t\t\t\tval -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t} else {\n\n\t\t\t// At this point, extra isn't content, so add padding\n\t\t\tval += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// At this point, extra isn't content nor padding, so add border\n\t\t\tif ( extra !== \"padding\" ) {\n\t\t\t\tval += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn val;\n}\n\nfunction getWidthOrHeight( elem, name, extra ) {\n\n\t// Start with computed style\n\tvar valueIsBorderBox,\n\t\tstyles = getStyles( elem ),\n\t\tval = curCSS( elem, name, styles ),\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t// Computed unit is not pixels. Stop here and return.\n\tif ( rnumnonpx.test( val ) ) {\n\t\treturn val;\n\t}\n\n\t// Check for style in case a browser which returns unreliable values\n\t// for getComputedStyle silently falls back to the reliable elem.style\n\tvalueIsBorderBox = isBorderBox &&\n\t\t( support.boxSizingReliable() || val === elem.style[ name ] );\n\n\t// Fall back to offsetWidth/Height when value is \"auto\"\n\t// This happens for inline elements with no explicit setting (gh-3571)\n\tif ( val === \"auto\" ) {\n\t\tval = elem[ \"offset\" + name[ 0 ].toUpperCase() + name.slice( 1 ) ];\n\t}\n\n\t// Normalize \"\", auto, and prepare for extra\n\tval = parseFloat( val ) || 0;\n\n\t// Use the active box-sizing model to add/subtract irrelevant styles\n\treturn ( val +\n\t\taugmentWidthOrHeight(\n\t\t\telem,\n\t\t\tname,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles\n\t\t)\n\t) + \"px\";\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\t\"animationIterationCount\": true,\n\t\t\"columnCount\": true,\n\t\t\"fillOpacity\": true,\n\t\t\"flexGrow\": true,\n\t\t\"flexShrink\": true,\n\t\t\"fontWeight\": true,\n\t\t\"lineHeight\": true,\n\t\t\"opacity\": true,\n\t\t\"order\": true,\n\t\t\"orphans\": true,\n\t\t\"widows\": true,\n\t\t\"zIndex\": true,\n\t\t\"zoom\": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {\n\t\t\"float\": \"cssFloat\"\n\t},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = jQuery.camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name ),\n\t\t\tstyle = elem.style;\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to query the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug #9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (#7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\tif ( type === \"number\" ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tif ( isCustomProp ) {\n\t\t\t\t\tstyle.setProperty( name, value );\n\t\t\t\t} else {\n\t\t\t\t\tstyle[ name ] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = jQuery.camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name );\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to modify the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( i, name ) {\n\tjQuery.cssHooks[ name ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n\t\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\t\treturn getWidthOrHeight( elem, name, extra );\n\t\t\t\t\t\t} ) :\n\t\t\t\t\t\tgetWidthOrHeight( elem, name, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = extra && getStyles( elem ),\n\t\t\t\tsubtract = extra && augmentWidthOrHeight(\n\t\t\t\t\telem,\n\t\t\t\t\tname,\n\t\t\t\t\textra,\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\t\tstyles\n\t\t\t\t);\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ name ] = value;\n\t\t\t\tvalue = jQuery.css( elem, name );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( !rmargin.test( prefix ) ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 &&\n\t\t\t\t( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||\n\t\t\t\t\tjQuery.cssHooks[ tween.prop ] ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, inProgress,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\nfunction schedule() {\n\tif ( inProgress ) {\n\t\tif ( document.hidden === false && window.requestAnimationFrame ) {\n\t\t\twindow.requestAnimationFrame( schedule );\n\t\t} else {\n\t\t\twindow.setTimeout( schedule, jQuery.fx.interval );\n\t\t}\n\n\t\tjQuery.fx.tick();\n\t}\n}\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = jQuery.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n\t\tisBox = \"width\" in props || \"height\" in props,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Queue-skipping animations hijack the fx hooks\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Detect show/hide animations\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.test( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\n\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\t\t}\n\t}\n\n\t// Bail out if this is a no-op like .hide().hide()\n\tpropTween = !jQuery.isEmptyObject( props );\n\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\n\t\treturn;\n\t}\n\n\t// Restrict \"overflow\" and \"display\" styles during box animations\n\tif ( isBox && elem.nodeType === 1 ) {\n\n\t\t// Support: IE <=9 - 11, Edge 12 - 13\n\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t// from identically-valued overflowX and overflowY\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\trestoreDisplay = dataShow && dataShow.display;\n\t\tif ( restoreDisplay == null ) {\n\t\t\trestoreDisplay = dataPriv.get( elem, \"display\" );\n\t\t}\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\tif ( display === \"none\" ) {\n\t\t\tif ( restoreDisplay ) {\n\t\t\t\tdisplay = restoreDisplay;\n\t\t\t} else {\n\n\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\t\t\tshowHide( [ elem ] );\n\t\t\t}\n\t\t}\n\n\t\t// Animate inline elements as inline-block\n\t\tif ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\n\t\t\tif ( jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\tif ( !propTween ) {\n\t\t\t\t\tanim.done( function() {\n\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t} );\n\t\t\t\t\tif ( restoreDisplay == null ) {\n\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// Implement show/hide animations\n\tpropTween = false;\n\tfor ( prop in orig ) {\n\n\t\t// General show/hide setup for this element animation\n\t\tif ( !propTween ) {\n\t\t\tif ( dataShow ) {\n\t\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\n\t\t\t}\n\n\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\t\t\tif ( toggle ) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\n\t\t\t// Show elements before animating them\n\t\t\tif ( hidden ) {\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t}\n\n\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\tanim.done( function() {\n\n\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n\t\t\t\tif ( !hidden ) {\n\t\t\t\t\tshowHide( [ elem ] );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\t\tfor ( prop in orig ) {\n\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Per-property setup\n\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\t\tif ( !( prop in dataShow ) ) {\n\t\t\tdataShow[ prop ] = propTween.start;\n\t\t\tif ( hidden ) {\n\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\tpropTween.start = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = jQuery.camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( Array.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\t// If there's more to do, yield\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t}\n\n\t\t\t// If this was an empty animation, synthesize a final progress notification\n\t\t\tif ( !length ) {\n\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t}\n\n\t\t\t// Resolve the animation and report its conclusion\n\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\treturn false;\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( jQuery.isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tjQuery.proxy( result.stop, result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( jQuery.isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\t// Attach callbacks from options\n\tanimation\n\t\t.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\treturn animation;\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( jQuery.isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnothtmlwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tjQuery.isFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !jQuery.isFunction( easing ) && easing\n\t};\n\n\t// Go to the end state if fx are off\n\tif ( jQuery.fx.off ) {\n\t\topt.duration = 0;\n\n\t} else {\n\t\tif ( typeof opt.duration !== \"number\" ) {\n\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\n\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\n\n\t\t\t} else {\n\t\t\t\topt.duration = jQuery.fx.speeds._default;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( jQuery.isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue && type !== false ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = jQuery.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Run the timer and safely remove it when done (allowing for external removal)\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tjQuery.fx.start();\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( inProgress ) {\n\t\treturn;\n\t}\n\n\tinProgress = true;\n\tschedule();\n};\n\njQuery.fx.stop = function() {\n\tinProgress = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\n// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: Android <=4.3 only\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE <=11 only\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: IE <=11 only\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tnodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle,\n\t\t\tlowercaseName = name.toLowerCase();\n\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ lowercaseName ];\n\t\t\tattrHandle[ lowercaseName ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tlowercaseName :\n\t\t\t\tnull;\n\t\t\tattrHandle[ lowercaseName ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\trclickable.test( elem.nodeName ) &&\n\t\t\t\t\telem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule \"no-unused-expressions\" is disabled for this code\n// since it considers such accessions noop\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\n\t// Strip and collapse whitespace according to HTML spec\n\t// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace\n\tfunction stripAndCollapse( value ) {\n\t\tvar tokens = value.match( rnothtmlwhite ) || [];\n\t\treturn tokens.join( \" \" );\n\t}\n\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( typeof value === \"string\" && value ) {\n\t\t\tclasses = value.match( rnothtmlwhite ) || [];\n\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tif ( typeof value === \"string\" && value ) {\n\t\t\tclasses = value.match( rnothtmlwhite ) || [];\n\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar type = typeof value;\n\n\t\tif ( typeof stateVal === \"boolean\" && type === \"string\" ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\tif ( type === \"string\" ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\ti = 0;\n\t\t\t\tself = jQuery( this );\n\t\t\t\tclassNames = value.match( rnothtmlwhite ) || [];\n\n\t\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, isFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle most common string cases\n\t\t\t\tif ( typeof ret === \"string\" ) {\n\t\t\t\t\treturn ret.replace( rreturn, \"\" );\n\t\t\t\t}\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tisFunction = jQuery.isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( isFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (#2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || {} )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\tif ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\t\t\t\t\telem[ type ]();\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\njQuery.each( ( \"blur focus focusin focusout resize scroll click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\n\tfunction( i, name ) {\n\n\t// Handle event binding\n\tjQuery.fn[ name ] = function( data, fn ) {\n\t\treturn arguments.length > 0 ?\n\t\t\tthis.on( name, null, data, fn ) :\n\t\t\tthis.trigger( name );\n\t};\n} );\n\njQuery.fn.extend( {\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\n\n\n\nsupport.focusin = \"onfocusin\" in window;\n\n\n// Support: Firefox <=44\n// Firefox doesn't have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tdataPriv.remove( doc, fix );\n\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.access( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} );\n}\nvar location = window.location;\n\nvar nonce = jQuery.now();\n\nvar rquery = ( /\\?/ );\n\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11 only\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {\n\t\txml = undefined;\n\t}\n\n\tif ( !xml || xml.getElementsByTagName( \"parsererror\" ).length ) {\n\t\tjQuery.error( \"Invalid XML: \" + data );\n\t}\n\treturn xml;\n};\n\n\nvar\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( Array.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && jQuery.type( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, valueOrFunction ) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = jQuery.isFunction( valueOrFunction ) ?\n\t\t\t\tvalueOrFunction() :\n\t\t\t\tvalueOrFunction;\n\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" +\n\t\t\t\tencodeURIComponent( value == null ? \"\" : value );\n\t\t};\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} )\n\t\t.filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} )\n\t\t.map( function( i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\tif ( val == null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( Array.isArray( val ) ) {\n\t\t\t\treturn jQuery.map( val, function( val ) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\nvar\n\tr20 = /%20/g,\n\trhash = /#.*$/,\n\trantiCache = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\toriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n\n\t\tif ( jQuery.isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": JSON.parse,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( completed ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match;\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\n\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( completed ) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR );\n\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket #12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE <=8 - 11, Edge 12 - 13\n\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t// e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( completed ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\t// Remove hash to simplify url manipulation\n\t\tcacheURL = s.url.replace( rhash, \"\" );\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// Remember the hash so we can put it back\n\t\t\tuncached = s.url.slice( cacheURL.length );\n\n\t\t\t// If data is available, append data to url\n\t\t\tif ( s.data ) {\n\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\n\n\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add or update anti-cache param if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\tcacheURL = cacheURL.replace( rantiCache, \"$1\" );\n\t\t\t\tuncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce++ ) + uncached;\n\t\t\t}\n\n\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\ts.url = cacheURL + uncached;\n\n\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n\t\t} else if ( s.data && s.processData &&\n\t\t\t( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\n\t\t\ts.data = s.data.replace( r20, \"+\" );\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tcompleteDeferred.add( s.complete );\n\t\tjqXHR.done( s.success );\n\t\tjqXHR.fail( s.error );\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( completed ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcompleted = false;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\tif ( completed ) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\n\t\t\t\t// Propagate others as results\n\t\t\t\tdone( -1, e );\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Ignore repeat invocations\n\t\t\tif ( completed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcompleted = true;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( jQuery.isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\n\njQuery._evalUrl = function( url ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tcache: true,\n\t\tasync: false,\n\t\tglobal: false,\n\t\t\"throws\": true\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( this[ 0 ] ) {\n\t\t\tif ( jQuery.isFunction( html ) ) {\n\t\t\t\thtml = html.call( this[ 0 ] );\n\t\t\t}\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( jQuery.isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar isFunction = jQuery.isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function( selector ) {\n\t\tthis.parent( selector ).not( \"body\" ).each( function() {\n\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\n\njQuery.expr.pseudos.hidden = function( elem ) {\n\treturn !jQuery.expr.pseudos.visible( elem );\n};\njQuery.expr.pseudos.visible = function( elem ) {\n\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n\n\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = callback( \"error\" );\n\n\t\t\t\t// Support: IE 9 only\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n\tif ( s.crossDomain ) {\n\t\ts.contents.script = false;\n\t}\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain requests\n\tif ( s.crossDomain ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" ).prop( {\n\t\t\t\t\tcharset: s.scriptCharset,\n\t\t\t\t\tsrc: s.url\n\t\t\t\t} ).on(\n\t\t\t\t\t\"load error\",\n\t\t\t\t\tcallback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && jQuery.isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument = ( function() {\n\tvar body = document.implementation.createHTMLDocument( \"\" ).body;\n\tbody.innerHTML = \"<form></form><form></form>\";\n\treturn body.childNodes.length === 2;\n} )();\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( typeof data !== \"string\" ) {\n\t\treturn [];\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\n\tvar base, parsed, scripts;\n\n\tif ( !context ) {\n\n\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t// by using document.implementation\n\t\tif ( support.createHTMLDocument ) {\n\t\t\tcontext = document.implementation.createHTMLDocument( \"\" );\n\n\t\t\t// Set the base href for the created document\n\t\t\t// so any parsed elements with URLs\n\t\t\t// are based on the document's URL (gh-2965)\n\t\t\tbase = context.createElement( \"base\" );\n\t\t\tbase.href = document.location.href;\n\t\t\tcontext.head.appendChild( base );\n\t\t} else {\n\t\t\tcontext = document;\n\t\t}\n\t}\n\n\tparsed = rsingleTag.exec( data );\n\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = stripAndCollapse( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( jQuery.isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\n// Attach a bunch of functions for handling common AJAX events\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.expr.pseudos.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( jQuery.isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\toffset: function( options ) {\n\n\t\t// Preserve chaining for setter\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar doc, docElem, rect, win,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !elem ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n\t\t// Support: IE <=11 only\n\t\t// Running getBoundingClientRect on a\n\t\t// disconnected node in IE throws an error\n\t\tif ( !elem.getClientRects().length ) {\n\t\t\treturn { top: 0, left: 0 };\n\t\t}\n\n\t\trect = elem.getBoundingClientRect();\n\n\t\tdoc = elem.ownerDocument;\n\t\tdocElem = doc.documentElement;\n\t\twin = doc.defaultView;\n\n\t\treturn {\n\t\t\ttop: rect.top + win.pageYOffset - docElem.clientTop,\n\t\t\tleft: rect.left + win.pageXOffset - docElem.clientLeft\n\t\t};\n\t},\n\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// Fixed elements are offset from window (parentOffset = {top:0, left: 0},\n\t\t// because it is its only offset parent\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume getBoundingClientRect is there when computed position is fixed\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\n\t\t\t// Get *real* offsetParent\n\t\t\toffsetParent = this.offsetParent();\n\n\t\t\t// Get correct offsets\n\t\t\toffset = this.offset();\n\t\t\tif ( !nodeName( offsetParent[ 0 ], \"html\" ) ) {\n\t\t\t\tparentOffset = offsetParent.offset();\n\t\t\t}\n\n\t\t\t// Add offsetParent borders\n\t\t\tparentOffset = {\n\t\t\t\ttop: parentOffset.top + jQuery.css( offsetParent[ 0 ], \"borderTopWidth\", true ),\n\t\t\t\tleft: parentOffset.left + jQuery.css( offsetParent[ 0 ], \"borderLeftWidth\", true )\n\t\t\t};\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\n\t\t\t// Coalesce documents and windows\n\t\t\tvar win;\n\t\t\tif ( jQuery.isWindow( elem ) ) {\n\t\t\t\twin = elem;\n\t\t\t} else if ( elem.nodeType === 9 ) {\n\t\t\t\twin = elem.defaultView;\n\t\t\t}\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( { padding: \"inner\" + name, content: type, \"\": \"outer\" + name },\n\t\tfunction( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( jQuery.isWindow( elem ) ) {\n\n\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\treturn funcName.indexOf( \"outer\" ) === 0 ?\n\t\t\t\t\t\telem[ \"inner\" + name ] :\n\t\t\t\t\t\telem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable );\n\t\t};\n\t} );\n} );\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t}\n} );\n\njQuery.holdReady = function( hold ) {\n\tif ( hold ) {\n\t\tjQuery.readyWait++;\n\t} else {\n\t\tjQuery.ready( true );\n\t}\n};\njQuery.isArray = Array.isArray;\njQuery.parseJSON = JSON.parse;\njQuery.nodeName = nodeName;\n\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( typeof define === \"function\" && define.amd ) {\n\tdefine( \"jquery\", [], function() {\n\t\treturn jQuery;\n\t} );\n}\n\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( !noGlobal ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\nreturn jQuery;\n} );\n","import {\n    Dangle,\n    Direction,\n    Edge,\n    EdgeOperation,\n    Face,\n    faces,\n    Matrix2,\n    make_matrix2,\n    Partition,\n    Point2,\n } from './datatypes';\n\nimport {is, List, Map, Set} from 'immutable';\n\nlet face_vertices = Map<Face, Matrix2>([\n    [Face.t, make_matrix2([\n        [0,  1,  2 ],\n        [9,  25, 15],\n        [16, 24, 22]])],\n    [Face.b, make_matrix2([\n        [20, 19, 18],\n        [13, 12, 11],\n        [8,  7,  6 ]])],\n    [Face.n, make_matrix2([\n        [2,  1,  0 ],\n        [5,  4,  3 ],\n        [8,  7,  6 ]])],\n    [Face.e, make_matrix2([\n        [22, 15, 2 ],\n        [21, 14, 5 ],\n        [20, 13, 8 ]])],\n    [Face.s, make_matrix2([\n        [16, 24, 22],\n        [17, 23, 21],\n        [18, 19, 20]])],\n    [Face.w, make_matrix2([\n        [0,  9,  16],\n        [3,  10, 17],\n        [6,  11, 18]])]\n]);\n\nlet face_quadrants = Map<Face, Matrix2>([\n    [Face.t, make_matrix2([\n        [0,  1 ],\n        [2,  3 ]])],\n    [Face.b, make_matrix2([\n        [4,  5 ],\n        [6,  7 ]])],\n    [Face.n, make_matrix2([\n        [8,  9 ],\n        [10, 11]])],\n    [Face.e, make_matrix2([\n        [12, 13],\n        [14, 15]])],\n    [Face.s, make_matrix2([\n        [16, 17],\n        [18, 19]])],\n    [Face.w, make_matrix2([\n        [20, 21],\n        [22, 23]])],\n]);\n\nfunction build_edge_quadrant_mappings(): [Map<number, List<Edge>>, Map<Edge, List<number>>] {\n    let quadrant_2_edges = Map<number, List<Edge>>();\n    let edge_2_quadrants = Map<Edge, List<number>>();\n\n    for (let f of faces){\n        let vs = face_vertices.get(f);\n        let qs = face_quadrants.get(f);\n        for (let [x, y] of [[0,0], [1,0], [0,1], [1,1]]){\n            let q_edges = get_quadrant_edges(vs, x, y);\n            quadrant_2_edges = quadrant_2_edges.set(qs.get(x, y), q_edges);\n            q_edges.forEach(function (qe) {\n                let q = qs.get(x, y);\n                if (edge_2_quadrants.has(qe)) {\n                    edge_2_quadrants = edge_2_quadrants.update(qe, (xs) => xs.push(q));\n                } else {\n                    edge_2_quadrants = edge_2_quadrants.set(qe, List<number>([q]));\n                }\n            });\n        }\n    }\n\n    return [quadrant_2_edges, edge_2_quadrants];\n}\n\nfunction get_quadrant_edges(m: Matrix2, x: number, y: number): List<Edge> {\n    let offsets = [\n        [0,0,0,1],\n        [0,0,1,0],\n        [1,1,0,1],\n        [1,1,1,0]\n    ];\n    let edges = List<Edge>();\n    for (let [x1, y1, x2, y2] of offsets){\n        let e1 = m.get(x+x1, y+y1);\n        let e2 = m.get(x+x2, y+y2);\n        if (e2 < e1){\n            edges = edges.push(new Edge(e2, e1));\n        } else {\n            edges = edges.push(new Edge(e1, e2));\n        }\n    }\n    return edges;\n}\n\nexport let [quadrant_2_edges, edge_2_quadrants] = build_edge_quadrant_mappings();\n\nfunction get_quadrant_partition(quadrant: number, cut_edges: List<Edge>) {\n    let current_partition = Set<number>([quadrant]).asMutable();\n    let horizon = List<Edge>(quadrant_2_edges.get(quadrant)).asMutable();\n\n    while (horizon.size > 0){\n        let e = horizon.first(); horizon = horizon.shift();\n        if (cut_edges.contains(e)){\n            continue;\n        }\n        let next_qs = Set<number>(edge_2_quadrants.get(e));\n        let new_qs = next_qs.subtract(current_partition);\n        if (new_qs.size > 0) {\n            new_qs.forEach(function (q){\n                horizon.push(...quadrant_2_edges.get(q).toArray());\n                current_partition.add(q);\n            });\n        }\n    }\n    return current_partition.asImmutable();\n}\n\nfunction range(x: number){\n    let arr: number[] = [];\n    for (let i = 0; i < x; i++){\n         arr.push(i);\n    } \n    return arr;\n}\n\nfunction get_partitions(cut_edges: List<Edge>){\n    let partitions = List<Partition>().asMutable();\n    let quadrants = Set<number>(range(24)).asMutable();\n    while (quadrants.size > 0){\n        let q = quadrants.first(); quadrants.remove(q);\n        let partition = get_quadrant_partition(q, cut_edges);\n        partitions.push(partition);\n        quadrants.subtract(partition);\n    }\n    return partitions.asImmutable();\n}\n\nexport class FaceMesh {\n    readonly vertices: Matrix2;\n    readonly quadrants: Matrix2;\n\n    constructor(vertices: Matrix2, quadrants: Matrix2){\n        this.vertices = vertices;\n        this.quadrants = quadrants;\n    }\n\n    rotate(degrees: number) {\n        return new FaceMesh(this.vertices.rotate(degrees), this.quadrants.rotate(degrees));\n    }\n}\n\ninterface BoxMeshParams {\n    dimensions?: [number, number, number],\n    face_meshes?: Map<Face, FaceMesh>,\n    cut_edges?: List<Edge>\n}\n\nexport class BoxMesh{\n    readonly dimensions: [number, number, number];\n    readonly face_meshes: Map<Face, FaceMesh>;\n    readonly cut_edges: List<Edge>;\n\n    constructor({dimensions, face_meshes, cut_edges}: BoxMeshParams){\n        this.dimensions = dimensions;\n        \n        if (face_meshes === undefined) {\n            face_meshes = Map<Face, FaceMesh>();\n            for (let f of faces){\n                face_meshes = face_meshes.set(f,\n                    new FaceMesh(face_vertices.get(f), face_quadrants.get(f)));\n            }\n        }\n        this.face_meshes = face_meshes;\n\n        if (cut_edges === undefined){\n            cut_edges = List<Edge>();\n        }\n        this.cut_edges = cut_edges;\n    }\n\n    update({dimensions, face_meshes, cut_edges}: BoxMeshParams){\n        if (dimensions === undefined){\n            dimensions = this.dimensions;\n        }\n\n        if (face_meshes === undefined){\n            face_meshes = this.face_meshes;\n        }\n\n        if (cut_edges === undefined){\n            cut_edges = this.cut_edges;\n        }\n        return new BoxMesh({dimensions, face_meshes, cut_edges});\n    }\n\n    cut(face: Face, start: Point2, end: Point2){\n        return this.cut_or_tape(EdgeOperation.cut, face, start, end);\n    }\n\n    tape(face: Face, start: Point2, end: Point2){\n        return this.cut_or_tape(EdgeOperation.tape, face, start, end);\n    }\n\n    cut_or_tape(operation: EdgeOperation, face: Face, start: Point2, end: Point2): BoxMesh {\n        let [x1, y1] = start;\n        let [x2, y2] = end;\n\n        if (Math.abs(x2 - x1) + Math.abs(y2 - y1) != 1){\n            throw `start and end points of cut/tape are not adjacent: ${start} and ${end}`;\n        }\n\n        let f = this.face_meshes.get(face).vertices;\n        let fs = f.get(x1, y1);\n        let fe = f.get(x2, y2);\n\n        let new_edge = new Edge(fs, fe);\n\n        let new_cut_edges = this.cut_edges;\n        if (operation == EdgeOperation.cut && !new_cut_edges.contains(new_edge)) {\n            new_cut_edges = new_cut_edges.push(new_edge);\n        }\n\n        if (operation == EdgeOperation.tape && new_cut_edges.contains(new_edge)) {\n            new_cut_edges = new_cut_edges.remove(new_cut_edges.indexOf(new_edge));\n        }\n\n        return this.update({cut_edges: new_cut_edges});\n    }\n\n    get_rends() {\n        return get_partitions(this.cut_edges);\n    }\n\n    get_free_rends() {\n        return this.get_rends().filter(x => !this.is_partition_fixed(x));\n    }\n\n    is_partition_fixed(partition: Set<number>) {\n        let face_membership = this.get_partition_face_membership(partition);\n        return face_membership.get(Face.b) > 0;\n    }\n\n    get_partition_face_membership(partition: Partition) {\n        let face_membership = Map<Face, number>().asMutable();\n        for (let f of faces) {\n            let total = 0;\n            let quadrants = this.face_meshes.get(f).quadrants;\n            partition.forEach(function (q) {\n                if (quadrants.contains(q)){\n                    total += 1;\n                }\n            });\n            face_membership.set(f, total);\n        }\n        return face_membership.asImmutable();\n    }\n\n    get_quadrant_face(quadrant: number){\n        for (let f of faces){\n            if (this.face_meshes.get(f).quadrants.contains(quadrant)) {\n                return f;\n            }\n        }\n    }\n\n    get_dangles() {\n        let rends = this.get_rends();\n        let fixed_rends = rends.filter(x => this.is_partition_fixed(x));\n\n        let dangles = List<Dangle>().asMutable();\n        let inner_this = this;\n\n        this.get_box_edges().forEach(function ([e1, e2]) {\n            let e_2_q_2_f = Map<Edge, Map<number, Face>>().asMutable();\n            for (let e of [e1, e2]){ //initialize e_2_q_2_f\n                let inner_map = Map<number, Face>().asMutable();\n                edge_2_quadrants.get(e).forEach(function (q) {\n                    inner_map.set(q, inner_this.get_quadrant_face(q));\n                });\n                 inner_map = inner_map.asImmutable()\n                e_2_q_2_f.set(e, inner_map);\n            }\n            e_2_q_2_f = e_2_q_2_f.asImmutable();\n\n            let edge_dangles = List<Dangle>().asMutable();\n\n            for (let es of [[e1, e2], [e1], [e2]]) {\n                let new_cut_edges = inner_this.cut_edges.push(...es);\n                let new_partitions = get_partitions(new_cut_edges);\n\n                if (new_partitions.size != rends.size) {\n\n                    new_partitions.forEach(function (np) {\n                        if (rends.contains(np)){\n                            return;\n                        }\n\n                        if (inner_this.is_partition_fixed(np)) {\n                            return;\n                        }\n\n                        let any_intersections = false;\n                        fixed_rends.forEach(function (fixed_rend) {\n                            if (np.intersect(fixed_rend).size > 0){\n                                any_intersections = true;\n                            }\n                        });\n                        if (!any_intersections) {\n                            return;\n                        }\n\n                        let any_dangle_matches = false;\n                        edge_dangles.forEach(function (ed) {\n                            if (is(np, ed.partition)){\n                                any_dangle_matches = true;\n                                return;\n                            }\n                        });\n                        if (any_dangle_matches){\n                            return;\n                        }\n\n                        let q_2_fs = List<Map<number, Face>>().asMutable();\n                        for (let e of es) {\n                            q_2_fs.push(e_2_q_2_f.get(e));\n                        }\n                        q_2_fs = q_2_fs.asImmutable();\n\n                        let fixed_fs = List<Face>().asMutable();\n                        let dangle_fs = List<Face>().asMutable();\n\n                        q_2_fs.forEach(function (q_2_f) {\n                            q_2_f.entrySeq().forEach(function ([q, f]) {\n                                if (np.contains(q)) {\n                                    dangle_fs = dangle_fs.push(f);\n                                } else {\n                                    fixed_fs = fixed_fs.push(f);\n                                }\n                            });\n                        });\n                        fixed_fs = fixed_fs.asImmutable();\n                        dangle_fs = dangle_fs.asImmutable();\n\n                        if (fixed_fs.toSet().size != 1 || dangle_fs.toSet().size != 1) {\n                            return;\n                        }\n\n                        edge_dangles.push(new Dangle(\n                            np, List<Edge>(es), fixed_fs.get(0), dangle_fs.get(0)));\n                    });\n                }\n            }\n            edge_dangles = edge_dangles.asImmutable();\n            dangles.push(...edge_dangles.toArray());\n        });\n        dangles = List<Dangle>(dangles.sortBy(x => x.partition.size));\n\n        let final_dangles = List<Dangle>().asMutable();\n\n        for (let i = 0; i < dangles.size; i++) {\n            let p = dangles.get(i).partition;\n\n            let any_supersets = false;\n            dangles.skip(i+1).forEach(function (d) {\n                if (p.isSubset(d.partition)) {\n                    any_supersets = true;\n                }\n            })\n            if (!any_supersets) {\n                final_dangles.push(dangles.get(i));\n            }\n        }\n        final_dangles = final_dangles.asImmutable();\n\n        return final_dangles;\n    }\n\n    get_box_edges() {\n        let edges = List<[Edge, Edge]>();\n\n        let t_b_edge_coords: [number, number][][] = [\n            [[0,0], [0,1], [0,2]],\n            [[0,0], [1,0], [2,0]],\n            [[2,0], [2,1], [2,2]],\n            [[0,2], [1,2], [2,2]]\n        ];\n\n        for (let f of [Face.t, Face.b]) {\n            let m = this.face_meshes.get(f).vertices;\n\n            for (let [[p1x, p1y], [p2x, p2y], [p3x, p3y]] of t_b_edge_coords) {\n                let v1 = m.get(p1x, p1y);\n                let v2 = m.get(p2x, p2y);\n                let v3 = m.get(p3x, p3y);\n\n                let e1 = new Edge(v1, v2);\n\n                let e2 = new Edge(v2, v3);\n\n                edges = edges.push([e1, e2]);\n            }\n        }\n\n        for (let f of [Face.n, Face.e, Face.s, Face.w]) {\n            let m = this.face_meshes.get(f).vertices;\n\n            let v1 = m.get(0,0);\n            let v2 = m.get(0,1);\n            let v3 = m.get(0,2);\n\n            let e1 = new Edge(v1, v2);\n\n            let e2 = new Edge(v2, v3);\n\n            edges = edges.push([e1, e2]);\n\n        }\n        return edges;\n    }    \n\n    rotate_y(degrees: number) {\n        //validate degrees somehow\n\n        if (degrees == 0 || degrees == 360) {\n            return this;\n        }\n\n        let new_faces = rotate_y_faces(this.face_meshes, degrees);\n    \n        if (degrees = 180) {\n            return this.update({face_meshes: new_faces});\n        } else {\n            let [x, y, z] = this.dimensions;\n            return this.update({dimensions: [z, y, x], face_meshes: new_faces});\n        }\n    }\n\n    roll(direction: Direction){\n        let [x, y, z] = this.dimensions;\n        let new_x, new_y, new_z;\n        if (direction == Direction.n || direction == Direction.s) {\n            [new_x, new_y, new_z] = [x, y, z];\n        } else {\n            [new_x, new_y, new_z] = [y, x, z];\n        }\n\n        let new_faces = roll_faces(this.face_meshes, direction);\n\n        return this.update({dimensions: [new_x, new_y, new_z], face_meshes: new_faces});\n    }\n\n    description(){\n        let face_descr = Map<Face, string>([\n            [Face.t, 'top'],\n            [Face.b, 'bottom'],\n            [Face.n, 'back'],\n            [Face.e, 'right'],\n            [Face.s, 'front'],\n            [Face.w, 'left']\n        ]);\n\n        let [x, y, z] = this.dimensions;\n\n        let result = `The box's dimensions measure ${x} by ${y} by ${z}`;\n\n        let rends = this.get_free_rends();\n        let inner_this = this;\n\n        rends.forEach(function (fr) {\n            let face_membership = inner_this.get_partition_face_membership(fr);\n            let faces_present: Face[] =[];\n            for (let f of faces){\n                if (face_membership.get(f) > 0) {\n                    faces_present.push(f);\n                }\n            }\n\n            let faces_text: string;\n            if (faces_present.length == 1) {\n                faces_text = face_descr.get(faces_present[0]) + ' face';\n            } else {\n                faces_text = faces_present.slice(0, -1).map(f => face_descr.get(f)).join(', ');\n                faces_text += ` and ${face_descr.get(faces_present[faces_present.length-1])} faces`;\n            }\n\n            result += `\\nA portion of the box's ${faces_text} has been rended free; it lies on the floor off to the side.`;\n        });\n\n        let dangles = this.get_dangles();\n\n        dangles.forEach(function (d) {\n            let face_membership = inner_this.get_partition_face_membership(d.partition);\n            let faces_present: Face[] = [];\n            for (let f of faces){\n                if (face_membership.get(f) > 0) {\n                    faces_present.push(f);\n                }\n            }\n\n            let faces_text: string;\n            if (faces_present.length == 1) {\n                faces_text = face_descr.get(faces_present[0]) + ' face';\n            } else {\n                faces_text = faces_present.slice(0, -1).map(f => face_descr.get(f)).join(', ');\n                faces_text += ` and ${face_descr.get(faces_present[faces_present.length-1])} faces`;\n            }\n\n            result += `\\nA portion of the box's ${faces_text} sits on a free hinge; from the ${face_descr.get(d.free_face)} face it can be swung to the ${face_descr.get(d.fixed_face)}.`;\n        });\n\n        return result;\n    }\n}\n\nfunction rotate_y_faces(fs: Map<Face, FaceMesh>, degrees: number) {\n    if (degrees == 0 || degrees == 360) {\n        return fs;\n    }\n\n    let shift = degrees / 90;\n    let face_cycle = [Face.n, Face.w, Face.s, Face.e, Face.n, Face.w, Face.s, Face.e];\n\n    let new_faces = Map<Face, FaceMesh>();\n\n    for (let f of [Face.n, Face.e, Face.s, Face.w]){\n        let ind = face_cycle.indexOf(f);\n        new_faces = new_faces.set(f, fs.get(face_cycle[ind + shift]));\n    }\n\n    for (let f of [Face.t, Face.b]){\n        new_faces = new_faces.set(f, fs.get(f).rotate(degrees));\n    }\n\n    return new_faces;\n}\n\nfunction roll_faces(fs: Map<Face, FaceMesh>, direction: Direction){\n    let new_faces = Map<Face, FaceMesh>().asMutable();\n\n    if (direction == Direction.n) {\n        new_faces.set(\n            Face.n, fs.get(Face.t).rotate(180)).set(\n            Face.t, fs.get(Face.s)).set(\n            Face.s, fs.get(Face.b)).set(\n            Face.b, fs.get(Face.n).rotate(180)).set(\n            Face.e, fs.get(Face.e).rotate(90)).set(\n            Face.w, fs.get(Face.w).rotate(270));\n    } else if (direction == Direction.s) {\n        new_faces.set(\n            Face.s, fs.get(Face.t)).set(\n            Face.t, fs.get(Face.n).rotate(180)).set(\n            Face.n, fs.get(Face.b)).set(\n            Face.b, fs.get(Face.s).rotate(180)).set(\n            Face.e, fs.get(Face.e).rotate(270)).set(\n            Face.w, fs.get(Face.w).rotate(90));\n    } else if (direction == Direction.e) {\n        new_faces.set(\n            Face.e, fs.get(Face.t).rotate(90)).set(\n            Face.t, fs.get(Face.w).rotate(90)).set(\n            Face.w, fs.get(Face.b).rotate(270)).set(\n            Face.b, fs.get(Face.e).rotate(270)).set(\n            Face.n, fs.get(Face.n).rotate(270)).set(\n            Face.s, fs.get(Face.s).rotate(90));\n    } else if (direction == Direction.w) {\n        new_faces.set(\n            Face.w, fs.get(Face.t).rotate(270)).set(\n            Face.t, fs.get(Face.e).rotate(270)).set(\n            Face.e, fs.get(Face.b).rotate(90)).set(\n            Face.b, fs.get(Face.w).rotate(90)).set(\n            Face.n, fs.get(Face.n).rotate(90)).set(\n            Face.s, fs.get(Face.s).rotate(270));\n    }\n\n    return new_faces.asImmutable();\n}\n\n\nexport function test(){\n    let bm = new BoxMesh({dimensions: [2,3,4]});\n\n    let bm2 = bm.cut(Face.t, [0,0], [1,0]).cut(Face.t, [1,0], [1,1]).cut(Face.t, [1,1], [0,1]).cut(Face.t, [0,1], [0,0]);\n    let bm3 = bm2.cut(Face.t, [0,1], [0,2]).cut(Face.s, [0, 0], [0, 1]).cut(Face.s, [0,1], [1,1]).cut(Face.s, [1,1], [1,0]).cut(Face.t, [1, 2], [1,1])\n\n    let bm4 = bm.cut(Face.t, [0,0], [1,0]).roll(Direction.s).cut(Face.t, [0,2], [0,1]).cut(Face.t, [0,1], [1,1]).cut(Face.t, [1,1], [1,2]);\n\n    let bm5 = bm.cut(Face.n, [0,0], [1,0]).cut(Face.n, [1,0], [2,0]).cut(Face.n, [2,0], [2,1]).cut(Face.n, [2,1], [1,1]).cut(Face.n, [1,1], [0,1]).cut(Face.n, [1,1], [1, 0]).cut(Face.n, [0,1], [0,0]);\n\n    let bm6 = bm.cut(Face.t, [0,0], [0,1]).cut(Face.t, [0,1], [1,1]).cut(Face.t, [1,1], [1,0]);\n    let bm7 = bm2.cut(Face.t, [0,1], [0,2]).cut(Face.t, [1,1], [1,2]);\n\n    let bm8 = (bm.cut(Face.t, [0,0], [1,0]).cut(Face.t, [1,0], [2,0]).cut(Face.t, [2,0], [2,1]).cut(Face.t, [2,1], [2,2])\n             .cut(Face.t, [0,2], [0,1]).cut(Face.t, [0,1], [1,1]).cut(Face.t, [1,1], [1,2])\n             .cut(Face.s, [1,0], [1,1]).cut(Face.s, [1,1], [0,1])\n             .cut(Face.w, [0,0], [0,1]).cut(Face.w, [0,1], [1,1]).cut(Face.w, [1,1], [2,1]));\n\n    let bms: BoxMesh[] = [bm, bm2, bm3, bm4, bm5, bm6, bm7, bm8];\n    for (let i = 0; i < bms.length; i++) {\n        let b = bms[i];\n\n        console.log('Box #', i+1);\n        console.log();\n        console.log(b.description());\n        console.log();\n        console.log();\n    }\n}\n","import {Map} from 'immutable';\nimport {Direction, EdgeOperation, EdgeDirection, Face, RelativePosition, RendOperation} from './datatypes';\n\nexport type Token = string;\n\nexport type HorizPositionWord = 'left' | 'center' | 'right';\nexport type VertPositionWord = 'top' | 'middle' | 'bottom';\n\nexport type PositionWord = HorizPositionWord | VertPositionWord;\nexport let word_2_relative_position = Map<PositionWord, RelativePosition>([\n    ['left', RelativePosition.left],\n    ['center', RelativePosition.center],\n    ['right', RelativePosition.right],\n    ['top', RelativePosition.top],\n    ['middle', RelativePosition.middle],\n    ['bottom', RelativePosition.bottom]\n]);\n\nexport type FaceWord = 'back' | 'front' | 'right' | 'left' | 'top' | 'bottom';\nexport let word_2_face = Map<FaceWord, Face>([\n    ['back', Face.n],\n    ['front', Face.s],\n    ['right', Face.e],\n    ['left', Face.w],\n    ['top', Face.t],\n    ['bottom', Face.b]\n]);\n\nexport type RendOpWord = 'open' | 'close';\nexport let word_2_rend_op = Map<RendOpWord, RendOperation>([\n    ['open', RendOperation.open],\n    ['close', RendOperation.close]\n]);\n\nexport type EdgeOpWord = 'cut' | 'tape';\nexport let word_2_edge_op = Map<EdgeOpWord, EdgeOperation>([\n    ['cut', EdgeOperation.cut],\n    ['tape', EdgeOperation.tape]\n]);\n\nexport type EdgeDirWord = 'horizontally' | 'vertically';\nexport let word_2_edge_dir = Map<EdgeDirWord, EdgeDirection>([\n    ['horizontally', EdgeDirection.horizontal],\n    ['vertically', EdgeDirection.vertical]\n]);\n\nexport type RotateYDirWord = \"left\" | \"right\";\nexport let word_2_degrees = Map<RotateYDirWord, number>([\n    ['left', 270],\n    ['right', 90]\n]);\n\nexport type RollDirWord = \"forward\" | \"backward\" | \"left\" | \"right\";\nexport let word_2_dir = Map<RollDirWord, Direction>([\n    ['forward', Direction.n],\n    ['backward', Direction.s],\n    ['left', Direction.w],\n    ['right', Direction.e]\n]);","import {\n    Collection,\n    hash,\n    isImmutable,\n    List,\n    Map,\n    Set\n} from 'immutable';\n\nexport type Partition = Set<number>;\n\nexport class Edge {\n    readonly start: number;\n    readonly end: number;\n\n    constructor(start: number, end: number){\n        if (end < start){\n            this.start = end;\n            this.end = start;\n        } else {\n            this.start = start;\n            this.end = end;\n        }\n    }\n\n    equals(other:Edge){\n        return (this.start == other.start && this.end == other.end);\n    }\n\n    hashCode() {\n        return hash(hash(this.start) + hash(this.end));\n        // fuck\n        // return ( this.end << 16 ) ^ this.start;\n    }\n}\n\nexport enum Face {\n    n = 0,\n    s = 1,\n    e = 2,\n    w = 3,\n    t = 4,\n    b = 5\n}\n\nexport let faces = [Face.n, Face.s, Face.e, Face.w, Face.t, Face.b];\n\nexport enum Direction {\n    n = 0,\n    s = 1,\n    e = 2,\n    w = 3\n}\n\nexport let directions = [Direction.n, Direction.s, Direction.e, Direction.w];\n\nexport let direction_2_face = Map<Direction, Face>([\n    [Direction.n, Face.n],\n    [Direction.s, Face.s],\n    [Direction.e, Face.e],\n    [Direction.w, Face.w]\n]);\n\nexport class Dangle {\n    readonly partition: Partition;\n    readonly edges: List<Edge>;\n    readonly fixed_face: Face;\n    readonly free_face: Face;\n\n    constructor(partition: Partition, edges: List<Edge>, fixed_face: Face, free_face: Face) {\n        this.partition = partition;\n        this.edges = edges;\n        this.fixed_face = fixed_face;\n        this.free_face = free_face;\n    }\n\n    equals(other: Dangle){\n        return (\n            this.partition.equals(other.partition)\n            && this.edges.equals(other.edges)\n            && this.fixed_face === other.fixed_face\n            && this.free_face === other.free_face);\n    }\n\n    hashCode() {\n        return hash(hash(this.partition) + hash(this.edges) + hash(this.fixed_face) + hash(this.free_face));\n        //let faces_hash = (this.fixed_face << 16) ^ this.free_face; //fuck!\n        //return this.partition.hashCode() + this.edges.hashCode() + faces_hash;\n    }\n}\n\nexport type Point2 = [number, number];\n\nexport function make_matrix2(data_obj: number[][]) {\n    let dim_y = data_obj.length;\n    let dim_x = data_obj[0].length;\n\n    let data = new Int16Array(data_obj.reduce((x, y) => x.concat(y)));\n    // TODO complain if the total length is wrong\n    return new Matrix2(data, dim_x, dim_y);\n}\n\nexport class Matrix2 {\n    readonly dim_x: number;\n    readonly dim_y: number;\n    readonly data: Int16Array;\n    \n    constructor (data: Int16Array, dim_x: number, dim_y: number) {\n        this.data = data;\n        this.dim_x = dim_x;\n        this.dim_y = dim_y;\n    }\n\n    get(x: number, y: number): number {\n        return this.data[y * this.dim_x + x];\n    }\n\n    set(x: number, y: number, value: number) {\n        this.data[y * this.dim_x + x] = value;\n    }\n\n    rotate(degrees: number): Matrix2 {\n        //validate input better\n\n        if (degrees == 360 || degrees == 0) {\n            return this;\n        }\n\n        const n_rotations = degrees / 90;\n        let m: Matrix2 = this;\n        const dim_x = this.dim_x;\n        const dim_y = this.dim_y;\n        for (let i = 0; i < n_rotations; i++){\n            let new_data = new Int16Array(dim_x * dim_y);\n            let new_mat2 = new Matrix2(new_data, dim_y, dim_x);\n            for (let y = 0; y < dim_y; y++){\n                for (let x = 0; x < dim_x; x++){\n                    new_mat2.set(dim_y - 1 - y, x, m.get(x, y));\n                }\n            }\n            m = new_mat2;\n        }\n        return m\n    }\n\n    contains(value: number): boolean{\n        return this.data.indexOf(value) !== -1;\n    }\n}\n\n\nexport enum CardboardEdge {\n    intact = 0,\n    cut = 1,\n}\n\nexport enum TapeEdge {\n    untaped = 0,\n    taped = 1,\n    cut = 2\n}\n\nexport class EdgeState {\n    readonly cardboard: CardboardEdge;\n    readonly tape: TapeEdge;\n\n    constructor (cardboard?: CardboardEdge, tape?: TapeEdge){\n        if (cardboard === undefined) {\n            cardboard = CardboardEdge.intact;\n        }\n        this.cardboard = cardboard;\n\n        if (tape === undefined) {\n            tape = TapeEdge.untaped;\n        }\n        this.tape = tape;\n    }\n\n    cut() {\n        let new_tape: TapeEdge;\n        if (this.tape == TapeEdge.taped) {\n            new_tape = TapeEdge.cut;\n        } else {\n            new_tape = this.tape\n        }\n\n        return new EdgeState(CardboardEdge.cut, new_tape);\n    }\n\n\n    apply_tape() {\n        return new EdgeState(this.cardboard, TapeEdge.taped);\n    }\n}\n\nexport enum EdgeOperation {\n    cut = 0,\n    tape = 1\n}\n\nexport enum EdgeDirection {\n    horizontal = 0,\n    vertical = 1\n}\n\nexport enum RendState {\n    closed = 0,\n    open = 1\n}\n\nexport enum RendOperation {\n    close = 0,\n    open = 1\n}\n\nexport enum SpillageLevel {\n    none = 0,\n    light = 1,\n    heavy = 2\n}\n\nexport enum Weight {\n    empty = 0,\n    very_light = 1,\n    light = 2,\n    medium = 3,\n    heavy = 4,\n    very_heavy = 5\n}\n\nexport abstract class Item {\n    abstract weight(): Weight;\n    abstract name(): string;\n    abstract pre_gestalt(): string;\n    abstract post_gestalt(): string;\n    article(): string {\n        return 'a';\n    }\n}\n\n\nexport type Counter<T> = Map<T, number>;\n\nexport function counter_add<T>(counter: Counter<T>, key: T, inc: number){\n    let cur_val = 0;\n    if (counter.has(key)){\n        cur_val = counter.get(key);\n    }\n    return counter.set(key, cur_val + inc);\n}\n\nexport function counter_get<T>(counter: Counter<T>, key: T){\n    let cur_val = 0;\n    if (counter.has(key)){\n        cur_val = counter.get(key);\n    }\n    return cur_val;\n}\n\nexport function counter_update<T>(counter1: Counter<T>, counter2: Counter<T>){\n    let switch_to_immutable = isImmutable(counter1);\n    let result = counter1.asMutable();\n\n    counter2.forEach(function (v, k){\n        counter_add(result, k, v);\n    });\n\n    if (switch_to_immutable) {\n        result = result.asImmutable();\n    }\n    return result;\n}\n\nexport function counter_order<T>(counter: Counter<T>, include_zero=false){\n    let result = counter.sort();\n    if (!include_zero) {\n        result = result.filter((count) => count > 0);\n    }\n    return result.keySeq().toList().reverse();\n}\n\nexport enum RelativePosition {\n    left = 0, center = 1, right = 2,\n    top = 3, middle = 4, bottom = 5\n}\n\nexport class WreckError extends Error {}\n\n// used to signal errors caused by trying to update world state in a way that breaks the reality of the world\n// so assumes that commands are already valid, the attempted update *could work* if the state were different\nexport class WorldUpdateError extends WreckError {}\n\n// used to signal that a command/pseudo command is not specified legally\n// the command cannot be executed because it *cannot be interpreted*\nexport class CommandError extends WreckError {}","import {Item, Weight} from './datatypes'\n\nexport class Codex extends Item {\n    weight() {\n        return Weight.medium;\n    }\n\n    name() {\n        return 'codex';\n    }\n\n    pre_gestalt() {\n        return 'something thick and aged';\n    }\n\n    post_gestalt() {\n        return 'a thick, rotten codex with strange markings on the front';\n    }\n}\n\nexport class CityKey extends Item {\n    weight() {\n        return Weight.light;\n    }\n\n    name() {\n        return 'Key to the City';\n    }\n\n    pre_gestalt() {\n        return 'something glistening and golden';\n    }\n\n    post_gestalt() {\n        return 'a large, heavy golden key';\n    }\n\n    article() {\n        return 'the';\n    }\n}\n\nexport class Pinecone extends Item {\n    weight() {\n        return Weight.very_light;\n    }\n\n    name() {\n        return 'pinecone';\n    }\n\n    pre_gestalt() {\n        return 'something small, brown and flaky';\n    }\n\n    post_gestalt() {\n        return 'a small, brown pinecone that smells of the outdoors';\n    }\n}","import * as jQuery from 'jquery';\nimport 'jquery.terminal';\nimport {List} from 'immutable';\nimport {CityKey, Codex, Pinecone} from './items';\nimport {Item} from './datatypes';\nimport {Box, SingleBoxWorld, WorldDriver} from './world';\n\njQuery(function($: any) {\n    let contents = List<Item>([new Codex(), new Pinecone(), new CityKey()]);\n    let world = new SingleBoxWorld({box: new Box({contents: contents})});\n    let world_driver = new WorldDriver(world);\n\n    $('#term').terminal(function(command: string) {\n        if (command !== '') {\n            try {\n                var result = world_driver.run(command);\n                if (result !== undefined) {\n                    this.echo(new String(result));\n                }\n            } catch(e) {\n                this.error(new String(e));\n            }\n        } else {\n           this.echo('');\n        }\n    }, {\n        greetings: 'Demo Parser Interface for The Wreck',\n        name: 'wreck_demo',\n        height: 200,\n        prompt: '> '\n    });\n});","import {Face} from './datatypes';\n\nimport {List, Map} from 'immutable';\n\nexport function uncapitalize(msg: string) {\n    return msg[0].toLowerCase() + msg.slice(1);\n}\n\nexport function capitalize(msg: string) {\n    return msg[0].toUpperCase() + msg.slice(1);\n}\n\nexport function face_message(face_order: List<Face>, f_code_2_name?: Map<Face, string>){\n    if (f_code_2_name === undefined) {\n        f_code_2_name = Map<Face, string>([\n            [Face.n, 'back'],\n            [Face.s, 'front'],\n            [Face.e, 'right'],\n            [Face.w, 'left'],\n            [Face.t, 'top'],\n            [Face.b, 'bottom']\n        ]);\n    }\n\n    if (face_order.size == 1) {\n        return f_code_2_name.get(face_order.first()) + ' face';\n    } else {\n        return face_order.butLast().map(f_code_2_name.get).join(', ') + ' and ' + f_code_2_name.get(face_order.last()) + ' faces';\n    }\n}","import {BoxMesh, edge_2_quadrants, FaceMesh} from './box_geometry';\n\nimport {\n    CardboardEdge,\n    CommandError,\n    Counter,\n    counter_order,\n    counter_update,\n    Dangle,\n    Direction,\n    directions,\n    direction_2_face,\n    Edge,\n    EdgeDirection,\n    EdgeOperation,\n    EdgeState,\n    Face,\n    Item,\n    Partition,\n    Point2,\n    RelativePosition,\n    RendOperation,\n    RendState,\n    SpillageLevel,\n    TapeEdge,\n    Weight,\n    WorldUpdateError\n} from './datatypes';\n\nimport {\n    EdgeDirWord,\n    EdgeOpWord,\n    FaceWord,\n    PositionWord,\n    RendOpWord,\n    RollDirWord,\n    RotateYDirWord,\n    Token,\n    word_2_degrees,\n    word_2_dir,\n    word_2_edge_dir,\n    word_2_edge_op,\n    word_2_face,\n    word_2_relative_position,\n    word_2_rend_op\n} from './commands'\n\nimport {WorldUpdateEffects, with_world_update, world_update} from './world_update_effects';\n\nimport {CityKey, Codex, Pinecone} from './items';\n\nimport {capitalize, face_message, uncapitalize} from './text_tools';\n\nimport {List, Map, Set} from 'immutable';\n\nexport interface BoxParams {\n    box_mesh?: BoxMesh,\n    rend_state?: Map<Partition, RendState>,\n    dangle_state?: Map<Dangle, RendState>,\n    edge_state?: Map<Edge, EdgeState>,\n    contents?: List<Item>\n}\n\nexport class Box {\n    readonly box_mesh: BoxMesh;\n    readonly rend_state: Map<Partition, RendState>;\n    readonly dangle_state: Map<Dangle, RendState>;\n    readonly edge_state: Map<Edge, EdgeState>;\n    readonly contents: List<Item>;\n\n    constructor({box_mesh, rend_state, dangle_state, edge_state, contents}: BoxParams){\n        if (box_mesh === undefined) {\n            box_mesh = new BoxMesh({dimensions: [2, 2, 2]});\n        }\n        this.box_mesh = box_mesh;\n\n        if (rend_state === undefined) {\n            rend_state = this.default_rend_state(this.box_mesh);\n        }\n        this.rend_state = rend_state;\n\n        if (dangle_state === undefined) {\n            dangle_state = this.default_dangle_state(this.box_mesh);\n        }\n        this.dangle_state = dangle_state;\n\n        if (edge_state === undefined) {\n            edge_state = Map<Edge, EdgeState>();\n        }\n        this.edge_state = edge_state;\n\n        if (contents === undefined) {\n            contents = List<Item>();\n        }\n        this.contents = contents;\n    }\n\n    update({box_mesh, rend_state, dangle_state, edge_state, contents}: BoxParams){\n        if (box_mesh === undefined) {\n            box_mesh = this.box_mesh;\n        }\n\n        if (rend_state === undefined) {\n            rend_state = this.rend_state;\n        }\n\n        if (dangle_state === undefined) {\n            dangle_state = this.dangle_state;\n        }\n\n        if (edge_state === undefined) {\n            edge_state = this.edge_state;\n        }\n        \n        if (contents === undefined) {\n            contents = this.contents;\n        }\n\n        return new Box({box_mesh, rend_state, dangle_state, edge_state, contents});\n    }\n\n    default_rend_state(box_mesh: BoxMesh) {\n        let rends = box_mesh.get_free_rends();\n        let result = Map<Partition, RendState>().asMutable();\n        rends.forEach(function (r) {\n            result.set(r, RendState.closed);\n        });\n        return result.asImmutable();\n    }\n\n    default_dangle_state(box_mesh: BoxMesh) {\n        let dangles = box_mesh.get_dangles();\n        let result = Map<Dangle, RendState>().asMutable();\n        dangles.forEach(function (d) {\n            result.set(d, RendState.closed);\n        });\n        return result.asImmutable();\n    }\n\n    open_or_close_rend(operation: RendOperation, rend: Partition) {\n        let box_rends = this.box_mesh.get_rends();\n\n        if (!box_rends.contains(rend)){\n            throw new CommandError('rend does not exist on the box');\n        }\n\n        if (this.box_mesh.is_partition_fixed(rend)) {\n            throw new WorldUpdateError('cannot open or close a fixed rend');\n        }\n\n        let new_rend_state = this.rend_state;\n        let intended_new_state = operation == RendOperation.close ? RendState.closed : RendState.open;\n        if (intended_new_state == new_rend_state.get(rend)) {\n            throw new WorldUpdateError(`cannot ${operation} a rend that is already ${intended_new_state}`);\n        }\n\n        new_rend_state = new_rend_state.set(rend, intended_new_state);\n\n        let new_box = this.update({rend_state: new_rend_state});\n\n        if (new_box.is_collapsed()) {\n            let effects = world_update.effects;\n            effects.box_collapsed = true;\n            effects.collapse_spilled_items = effects.collapse_spilled_items.push(...new_box.contents.toArray());\n            let new_contents = List<Item>();\n            new_box = new_box.update({contents: new_contents});\n        }\n\n        return new_box;\n    }\n\n    open_or_close_dangle(operation: RendOperation, dangle: Dangle) {\n        if (this.box_mesh.is_partition_fixed(dangle.partition)) {\n            throw new WorldUpdateError('cannot open or close a fixed dangle');\n        }\n\n        let box_dangles = this.box_mesh.get_dangles();\n\n        if (box_dangles.some((d) => dangle == d)){\n            throw new CommandError('dangle does not exist on the box');\n        }\n\n        let intended_new_state = operation == RendOperation.close ? RendState.closed : RendState.open;\n        if (this.dangle_state.get(dangle) == intended_new_state) {\n            throw new WorldUpdateError('cannot ${operation} a dangle that is already ${intended_new_state}');\n        }\n\n        let new_dangle_state = this.dangle_state.set(dangle, intended_new_state);\n\n        let new_box = this.update({dangle_state: new_dangle_state});\n        if (new_box.is_collapsed()) {\n            let effects = world_update.effects;\n            effects.box_collapsed = true;\n            effects.collapse_spilled_items = effects.collapse_spilled_items.push(...new_box.contents.toArray());\n            let new_contents = List<Item>();\n            new_box = new_box.update({contents: new_contents});\n        }\n        return new_box;\n    }\n\n    rotate_y(degrees: number) {\n        let new_box_mesh = this.box_mesh.rotate_y(degrees);\n        return this.update(new_box_mesh);\n    }\n\n    roll(direction: Direction) {\n        if (this.dangle_state.some((state) => state == RendState.open)) {\n            throw new WorldUpdateError('cannot roll a box with open dangles');\n        }\n\n        let new_box_mesh = this.box_mesh.roll(direction);\n        let dir_face: Face = direction_2_face.get(direction);\n\n        let new_contents = this.contents;\n        let rend_state_updates = this.rend_state;\n        let dangle_state_updates = this.dangle_state;\n\n        let inner_this = this;\n        let effects = world_update.effects;\n\n        if (new_contents.size > 0){\n            let dir_2_opposite = Map<Face, Face>([\n                [Face.n, Face.s],\n                [Face.s, Face.n],\n                [Face.e, Face.w],\n                [Face.w, Face.e]]);\n \n            let heavy_spill_faces: [Face, Face][] = [\n                [dir_face, Face.b],\n                [Face.t, dir_face],\n                [Face.b, dir_2_opposite.get(dir_face)]];\n            let light_spill_faces = ([Face.n, Face.s, Face.e, Face.w]\n                .filter((d) => d !== dir_face && d !== dir_2_opposite.get(dir_face))\n            );\n                \n            this.rend_state.forEach(function (state, r) {\n                let face_membership = inner_this.box_mesh.get_partition_face_membership(r);\n                        \n                for (let [test_face, spill_face] of heavy_spill_faces) {\n                    if (face_membership.get(test_face) > 0) {\n                        effects.spill_faces = effects.spill_faces.push(spill_face);\n                        effects.spillage_level = SpillageLevel.heavy;\n                        effects.spilled_items = effects.spilled_items.push(...new_contents.toArray());\n                        new_contents = List<Item>();\n\n                        if (state == RendState.closed) {\n                            effects.spilled_rends == effects.spilled_rends.add(r);\n                            rend_state_updates = rend_state_updates.set(r, RendState.open);\n                        }\n\n                    }\n                }\n\n                for (let spill_face of light_spill_faces) {\n                    if (face_membership.get(spill_face) > 0) {\n                        effects.spill_faces = effects.spill_faces.push(spill_face);\n                        if (effects.spillage_level < SpillageLevel.light) {\n                            effects.spillage_level = SpillageLevel.light;\n                        }\n                        if (new_contents.size > 0) {\n                            effects.spilled_items = effects.spilled_items.push(new_contents.first());\n                            new_contents = new_contents.rest();\n                        }\n                    }\n                }\n            });\n\n            this.box_mesh.get_dangles().forEach(function (d) {\n                let spillage_level = SpillageLevel.none;\n                let spill_face: Face;\n                if (d.free_face == Face.t) {\n                    spillage_level = SpillageLevel.heavy;\n                    spill_face = dir_face;\n                } else if (d.free_face == dir_face) {\n                    spillage_level = SpillageLevel.heavy;\n                    spill_face = Face.b;\n                } else if (light_spill_faces.indexOf(d.free_face) !== -1) {\n                    spillage_level = SpillageLevel.light;\n                    spill_face = d.free_face;\n                }\n\n                if (spillage_level !== SpillageLevel.none) {\n                    if (spillage_level > effects.spillage_level) {\n                        effects.spillage_level = spillage_level;\n                    }\n                    effects.spill_faces = effects.spill_faces.push(spill_face);\n\n                    if (spillage_level == SpillageLevel.light) {\n                        if (new_contents.size > 0) {\n                            effects.spilled_items = effects.spilled_items.push(new_contents.first());\n                            new_contents = new_contents.rest();\n                        }\n                    } else if (spillage_level == SpillageLevel.heavy) {\n                        effects.spilled_items = effects.spilled_items.push(...new_contents.toArray());\n                        new_contents = List<Item>();\n                    }\n\n                    effects.spilled_dangles = effects.spilled_dangles.add(d);\n                    dangle_state_updates = dangle_state_updates.set(d, RendState.open);\n                }\n            });\n            \n            new_box_mesh.get_dangles().forEach(function (d) {\n                if (d.free_face == dir_2_opposite.get(dir_face)) {\n                    effects.spillage_level = SpillageLevel.heavy;\n                    effects.spill_faces = effects.spill_faces.push(dir_2_opposite.get(dir_face));\n\n                    effects.spilled_items = effects.spilled_items.push(...new_contents.toArray());\n                    new_contents = List<Item>();\n\n                    effects.spilled_dangles = effects.spilled_dangles.add(d);\n                    dangle_state_updates = dangle_state_updates.set(d, RendState.open);\n                }\n            });\n        }\n        let new_box = this.update({\n            box_mesh: new_box_mesh,\n            rend_state: rend_state_updates,\n            dangle_state: dangle_state_updates,\n            contents: new_contents\n        });\n\n        if (new_box.is_collapsed()) {\n            effects.box_collapsed = true;\n            effects.collapse_spilled_items = effects.collapse_spilled_items.push(...new_contents.toArray());\n            new_contents = List<Item>();\n            new_box = new_box.update({contents: new_contents});\n        }\n\n        return new_box;\n    }\n\n    lift() {\n        let effects = world_update.effects;\n        let inner_this = this;\n\n        let new_contents = this.contents;\n        let new_rend_state = this.rend_state;\n        let new_dangle_state = this.dangle_state;\n\n        if (new_contents.size > 0) {\n            let test_box_mesh = this.box_mesh.roll(Direction.s).roll(Direction.s);\n\n            test_box_mesh.get_free_rends().forEach(function (r) {\n                let face_membership = test_box_mesh.get_partition_face_membership(r);\n                let test_faces = [Face.b, Face.n, Face.s, Face.e, Face.w];\n                let count = test_faces.map(face_membership.get).reduce((x, y) => x + y);\n                if (face_membership.get(Face.t) > count) {\n                    effects.spillage_level = SpillageLevel.heavy;\n                    effects.spill_faces = effects.spill_faces.push(Face.b);\n\n                    effects.spilled_items = effects.spilled_items.push(...new_contents.toArray());\n                    new_contents = List<Item>();\n\n                    if (new_rend_state.get(r, RendState.closed) == RendState.closed) {\n                        effects.spilled_rends = effects.spilled_rends.add(r);\n                        new_rend_state = new_rend_state.set(r, RendState.open);\n                    }\n                }\n            });\n\n            test_box_mesh.get_dangles().forEach(function (d) {\n                if (d.free_face == Face.t) {\n                    effects.spillage_level = SpillageLevel.heavy;\n                    effects.spill_faces = effects.spill_faces.push(Face.b);\n\n                    effects.spilled_items = effects.spilled_items.push(...new_contents.toArray());\n                    new_contents = List<Item>();\n\n                    effects.spilled_dangles = effects.spilled_dangles.add(d);\n                    new_dangle_state = new_dangle_state.set(d, RendState.open);\n                }\n            });\n\n            this.rend_state.forEach(function (state, r) {\n                let face_membership = inner_this.box_mesh.get_partition_face_membership(r);\n                let light_spill_faces = [Face.n, Face.s, Face.e, Face.w].filter((f) => face_membership.get(f) > 0);\n                if (light_spill_faces.length > 0) {\n                    if (effects.spillage_level < SpillageLevel.light) {\n                        effects.spillage_level = SpillageLevel.light;\n                    }\n                    effects.spill_faces.push(...light_spill_faces);\n\n                    if (new_contents.size > 0) {\n                        effects.spilled_items = effects.spilled_items.push(new_contents.first());\n                        new_contents = new_contents.rest();\n                    }\n                    if (state == RendState.closed) {\n                        effects.spilled_rends.add(r);\n                        new_rend_state = new_rend_state.set(r, RendState.open);\n                    }\n                }\n            });\n\n            this.dangle_state.forEach(function (state, d) {\n                if ([Face.n, Face.s, Face.e, Face.w].indexOf(d.free_face) !== -1) {\n                    if (effects.spillage_level < SpillageLevel.light) {\n                        effects.spillage_level = SpillageLevel.light;\n                    }\n                    effects.spill_faces.push(d.free_face);\n\n                    if (new_contents.size > 0) {\n                        effects.spilled_items = effects.spilled_items.push(new_contents.first());\n                        new_contents = new_contents.rest();\n                    }\n                }\n            });\n        }\n\n        let new_box = this.update({rend_state: new_rend_state, dangle_state: new_dangle_state, contents: new_contents});\n\n        if (new_box.is_collapsed()) {\n            effects.box_collapsed = true;\n            effects.collapse_spilled_items = effects.collapse_spilled_items.push(...new_contents.toArray());\n            new_contents = List<Item>();\n            new_box = new_box.update({contents: new_contents});\n        }\n\n        return new_box;\n    }\n\n    cut(face: Face, start: Point2, end: Point2) {\n        return this.cut_or_tape(EdgeOperation.cut, face, start, end);\n    }\n\n    tape(face: Face, start: Point2, end: Point2) {\n        return this.cut_or_tape(EdgeOperation.tape, face, start, end);\n    }\n\n    cut_or_tape(operation: EdgeOperation, face: Face, start: Point2, end: Point2) {\n        let effects = world_update.effects;\n        let inner_this = this;\n\n        if (face !== Face.s && face !== Face.t) {\n            throw new WorldUpdateError('cannot cut or tape sides other than top or front');\n        }\n\n        let [x1, y1] = start;\n        let [x2, y2] = end;\n        let v1 = this.box_mesh.face_meshes.get(face).vertices.get(x1, y1);\n        let v2 = this.box_mesh.face_meshes.get(face).vertices.get(x2, y2);\n\n        let edge = new Edge(v1, v2);\n\n        let quadrants = edge_2_quadrants.get(edge);\n\n        this.rend_state.forEach(function (state, r) {\n            if (state == RendState.open && quadrants.every(r.contains)) {\n                throw new WorldUpdateError('cannot cut or tape on an open rend');\n            }\n        });\n\n        this.dangle_state.forEach(function (state, d) {\n            if (state == RendState.open && quadrants.every(d.partition.contains)) {\n                throw new WorldUpdateError('cannot cut or tape on an open dangle');\n            }\n        });\n\n        let new_box_mesh: BoxMesh;\n        if (operation == EdgeOperation.cut) {\n            new_box_mesh = this.box_mesh.cut(face, start, end);\n        } else {\n            new_box_mesh = this.box_mesh.tape(face, start, end);\n        }\n\n        let new_rend_state = this.default_rend_state(new_box_mesh);\n        this.rend_state.forEach(function (state, r) {\n            if (new_rend_state.has(r)) {\n                new_rend_state = new_rend_state.set(r, state);\n            } else {\n                effects.repaired_rends = effects.repaired_rends.push(r);\n            }\n        });\n\n        new_rend_state.forEach(function (state, new_r) {\n            if (!inner_this.rend_state.has(new_r)) {\n                effects.new_rends = effects.new_rends.push(new_r);\n            }\n        });\n\n        let new_dangle_state = this.default_dangle_state(new_box_mesh);\n        this.dangle_state.forEach(function (state, d) {\n            if (new_dangle_state.has(d)) {\n                new_dangle_state = new_dangle_state.set(d, state);\n            } else {\n                effects.repaired_dangles = effects.repaired_dangles.push(d);\n            }\n        });\n\n        new_dangle_state.forEach(function (state, new_d) {\n            if (!inner_this.dangle_state.has(new_d)) {\n                effects.new_dangles = effects.new_dangles.push(new_d);\n            }\n        });\n\n        let new_edge_state = this.edge_state;\n        if (operation == EdgeOperation.cut) {\n            new_edge_state = new_edge_state.set(edge, new_edge_state.get(edge, new EdgeState()).cut());\n        } else {\n            new_edge_state = new_edge_state.set(edge, new_edge_state.get(edge, new EdgeState()).apply_tape());\n        }\n\n        return this.update({box_mesh: new_box_mesh, rend_state: new_rend_state, dangle_state: new_dangle_state});\n    }\n\n    take_next_item() {\n        let effects = world_update.effects;\n\n        if (this.contents.size == 0) {\n            throw new WorldUpdateError('cannot take an item from an empty box');\n        }\n\n        if (!this.appears_open()) {\n            throw new WorldUpdateError('cannot take an item from a box with no visible openings');\n        }\n\n        let new_contents = this.contents;\n        effects.taken_items = effects.taken_items.push(new_contents.first());\n        new_contents = new_contents.rest();\n\n        return this.update({contents: new_contents});\n    }\n\n    next_item() {\n        if (this.contents.size == 0) {\n            return null;\n        }\n        return this.contents.first();\n    }\n\n    appears_open() {\n        if (this.rend_state.some((state) => state == RendState.open)) {\n            return true;\n        }\n        if (this.dangle_state.some((state) => state == RendState.open)) {\n            return true;\n        }\n        return false;\n    }\n\n    appears_empty() {\n        return this.appears_open() && this.contents.size == 0;\n    }\n\n    is_collapsed(){\n        let open_faces = Map<Face, number>().asMutable();\n        let inner_this = this;\n        \n        this.rend_state.forEach(function (state, r) {\n            if (state == RendState.open){\n                let face_membership = inner_this.box_mesh.get_partition_face_membership(r);\n                counter_update(open_faces, face_membership);\n            }\n        });\n\n        this.dangle_state.forEach(function (state, d) {\n            if (state == RendState.open){\n                let face_membership = inner_this.box_mesh.get_partition_face_membership(d.partition);\n                counter_update(open_faces, face_membership);\n            }\n        });\n\n        let total_open_sides = 0;\n        open_faces.forEach(function (count, face) {\n            if (count > 0) {\n                total_open_sides += 1;\n            }\n        });\n\n        return total_open_sides >= 3;\n    }\n}\n\nexport interface SingleBoxWorldParams {\n    box?: Box,\n    taken_items?: List<Item>,\n    spilled_items?: List<Item>\n}\n\nexport type CommandResult = [SingleBoxWorld, string];\n\nexport class SingleBoxWorld {\n    readonly box: Box;\n    readonly taken_items: List<Item>;\n    readonly spilled_items: List<Item>;\n\n    constructor({box, taken_items, spilled_items}: SingleBoxWorldParams) {\n        if (box === undefined) {\n            box = new Box({});\n        }\n        this.box = box;\n\n        if (taken_items === undefined) {\n            taken_items = List<Item>();\n        }\n        this.taken_items = taken_items;\n\n        if (spilled_items === undefined) {\n            spilled_items = List<Item>();\n        }\n        this.spilled_items = spilled_items;\n    }\n\n    update({box, taken_items, spilled_items}: SingleBoxWorldParams) {\n        if (box === undefined) {\n            box = this.box;\n        }\n\n        if (taken_items === undefined) {\n            taken_items = this.taken_items;\n        }\n\n        if (spilled_items === undefined) {\n            spilled_items = this.spilled_items;\n        }\n\n        return new SingleBoxWorld({box, taken_items, spilled_items});\n    }\n\n    command_rotate_y_box(dir: RotateYDirWord): CommandResult {\n        let degrees = dir == 'right' ? 90 : 270;\n        let new_box = this.box.rotate_y(degrees);\n        let new_world = this.update({box: new_box});\n\n        let message = `You turn the box 90 degrees to the ${dir}`;\n\n        return [new_world, message];\n    }\n\n    command_roll_box(cmd: RollDirWord): CommandResult {\n        let inner_this = this;\n        return with_world_update(function (effects) {\n            let direction = word_2_dir.get(cmd);\n            let new_box = inner_this.box.roll(direction);\n\n            let dir_msg = (cmd == 'left' || cmd == 'right') ? `over to the ${cmd}` : cmd;\n\n            let message: string;\n            let new_world: SingleBoxWorld;\n            if (effects.spillage_level == SpillageLevel.none) {\n                message = `You roll the box ${dir_msg}.`;\n                new_world = inner_this.update({box: new_box});\n            } else {\n                let spill_msg = uncapitalize(inner_this.spill_message(new_box));\n                message = `As you roll the box ${dir_msg}, ${spill_msg}`;\n\n                new_world = inner_this.update({box: new_box, spilled_items: effects.spilled_items});\n            }\n\n            if (effects.box_collapsed) {\n                message += '\\nThe added stress on the box causes it to collapse in on itself.';\n                if (effects.collapse_spilled_items.size > 0) {\n                    message += ' ';\n                    message += inner_this.item_spill_message(effects.collapse_spilled_items);\n                }\n            }\n\n            return [new_world, message];\n        });\n    }\n\n    command_lift_box(): CommandResult {\n        let inner_this = this;\n        return with_world_update(function (effects) {\n            let new_box = inner_this.box.lift();\n\n            let msg: string;\n            let new_world: SingleBoxWorld;\n            if (effects.spillage_level == SpillageLevel.none) {\n                msg = 'You lift up the box in place.';\n                new_world = inner_this.update({box: new_box});\n            } else {\n                let spill_msg = uncapitalize(inner_this.spill_message(new_box));\n                msg = 'As you start to lift up the box, ' + spill_msg;\n                new_world = inner_this.update({box: new_box, spilled_items: effects.spilled_items});\n            }\n\n            if (effects.spillage_level <= SpillageLevel.heavy && !effects.box_collapsed) {\n                let total_weight = new_box.contents.reduce((x, i) => x + i.weight(), 0);\n                total_weight = Math.floor(total_weight / 2.9); //rule of thumb for translating \"normal item weights\" to \"normal box weights\"\n\n                if (total_weight > Weight.very_heavy) {\n                    total_weight = Weight.very_heavy;\n                }\n                let weight_2_msg = Map<Weight, string>([\n                    [Weight.empty, 'so light as to be empty'],\n                    [Weight.very_light, 'quite light'],\n                    [Weight.light, 'light'],\n                    [Weight.medium, 'medium'],\n                    [Weight.heavy, 'somewhat heavy'],\n                    [Weight.very_heavy, 'very heavy']\n                ]);\n                let weight_msg = weight_2_msg.get(total_weight);\n                let subject = effects.spillage_level == SpillageLevel.none ? 'It' : 'The box';\n                msg += `\\n${subject} feels ${weight_msg}. You set it back down.`;\n            }\n\n            if (effects.box_collapsed) {\n                msg += '\\nThe added stress on the box causes it to collapse in on itself.';\n                if (effects.collapse_spilled_items.size > 0) {\n                    msg += ' ' + inner_this.item_spill_message(effects.collapse_spilled_items);\n                }\n            }\n\n            return [new_world, msg];\n        });\n    }\n\n    cut_or_tape_box(operation: EdgeOpWord, face_w: FaceWord, dir: EdgeDirWord, start_pos_a: PositionWord, start_pos_b: PositionWord, end_pos_b: PositionWord): CommandResult {\n        let inner_this = this;\n        return with_world_update(function (effects) {\n            let face = word_2_face.get(face_w);\n            if (face !== Face.t && face !== Face.s) {\n                throw new CommandError(`face must be either top or front. got ${face}`);\n            }\n\n            let dim_2_pos = [\n                ['left', 'center', 'right'],\n                ['top','middle', 'bottom']\n            ];\n\n            let dim_a: number;\n            let dim_b: number;\n\n            if (dir == 'vertically') {\n                dim_a = 0;\n                dim_b = 1\n            } else {\n                dim_a = 1;\n                dim_b = 0;\n            }\n\n            if (dim_2_pos[dim_a].indexOf(start_pos_a) == -1) {\n                throw new CommandError(`invalid start_pos_a for ${dir} ${operation}: ${start_pos_a}`);\n            }\n            if (dim_2_pos[dim_b].indexOf(start_pos_b) == -1) {\n                throw new CommandError(`invalid start_pos_b for ${dir} ${operation}: ${start_pos_b}`);\n            }\n            if (dim_2_pos[dim_b].indexOf(end_pos_b) == -1) {\n                throw new CommandError(`invalid end_pos_b for ${dir} ${operation}: ${end_pos_b}`);\n            }\n\n            let pt1: Point2 = [null, null];\n            let pt2: Point2 = [null, null];\n\n            pt1[dim_a] = pt2[dim_a] = dim_2_pos[dim_a].indexOf(start_pos_a);\n\n            pt1[dim_b] = dim_2_pos[dim_b].indexOf(start_pos_b);\n            pt2[dim_b] = dim_2_pos[dim_b].indexOf(end_pos_b);\n\n            if (Math.abs(pt1[dim_b] - pt2[dim_b]) == 0) {\n                throw new CommandError('no change between start_pos_b and end_pos_b.');\n            }\n\n            let cut_points: [Point2, Point2][];\n            if (Math.abs(pt1[dim_b] - pt2[dim_b]) == 2) {\n                let pt3: Point2 = [null, null];\n                pt3[dim_a] = dim_2_pos[dim_a].indexOf(start_pos_a);\n                pt3[dim_b] = 1;\n\n                cut_points = [[pt1, pt3], [pt3, pt2]];\n            } else {\n                cut_points = [[pt1, pt2]];\n            }\n\n            let cut_edge_states = List<EdgeState>();\n\n            let new_box = inner_this.box;\n\n            cut_points.forEach(function ([p1, p2]) {\n                let vertices = new_box.box_mesh.face_meshes.get(face).vertices;\n                let v1 = vertices.get(p1[0], p1[1]);\n                let v2 = vertices.get(p2[0], p2[1]);\n                let edge = new Edge(v1, v2);\n\n                cut_edge_states = cut_edge_states.push(new_box.edge_state.get(edge, new EdgeState()));\n                new_box = new_box.cut_or_tape(word_2_edge_op.get(operation), face, p1, p2);\n            });\n\n            effects.new_dangles.forEach(function (nd) {\n                if (effects.new_rends.contains(nd.partition)) {\n                    effects.new_dangles = effects.new_dangles.remove(effects.new_dangles.indexOf(nd));\n                }\n            });\n\n            effects.repaired_dangles.forEach(function (rd) {\n                if (effects.new_rends.contains(rd.partition)) {\n                    effects.repaired_dangles = effects.repaired_dangles.remove(effects.repaired_dangles.indexOf(rd));\n                }\n            });\n\n            let message: string;\n            if (operation == 'cut') {\n                message = inner_this.cut_message(new_box, cut_edge_states, effects);\n            } else {\n                message = inner_this.tape_message(new_box, cut_edge_states, effects);\n            }\n\n            return [inner_this.update({box: new_box}), message];\n        });\n    }\n\n    cut_message(new_box: Box, cut_edge_states: List<EdgeState>, effects: WorldUpdateEffects) {\n        let cut_message: string;\n        if (cut_edge_states.get(0).cardboard == CardboardEdge.intact) {\n            cut_message = 'You slide your blade along the cardboard';\n            if (cut_edge_states.get(0).tape == TapeEdge.taped) {\n                cut_message += ' and tape';\n            }\n            cut_message += '.';\n        } else {\n            if (cut_edge_states.get(0).tape == TapeEdge.taped) {\n                cut_message = 'You draw your blade easily along the line. It slits open the thin layer of tape covering the gap in the cardboard.';\n            } else {\n                cut_message = 'You slide your blade along the line, but nothing is there to resist it.';\n            }\n        }\n\n        if (cut_edge_states.size > 1) {\n            if (cut_edge_states.get(1).cardboard != cut_edge_states.get(0).cardboard) {\n                if (cut_edge_states.get(1).cardboard == CardboardEdge.intact) {\n                    cut_message += ' Halfway across, it catches on solid cardboard, and you pull it along the rest of the way.';\n                } else {\n                    if (cut_edge_states.get(1).tape == TapeEdge.taped) {\n                        cut_message += ' Halfway across, you reach a gap in the cardboard, and your blade slides easily along the thin layer of tape.';\n                    } else {\n                        cut_message += ' Halfway across, you reach a gap in the cardboard, and your blade is met with no further resistance.';\n                    }\n                }\n            }\n        }\n\n        let message = cut_message;\n        if (effects.new_rends.size > 0) {\n            let total_face_membership = Map<Face, number>();\n            effects.new_rends.forEach(function (r) {\n                let face_membership = new_box.box_mesh.get_partition_face_membership(r);\n                total_face_membership = counter_update(total_face_membership, face_membership);\n            })\n            let face_order = counter_order(total_face_membership);\n            let face_msg = face_message(face_order);\n\n            let new_rends_message: string;\n            if (effects.new_rends.size == 1) {\n                new_rends_message = `A new section of cardboard comes free on the ${face_msg}.`;\n            } else {\n                new_rends_message = `${face_order.size} new sections of cardboard come free on the ${face_msg}`;\n            }\n            message += '\\n' + new_rends_message;\n        }\n\n        if (effects.new_dangles.size > 0) {\n            let total_face_membership = Map<Face, number>();\n            effects.new_dangles.forEach(function (d) {\n                let face_membership = new_box.box_mesh.get_partition_face_membership(d.partition);\n                total_face_membership = counter_update(total_face_membership, face_membership);\n            })\n            let face_order = counter_order(total_face_membership);\n            let face_msg = face_message(face_order);\n\n            let new_rends_message: string;\n            if (effects.new_dangles.size == 1) {\n                new_rends_message = `A new section of cardboard on the ${face_msg} can be swung freely on a hinge.`;\n            } else {\n                new_rends_message = `${face_order.size} new sections of cardboard on the ${face_msg} can be swung freely on a hinge`;\n            }\n            message += '\\n' + new_rends_message;\n        }\n        return message;\n    }\n\n    tape_message(new_box: Box, cut_edge_states: List<EdgeState>, effects: WorldUpdateEffects) {\n        let tape_message: string;\n        if (cut_edge_states.some((ces) => ces.cardboard == CardboardEdge.intact)) {\n            tape_message = 'You draw out a length of tape and fasten it to the cardboard.';\n        } else {\n            if (cut_edge_states.some((ces) => ces.tape == TapeEdge.taped)) {\n                tape_message = 'You lay another length of tape over the cut edge.';\n            } else {\n                tape_message = 'You seal the gap in the cardboard with a length of tape.';\n            }\n        }\n\n        let message = tape_message;\n        if (effects.repaired_dangles.size > 0) {\n            let total_face_membership = Map<Face, number>();\n            effects.repaired_dangles.forEach(function (d) {\n                let face_membership = new_box.box_mesh.get_partition_face_membership(d.partition);\n                total_face_membership = counter_update(total_face_membership, face_membership);\n            })\n            let face_order = counter_order(total_face_membership);\n            let face_msg = face_message(face_order);\n\n            let repaired_dangles_message: string;\n            if (effects.new_rends.size == 1) {\n                repaired_dangles_message = `A formerly freely-swinging section of cardboard on the ${face_msg} can no longer swing on its hinge.`;\n            } else {\n                repaired_dangles_message = `${face_order.size} formerly freely-swinging sections of cardboard on the ${face_msg} can no longer swing on their hinges.`;\n            }\n            message += '\\n' + repaired_dangles_message;\n        }\n        return message;\n    }\n\n    command_cut_box(face_w: FaceWord, dir: EdgeDirWord, start_pos_a: PositionWord, start_pos_b: PositionWord, end_pos_b: PositionWord): CommandResult {\n        return this.cut_or_tape_box('cut', face_w, dir, start_pos_a, start_pos_b, end_pos_b);\n    }\n\n    command_tape_box(face_w: FaceWord, dir: EdgeDirWord, start_pos_a: PositionWord, start_pos_b: PositionWord, end_pos_b: PositionWord): CommandResult {\n        return this.cut_or_tape_box('tape', face_w, dir, start_pos_a, start_pos_b, end_pos_b);\n    }\n\n    item_spill_message(spilled_items: List<Item>){\n        let si = spilled_items;\n        let during_spill_msg: string;\n        let after_spill_msg: string;\n\n        if (si.size == 1) {\n            let item_msg = si.get(0).pre_gestalt();\n            during_spill_msg = `${capitalize(item_msg)} spills out before you.`;\n            after_spill_msg = `It's ${si.get(0).article()} ${si.get(0).name()} - ${si.get(0).post_gestalt()}.`;\n        } else {\n            let item_msg = si.butLast().map((i) => i.pre_gestalt()).join(', ') + ' and ' + si.last().pre_gestalt();\n            during_spill_msg = capitalize(`${item_msg} spill out before you.`);\n\n            let after_msgs = si.map((i) => `${i.article()} ${i.name()} - ${i.post_gestalt()}`);\n            after_spill_msg = \"It's \" + after_msgs.butLast().join(', ') + ' and ' + after_msgs.last() + '.';\n        }\n\n        let spill_msg = during_spill_msg + ' ' + after_spill_msg;\n        return spill_msg;\n    }\n\n    spill_message(new_box: Box) {\n        let effects = world_update.effects;\n\n        let structural_dmg_msgs = List<string>();\n\n        if (effects.spilled_rends.size > 0) {\n            let total_face_membership = Map<Face, number>();\n            effects.spilled_rends.forEach(function (sr) {\n                let sr_mem = new_box.box_mesh.get_partition_face_membership(sr);\n                total_face_membership = counter_update(total_face_membership, sr_mem);\n            });\n            let sr_faces = counter_order(total_face_membership);\n            let f_msg = face_message(sr_faces);\n            let spilled_rends_msg = `free cardboard on the ${f_msg} falls away`;\n            structural_dmg_msgs = structural_dmg_msgs.push(spilled_rends_msg);\n        }\n\n        if (effects.spilled_dangles.size > 0) {\n            let total_face_membership = Map<Face, number>();\n            effects.spilled_dangles.forEach(function (sd) {\n                let sd_mem = new_box.box_mesh.get_partition_face_membership(sd.partition);\n                total_face_membership = counter_update(total_face_membership, sd_mem);\n            });\n            let sd_faces = counter_order(total_face_membership);\n            let f_msg = face_message(sd_faces);\n            let spilled_dangles_msg = `dangling cardboard on the ${f_msg} swings open`;\n            structural_dmg_msgs = structural_dmg_msgs.push(spilled_dangles_msg);\n        }\n\n        let spill_msg = this.item_spill_message(effects.spilled_items);\n        let result: string;\n\n        if (structural_dmg_msgs.size > 0) {\n            let structure_dmg_msg = structural_dmg_msgs.join(' and ');\n            result = `${structure_dmg_msg}. ${spill_msg}`;\n        } else {\n            result = spill_msg;\n        }\n        return result;\n    }\n\n    command_open_dangle(face: FaceWord): CommandResult {\n        return this.open_or_close_dangle('open', face);\n    }\n\n    command_close_dangle(face: FaceWord): CommandResult {\n        return this.open_or_close_dangle('close', face);\n    }\n\n    open_or_close_dangle(operation: RendOpWord, face_w: FaceWord): CommandResult {\n        let inner_this = this;\n        return with_world_update(function (effects) {\n            let face = word_2_face.get(face_w)\n            let applicable_dangles = inner_this.box.dangle_state.keySeq().filter((d) => d.free_face == face);\n            let new_box = inner_this.box;\n            let updated = List<Dangle>();\n            applicable_dangles.forEach(function (d){\n                let err = false;\n                try {\n                    new_box = new_box.open_or_close_dangle(word_2_rend_op.get(operation), d);\n                } catch (e) {\n                    err = true;\n                    if (!(e instanceof WorldUpdateError)) {\n                        throw e;\n                    }\n                }\n                if (!err) {\n                    updated = updated.push(d);\n                }\n            });\n            if (updated.size == 0) {\n                throw new WorldUpdateError(`No dangles to ${operation} on ${face} face`);\n            }\n\n            let swing_dir_msg = operation == 'close' ? 'in' : 'out';\n            let num_hinges = updated.map((d) => d.fixed_face).toSet().size;\n            let hinge_msg: string;\n            if (num_hinges == 1) {\n                hinge_msg = 'hinge';\n            } else {\n                hinge_msg = 'hinges';\n            }\n\n            let message = `You swing the cardboard on the ${Face[face]} of the box ${swing_dir_msg} on its ${hinge_msg}`;\n            if (!inner_this.box.appears_open() && new_box.appears_open()) {\n                message += '\\nYou get a glimpse inside the box through the opening.';\n\n                if (new_box.appears_empty()) {\n                    message += \" It's empty.\";\n                } else {\n                    message += ` You can see ${new_box.next_item().pre_gestalt()} inside.`;\n                }\n            }\n            if (effects.box_collapsed) {\n                message += '\\nThe added stress on the box causes it to collapse in on itself.';\n                if (effects.collapse_spilled_items.size > 0) {\n                    message += ' ' + inner_this.item_spill_message(effects.collapse_spilled_items);\n                }\n            }\n            return [inner_this.update({box: new_box}), message];\n        });\n    }\n\n    command_open_rend(face_w: FaceWord): CommandResult {\n        return this.open_or_close_rend('open', face_w);\n    }\n\n    command_close_rend(face_w: FaceWord): CommandResult {\n        return this.open_or_close_rend('close', face_w);\n    }\n\n    open_or_close_rend(operation: RendOpWord, face_w: FaceWord): CommandResult {\n        let inner_this = this;\n        return with_world_update(function (effects) {\n            let face = word_2_face.get(face_w);\n            let applicable_rends = List<Partition>();\n            inner_this.box.rend_state.forEach(function (s, r) {\n                let face_membership = inner_this.box.box_mesh.get_partition_face_membership(r);\n                if (face_membership.get(face) > 0) {\n                    applicable_rends = applicable_rends.push(r);\n                }\n            });\n\n            let new_box = inner_this.box;\n            let updated = List<Partition>();\n            applicable_rends.forEach(function (r){\n                let err = false;\n                try {\n                    new_box = new_box.open_or_close_rend(word_2_rend_op.get(operation), r);\n                } catch (e) {\n                    err = true;\n                    if (!(e instanceof WorldUpdateError)) {\n                        throw e;\n                    }\n                }\n                if (!err) {\n                    updated = updated.push(r);\n                }\n            });\n            if (updated.size == 0) {\n                throw new WorldUpdateError(`No rends to ${operation} on ${face} face`);\n            }\n\n            let total_face_membership = Map<Face, number>();\n            total_face_membership = updated.reduce(\n                (total, r) => counter_update(\n                    total,\n                    inner_this.box.box_mesh.get_partition_face_membership(r)),\n                total_face_membership);\n\n            let face_msg = face_message(counter_order(total_face_membership));\n\n            let message: string;\n            if (operation == 'open') {\n                message = `You remove the free cardboard from the ${face_msg} and place it to the side.`;\n            } else {\n                `You replace the missing cardboard from the ${face_msg}.`;\n            }\n\n            if (!inner_this.box.appears_open() && new_box.appears_open()) {\n                message += '\\nYou get a glimpse inside the box through the opening.';\n\n                if (new_box.appears_empty()) {\n                    message += \" It's empty.\";\n                } else {\n                    message += ` You can see ${new_box.next_item().pre_gestalt()} inside.`;\n                }\n            }\n            if (effects.box_collapsed) {\n                message += '\\nThe added stress on the box causes it to collapse in on itself.';\n                if (effects.collapse_spilled_items.size > 0) {\n                    message += ' ' + inner_this.item_spill_message(effects.collapse_spilled_items);\n                }\n            }\n            return [inner_this.update({box: new_box}), message];\n        });\n    }\n\n    command_take_item_box(): CommandResult {\n        let inner_this = this;\n        return with_world_update(function (effects) {\n            let new_box = inner_this.box.take_next_item();\n\n            let new_taken_items = inner_this.taken_items;\n            new_taken_items.push(...effects.taken_items.toArray());\n\n            let item = effects.taken_items.get(0);\n            let message = `You reach in and take ${item.pre_gestalt()}. It's ${item.post_gestalt()}; ${item.article()} ${item.name()}.`;\n        \n            if (new_box.appears_empty()) {\n                message += '\\nThe box is empty now.';\n            } else {\n                message += `\\nYou can now see ${new_box.next_item().pre_gestalt()} inside the box.`;\n            }\n\n            return [inner_this.update({box: new_box, taken_items: new_taken_items}), message];\n        });\n    }\n}\n\nexport class WorldDriver {\n    world: SingleBoxWorld;\n\n    constructor (initial_world: SingleBoxWorld) {\n        this.world = initial_world;\n    }\n\n    apply_command(cmd_name: Token, ...cmd_args: Token[]) {\n        let cmd_method: (...cmd_args: Token[]) => CommandResult;\n        switch (cmd_name) {\n            case 'rotate_y_box':\n                cmd_method = this.world.command_rotate_y_box;\n                break;\n            case 'roll_box':\n                cmd_method = this.world.command_roll_box;\n                break;\n            case 'lift_box':\n                cmd_method = this.world.command_lift_box;\n                break;\n            case 'cut_box':\n                cmd_method = this.world.command_cut_box;\n                break;\n            case 'tape_box':\n                cmd_method = this.world.command_tape_box;\n                break;\n            case 'open_dangle':\n                cmd_method = this.world.command_open_dangle;\n                break;\n            case 'close_dangle':\n                cmd_method = this.world.command_close_dangle;\n                break;\n            case 'open_rend':\n                cmd_method = this.world.command_open_rend;\n                break;\n            case 'close_rend':\n                cmd_method = this.world.command_close_rend;\n                break;\n            case 'take_item_box':\n                cmd_method = this.world.command_take_item_box;\n                break;\n            default:\n                throw new CommandError(`invalid cmd_name given: ${cmd_name}`);\n        }\n        let [new_world, msg] = cmd_method.apply(this.world, cmd_args);\n        let tokens: Token[] = [cmd_name];\n        tokens.push(...cmd_args);\n        //console.log('> ' + tokens.join(' ') + '\\n');\n        //console.log(msg + '\\n');\n        this.world = new_world;\n        return msg\n    }\n\n    run(cmd: string) {\n        let [cmd_name, cmd_args]: [Token, Token[]] = parse_command(cmd);\n        return this.apply_command(cmd_name, ...cmd_args);\n    }\n}\n\nexport function parse_command(cmd: string): [Token, Token[]] {\n    let tokens = cmd.split(/\\s*/);\n    return [tokens[0], tokens.slice(1)];\n}\n\nexport function test() {\n    let contents = List<Item>([new Codex(), new Pinecone(), new CityKey()]);\n    let world = new SingleBoxWorld({box: new Box({contents: contents})});\n\n    console.log('NEW WORLD: test heavy spillage when rolling\\n\\n\\n');\n\n    let d = new WorldDriver(world);\n    d.apply_command('lift_box');\n    d.apply_command('roll_box', 'forward');\n    d.apply_command('rotate_y_box', 'left');\n\n    // cut the top face vertically along the center from top to bottom\n    d.apply_command('cut_box', 'top', 'vertically', 'center', 'top', 'bottom');\n\n    // cut the top face vertically along the right edge from top to bottom\n    d.apply_command('cut_box', 'top', 'vertically', 'right', 'top', 'bottom');\n\n    // should result in a dangle\n    // cut the top face horizontally along the top edge from center to right\n    d.apply_command('cut_box', 'top', 'horizontally', 'top', 'center', 'right');\n\n    // should result in a rend\n    // cut the top face horizontally along the bottom edge from center to right\n    d.apply_command('cut_box', 'top', 'horizontally', 'bottom', 'center', 'right');\n\n    d.apply_command('roll_box', 'forward');\n\n    // should result in the rend facing straight down, maybe spilling\n    d.apply_command('roll_box', 'forward');\n\n    d.apply_command('lift_box');\n\n    console.log('\\n\\n\\nNEW WORLD: test heavy spillage and collapse from bottom when lifting\\n\\n\\n');\n    let d2 = new WorldDriver(world);\n\n    d2.apply_command('cut_box', 'front', 'horizontally', 'bottom', 'left', 'right');\n    d2.apply_command('rotate_y_box', 'left');\n    d2.apply_command('cut_box', 'front', 'horizontally', 'bottom', 'left', 'right');\n    d2.apply_command('rotate_y_box', 'left');\n    d2.apply_command('cut_box', 'front', 'horizontally', 'bottom', 'left', 'right');\n    d2.apply_command('rotate_y_box', 'left');\n    d2.apply_command('cut_box', 'front', 'horizontally', 'bottom', 'left', 'right');\n    d2.apply_command('lift_box');\n    \n    console.log('\\n\\n\\nNEW WORLD: test taping\\n\\n\\n');\n    let d3 = new WorldDriver(world);\n\n    d3.apply_command('cut_box', 'top', 'horizontally', 'top', 'left', 'right');\n    d3.apply_command('cut_box', 'top', 'horizontally', 'bottom', 'left', 'right');\n    d3.apply_command('cut_box', 'top', 'vertically', 'left', 'top', 'bottom');\n\n    d3.apply_command('open_dangle', 'top');\n    d3.apply_command('take_item_box');\n\n    d3.apply_command('close_dangle', 'top');\n\n    d3.apply_command('cut_box', 'top', 'vertically', 'right', 'top', 'bottom');\n    d3.apply_command('open_rend', 'top');\n    d3.apply_command('take_item_box');\n    d3.apply_command('take_item_box');\n    d3.apply_command('close_rend', 'top');\n\n    d3.apply_command('tape_box', 'top', 'vertically', 'right', 'top', 'bottom');\n    d3.apply_command('tape_box', 'top', 'vertically', 'left', 'top', 'middle');\n\n    console.log('\\n\\n\\nNEW WORLD: test light spillage when rolling and lifting\\n\\n\\n');\n    let d4 = new WorldDriver(world);\n\n    d4.apply_command('cut_box', 'front', 'horizontally', 'top', 'left', 'right');\n    d4.apply_command('cut_box', 'front', 'horizontally', 'bottom', 'left', 'right');\n    d4.apply_command('cut_box', 'front', 'vertically', 'left', 'top', 'bottom');\n\n    d4.apply_command('lift_box');\n\n    d4.apply_command('cut_box', 'front', 'vertically', 'right', 'top', 'bottom');\n\n    d4.apply_command('roll_box', 'right');\n}\n","import {Matrix2, make_matrix2, Dangle, Face, Edge, Partition, faces, EdgeOperation, Point2, Direction, Item, SpillageLevel} from './datatypes';\n\nimport {Map, List, Set, OrderedSet, is} from 'immutable';\n\nexport class WorldUpdateEffects {\n    spill_faces = List<Face>();\n    spilled_items = List<Item>();\n    spilled_rends = Set<Partition>();\n    spilled_dangles = Set<Dangle>();\n    spillage_level = SpillageLevel.none;\n    taken_items = List<Item>();\n    new_rends = List<Partition>();\n    new_dangles = List<Dangle>();\n    repaired_rends = List<Partition>();\n    repaired_dangles = List<Dangle>();\n    box_collapsed = false;\n    collapse_spilled_items = List<Item>();\n}\n\ninterface WorldUpdateEffectsRef {\n    effects?: WorldUpdateEffects\n}\n\nexport let world_update: WorldUpdateEffectsRef = {};\n\nexport function with_world_update(f: (effects: WorldUpdateEffects) => any) {\n    //TODO validate: error if world_update.effects isn't null/undefined\n    world_update.effects = new WorldUpdateEffects();\n    let result = f(world_update.effects);\n    world_update.effects = undefined;\n    return result;\n}\n\n//TODO define world update exceptions"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}